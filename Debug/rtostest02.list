
rtostest02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a540  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800a6e0  0800a6e0  0001a6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abec  0800abec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800abec  0800abec  0001abec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf4  0800abf4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf4  0800abf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800abfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004078  200001e4  0800ade0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000425c  0800ade0  0002425c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116c2  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f45  00000000  00000000  000318d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  000357a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c5c  00000000  00000000  00036600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013807  00000000  00000000  0004f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091991  00000000  00000000  00062a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f43f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  000f4444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6c8 	.word	0x0800a6c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a6c8 	.word	0x0800a6c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <AP3426_WriteOneByte>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AP3426_WriteOneByte(uint8_t reg, uint8_t data)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]
	uint16_t write_data = reg | (data << 8);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	b21a      	sxth	r2, r3
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, (AP3426_ADDR << 1) | AP3426_W, (uint8_t*)&write_data, 2, 300) != HAL_OK)
 800102a:	f107 020e 	add.w	r2, r7, #14
 800102e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	213c      	movs	r1, #60	; 0x3c
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <AP3426_WriteOneByte+0x58>)
 800103a:	f001 f913 	bl	8002264 <HAL_I2C_Master_Transmit>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <AP3426_WriteOneByte+0x40>
	{
		Error_Handler();
 8001044:	f000 fa2c 	bl	80014a0 <Error_Handler>
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8001048:	bf00      	nop
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <AP3426_WriteOneByte+0x58>)
 800104c:	f001 fc2e 	bl	80028ac <HAL_I2C_GetState>
 8001050:	4603      	mov	r3, r0
 8001052:	2b20      	cmp	r3, #32
 8001054:	d1f9      	bne.n	800104a <AP3426_WriteOneByte+0x42>
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000458 	.word	0x20000458

08001064 <AP3426_ReadOneByte>:

uint8_t AP3426_ReadOneByte(uint8_t reg)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	uint8_t read_data = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(&hi2c1, (AP3426_ADDR << 1) | AP3426_W, (uint8_t*)&reg, 1, 300) != HAL_OK)
 8001072:	1dfa      	adds	r2, r7, #7
 8001074:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	213c      	movs	r1, #60	; 0x3c
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <AP3426_ReadOneByte+0x60>)
 8001080:	f001 f8f0 	bl	8002264 <HAL_I2C_Master_Transmit>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <AP3426_ReadOneByte+0x2a>
	{
		Error_Handler();
 800108a:	f000 fa09 	bl	80014a0 <Error_Handler>
	}
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 800108e:	bf00      	nop
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <AP3426_ReadOneByte+0x60>)
 8001092:	f001 fc0b 	bl	80028ac <HAL_I2C_GetState>
 8001096:	4603      	mov	r3, r0
 8001098:	2b20      	cmp	r3, #32
 800109a:	d1f9      	bne.n	8001090 <AP3426_ReadOneByte+0x2c>
	if (HAL_I2C_Master_Receive(&hi2c1, (AP3426_ADDR << 1) | AP3426_R, (uint8_t*)&read_data, 1, 300) != HAL_OK)
 800109c:	f107 020f 	add.w	r2, r7, #15
 80010a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	213d      	movs	r1, #61	; 0x3d
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <AP3426_ReadOneByte+0x60>)
 80010ac:	f001 f9d8 	bl	8002460 <HAL_I2C_Master_Receive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <AP3426_ReadOneByte+0x56>
	{
		Error_Handler();
 80010b6:	f000 f9f3 	bl	80014a0 <Error_Handler>
	}
	return read_data;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000458 	.word	0x20000458

080010c8 <AP3426_Read_ALS_Data>:
		*ir = (ir_h << 8) | (ir_l & 0x03);
	}
}

void AP3426_Read_ALS_Data(uint16_t* als)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	uint8_t als_l = 0, als_h = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	2300      	movs	r3, #0
 80010d6:	73bb      	strb	r3, [r7, #14]
	als_l = AP3426_ReadOneByte(ALS_Data_Low);
 80010d8:	200c      	movs	r0, #12
 80010da:	f7ff ffc3 	bl	8001064 <AP3426_ReadOneByte>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	als_h = AP3426_ReadOneByte(ALS_Data_High);
 80010e2:	200d      	movs	r0, #13
 80010e4:	f7ff ffbe 	bl	8001064 <AP3426_ReadOneByte>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73bb      	strb	r3, [r7, #14]
	*als = (als_h << 8) | (als_l);
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	801a      	strh	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <vApplicationGetIdleTaskMemory+0x2c>)
 8001118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <vApplicationGetIdleTaskMemory+0x30>)
 800111e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000204 	.word	0x20000204
 8001138:	20000258 	.word	0x20000258

0800113c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_FREERTOS_Init+0x30>)
 8001144:	1d3c      	adds	r4, r7, #4
 8001146:	461d      	mov	r5, r3
 8001148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fbae 	bl	80048ba <osThreadCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <MX_FREERTOS_Init+0x34>)
 8001162:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bdb0      	pop	{r4, r5, r7, pc}
 800116c:	0800a6ec 	.word	0x0800a6ec
 8001170:	20000200 	.word	0x20000200

08001174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	AP3426_WriteOneByte(SYS_CONTROL_ADDR,AP3426_MODE_SW_RESET ); // AP3426 execute reset
 800117c:	2104      	movs	r1, #4
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ff42 	bl	8001008 <AP3426_WriteOneByte>
	osDelay(50);
 8001184:	2032      	movs	r0, #50	; 0x32
 8001186:	f003 fbe4 	bl	8004952 <osDelay>
	AP3426_WriteOneByte(SYS_CONTROL_ADDR,AP3426_MODE_IR_ALS_AND_PS ); // AP3426 enable IR, ALS and PsData
 800118a:	2103      	movs	r1, #3
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ff3b 	bl	8001008 <AP3426_WriteOneByte>
	osDelay(50);
 8001192:	2032      	movs	r0, #50	; 0x32
 8001194:	f003 fbdd 	bl	8004952 <osDelay>
	AP3426_WriteOneByte(PS_Low_LowThreshold, Init_ps_lowThreshold); //PS Low Threshold=0x200
 8001198:	21c8      	movs	r1, #200	; 0xc8
 800119a:	202a      	movs	r0, #42	; 0x2a
 800119c:	f7ff ff34 	bl	8001008 <AP3426_WriteOneByte>
	osDelay(50);
 80011a0:	2032      	movs	r0, #50	; 0x32
 80011a2:	f003 fbd6 	bl	8004952 <osDelay>
	AP3426_WriteOneByte(PS_High_LowThreshold, Init_pshi_lowbyteThreshold); //PS High Threshold=500
 80011a6:	21f4      	movs	r1, #244	; 0xf4
 80011a8:	202c      	movs	r0, #44	; 0x2c
 80011aa:	f7ff ff2d 	bl	8001008 <AP3426_WriteOneByte>
	AP3426_WriteOneByte(PS_High_LowThreshold, Init_pshi_upbyteThreshold); //PS High Threshold=500
 80011ae:	2101      	movs	r1, #1
 80011b0:	202c      	movs	r0, #44	; 0x2c
 80011b2:	f7ff ff29 	bl	8001008 <AP3426_WriteOneByte>
	osDelay(50);
 80011b6:	2032      	movs	r0, #50	; 0x32
 80011b8:	f003 fbcb 	bl	8004952 <osDelay>
  for(;;)
  {
      //Print ALS ADC value
	  uint16_t *als;
	  uint8_t als_l = 0, als_h = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	2300      	movs	r3, #0
 80011c2:	73bb      	strb	r3, [r7, #14]
	  als_l = AP3426_ReadOneByte(ALS_Data_Low);
 80011c4:	200c      	movs	r0, #12
 80011c6:	f7ff ff4d 	bl	8001064 <AP3426_ReadOneByte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	73fb      	strb	r3, [r7, #15]
	  als_h = AP3426_ReadOneByte(ALS_Data_High);
 80011ce:	200d      	movs	r0, #13
 80011d0:	f7ff ff48 	bl	8001064 <AP3426_ReadOneByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73bb      	strb	r3, [r7, #14]
	  *als = (als_h << 8) | (als_l);
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	b292      	uxth	r2, r2
 80011ea:	801a      	strh	r2, [r3, #0]
	  AP3426_Read_ALS_Data(&als);
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff69 	bl	80010c8 <AP3426_Read_ALS_Data>
	  printf("AP3426 ALS = 0x%x\n\r", als);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	4619      	mov	r1, r3
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <StartDefaultTask+0xb8>)
 80011fc:	f005 fc60 	bl	8006ac0 <iprintf>

	  osDelay(100);
 8001200:	2064      	movs	r0, #100	; 0x64
 8001202:	f003 fba6 	bl	8004952 <osDelay>

	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);	//PA5 High
 8001206:	2201      	movs	r2, #1
 8001208:	2120      	movs	r1, #32
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <StartDefaultTask+0xbc>)
 800120c:	f000 fecc 	bl	8001fa8 <HAL_GPIO_WritePin>
	  osDelay(500);// Delay 500ms
 8001210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001214:	f003 fb9d 	bl	8004952 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);//PA5 Low
 8001218:	2200      	movs	r2, #0
 800121a:	2120      	movs	r1, #32
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <StartDefaultTask+0xbc>)
 800121e:	f000 fec3 	bl	8001fa8 <HAL_GPIO_WritePin>
	  osDelay(500);// Delay 500ms
 8001222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001226:	f003 fb94 	bl	8004952 <osDelay>
  {
 800122a:	e7c7      	b.n	80011bc <StartDefaultTask+0x48>
 800122c:	0800a708 	.word	0x0800a708
 8001230:	40020000 	.word	0x40020000

08001234 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_GPIO_Init+0x7c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <MX_GPIO_Init+0x7c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_GPIO_Init+0x7c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_GPIO_Init+0x7c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <MX_GPIO_Init+0x7c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_GPIO_Init+0x7c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2160      	movs	r1, #96	; 0x60
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <MX_GPIO_Init+0x80>)
 8001288:	f000 fe8e 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_GPIO_Init+0x80>)
 80012a4:	f000 fcfc 	bl	8001ca0 <HAL_GPIO_Init>

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_I2C1_Init+0x50>)
 80012be:	4a13      	ldr	r2, [pc, #76]	; (800130c <MX_I2C1_Init+0x54>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_I2C1_Init+0x50>)
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_I2C1_Init+0x58>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_I2C1_Init+0x50>)
 80012d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_I2C1_Init+0x50>)
 80012f6:	f000 fe71 	bl	8001fdc <HAL_I2C_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001300:	f000 f8ce 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000458 	.word	0x20000458
 800130c:	40005400 	.word	0x40005400
 8001310:	00061a80 	.word	0x00061a80

08001314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_I2C_MspInit+0x84>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <HAL_I2C_MspInit+0x8c>)
 800136e:	f000 fc97 	bl	8001ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_I2C_MspInit+0x88>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40005400 	.word	0x40005400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f000 fa64 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f80c 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f7ff ff40 	bl	8001234 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b4:	f000 f9ba 	bl	800172c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013b8:	f7ff ff7e 	bl	80012b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013bc:	f7ff febe 	bl	800113c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013c0:	f003 fa74 	bl	80048ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <main+0x20>
	...

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	2230      	movs	r2, #48	; 0x30
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fcf0 	bl	8005dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <SystemClock_Config+0xd0>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a28      	ldr	r2, [pc, #160]	; (8001498 <SystemClock_Config+0xd0>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b26      	ldr	r3, [pc, #152]	; (8001498 <SystemClock_Config+0xd0>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <SystemClock_Config+0xd4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001414:	4a21      	ldr	r2, [pc, #132]	; (800149c <SystemClock_Config+0xd4>)
 8001416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <SystemClock_Config+0xd4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800143c:	2310      	movs	r3, #16
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001440:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001446:	2304      	movs	r3, #4
 8001448:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800144a:	2307      	movs	r3, #7
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fd66 	bl	8002f24 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800145e:	f000 f81f 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 ffc8 	bl	8003414 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800148a:	f000 f809 	bl	80014a0 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	; 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_MspInit+0x4c>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_MspInit+0x4c>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f9f4 	bl	8001918 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001530:	f003 ff92 	bl	8005458 <xTaskGetSchedulerState>
 8001534:	4603      	mov	r3, r0
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800153a:	f004 f9cd 	bl	80058d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <USART2_IRQHandler+0x10>)
 800154a:	f002 fa63 	bl	8003a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200004b0 	.word	0x200004b0

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001572:	f004 fbeb 	bl	8005d4c <__errno>
 8001576:	4603      	mov	r3, r0
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
	return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_exit>:

void _exit (int status)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffe7 	bl	8001568 <_kill>
	while (1) {}		/* Make sure we hang here */
 800159a:	e7fe      	b.n	800159a <_exit+0x12>

0800159c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e00a      	b.n	80015c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ae:	f3af 8000 	nop.w
 80015b2:	4601      	mov	r1, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	60ba      	str	r2, [r7, #8]
 80015ba:	b2ca      	uxtb	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf0      	blt.n	80015ae <_read+0x12>
	}

return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e009      	b.n	80015fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f889 	bl	8001708 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf1      	blt.n	80015e8 <_write+0x12>
	}
	return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001636:	605a      	str	r2, [r3, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f004 fb50 	bl	8005d4c <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20018000 	.word	0x20018000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	200004ac 	.word	0x200004ac
 80016e0:	20004260 	.word	0x20004260

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001710:	1d39      	adds	r1, r7, #4
 8001712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001716:	2201      	movs	r2, #1
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <__io_putchar+0x20>)
 800171a:	f002 f8e8 	bl	80038ee <HAL_UART_Transmit>

	return ch;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200004b0 	.word	0x200004b0

0800172c <MX_USART2_UART_Init>:


/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART2_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001764:	f002 f876 	bl	8003854 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f7ff fe97 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200004b0 	.word	0x200004b0
 800177c:	40004400 	.word	0x40004400

08001780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_UART_MspInit+0x94>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d133      	bne.n	800180a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017da:	230c      	movs	r3, #12
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ea:	2307      	movs	r3, #7
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <HAL_UART_MspInit+0x9c>)
 80017f6:	f000 fa53 	bl	8001ca0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2026      	movs	r0, #38	; 0x26
 8001800:	f000 f985 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001804:	2026      	movs	r0, #38	; 0x26
 8001806:	f000 f99e 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40004400 	.word	0x40004400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001858 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800183c:	4c0b      	ldr	r4, [pc, #44]	; (800186c <LoopFillZerobss+0x26>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800184a:	f7ff ff4b 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184e:	f004 fa83 	bl	8005d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001852:	f7ff fda7 	bl	80013a4 <main>
  bx  lr    
 8001856:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001858:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001864:	0800abfc 	.word	0x0800abfc
  ldr r2, =_sbss
 8001868:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800186c:	2000425c 	.word	0x2000425c

08001870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC_IRQHandler>
	...

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_Init+0x40>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_Init+0x40>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_Init+0x40>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f92b 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 f808 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fe00 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_InitTick+0x54>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x58>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f943 	bl	8001b62 <HAL_SYSTICK_Config>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00e      	b.n	8001904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d80a      	bhi.n	8001902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ec:	2200      	movs	r2, #0
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f000 f90b 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <HAL_InitTick+0x5c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e000      	b.n	8001904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000000 	.word	0x20000000
 8001910:	20000008 	.word	0x20000008
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008
 800193c:	200004f4 	.word	0x200004f4

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200004f4 	.word	0x200004f4

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff feda 	bl	8001940 <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d008      	beq.n	8001bac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e052      	b.n	8001c52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0216 	bic.w	r2, r2, #22
 8001bba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <HAL_DMA_Abort+0x62>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0208 	bic.w	r2, r2, #8
 8001bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfc:	e013      	b.n	8001c26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfe:	f7ff fe9f 	bl	8001940 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d90c      	bls.n	8001c26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2203      	movs	r2, #3
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e015      	b.n	8001c52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e4      	bne.n	8001bfe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	223f      	movs	r2, #63	; 0x3f
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d004      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e00c      	b.n	8001c92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2205      	movs	r2, #5
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e159      	b.n	8001f70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f040 8148 	bne.w	8001f6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d005      	beq.n	8001cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d130      	bne.n	8001d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 0201 	and.w	r2, r3, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d017      	beq.n	8001d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d123      	bne.n	8001de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a2 	beq.w	8001f6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a56      	ldr	r2, [pc, #344]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e42:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_GPIO_Init+0x2ec>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x202>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_GPIO_Init+0x2f4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x1fe>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a47      	ldr	r2, [pc, #284]	; (8001f98 <HAL_GPIO_Init+0x2f8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a46      	ldr	r2, [pc, #280]	; (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x1f6>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a45      	ldr	r2, [pc, #276]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x1f2>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e008      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e92:	2307      	movs	r3, #7
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e004      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f002 0203 	and.w	r2, r2, #3
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4093      	lsls	r3, r2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb4:	4935      	ldr	r1, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x2ec>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	f67f aea2 	bls.w	8001cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40013c00 	.word	0x40013c00

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e12b      	b.n	8002246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff f986 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2224      	movs	r2, #36	; 0x24
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002040:	f001 fbe0 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a81      	ldr	r2, [pc, #516]	; (8002250 <HAL_I2C_Init+0x274>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d807      	bhi.n	8002060 <HAL_I2C_Init+0x84>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a80      	ldr	r2, [pc, #512]	; (8002254 <HAL_I2C_Init+0x278>)
 8002054:	4293      	cmp	r3, r2
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e006      	b.n	800206e <HAL_I2C_Init+0x92>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a7d      	ldr	r2, [pc, #500]	; (8002258 <HAL_I2C_Init+0x27c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	bf94      	ite	ls
 8002068:	2301      	movls	r3, #1
 800206a:	2300      	movhi	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0e7      	b.n	8002246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a78      	ldr	r2, [pc, #480]	; (800225c <HAL_I2C_Init+0x280>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a6a      	ldr	r2, [pc, #424]	; (8002250 <HAL_I2C_Init+0x274>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d802      	bhi.n	80020b0 <HAL_I2C_Init+0xd4>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3301      	adds	r3, #1
 80020ae:	e009      	b.n	80020c4 <HAL_I2C_Init+0xe8>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	4a69      	ldr	r2, [pc, #420]	; (8002260 <HAL_I2C_Init+0x284>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	3301      	adds	r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	495c      	ldr	r1, [pc, #368]	; (8002250 <HAL_I2C_Init+0x274>)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d819      	bhi.n	8002118 <HAL_I2C_Init+0x13c>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e59      	subs	r1, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f2:	1c59      	adds	r1, r3, #1
 80020f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020f8:	400b      	ands	r3, r1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_I2C_Init+0x138>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e59      	subs	r1, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fbb1 f3f3 	udiv	r3, r1, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	e051      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002114:	2304      	movs	r3, #4
 8002116:	e04f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <HAL_I2C_Init+0x168>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e012      	b.n	800216a <HAL_I2C_Init+0x18e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	0099      	lsls	r1, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x196>
 800216e:	2301      	movs	r3, #1
 8002170:	e022      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <HAL_I2C_Init+0x1bc>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e58      	subs	r0, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	440b      	add	r3, r1
 8002188:	fbb0 f3f3 	udiv	r3, r0, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002196:	e00f      	b.n	80021b8 <HAL_I2C_Init+0x1dc>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6809      	ldr	r1, [r1, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6911      	ldr	r1, [r2, #16]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68d2      	ldr	r2, [r2, #12]
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	000186a0 	.word	0x000186a0
 8002254:	001e847f 	.word	0x001e847f
 8002258:	003d08ff 	.word	0x003d08ff
 800225c:	431bde83 	.word	0x431bde83
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	461a      	mov	r2, r3
 8002270:	460b      	mov	r3, r1
 8002272:	817b      	strh	r3, [r7, #10]
 8002274:	4613      	mov	r3, r2
 8002276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff fb62 	bl	8001940 <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	f040 80e0 	bne.w	800244c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2319      	movs	r3, #25
 8002292:	2201      	movs	r2, #1
 8002294:	4970      	ldr	r1, [pc, #448]	; (8002458 <HAL_I2C_Master_Transmit+0x1f4>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fc66 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0d3      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2C_Master_Transmit+0x50>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0cc      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d007      	beq.n	80022da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2221      	movs	r2, #33	; 0x21
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2210      	movs	r2, #16
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a50      	ldr	r2, [pc, #320]	; (800245c <HAL_I2C_Master_Transmit+0x1f8>)
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800231c:	8979      	ldrh	r1, [r7, #10]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fad0 	bl	80028c8 <I2C_MasterRequestWrite>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e08d      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002348:	e066      	b.n	8002418 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	6a39      	ldr	r1, [r7, #32]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fce0 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b04      	cmp	r3, #4
 8002360:	d107      	bne.n	8002372 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06b      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11b      	bne.n	80023ec <HAL_I2C_Master_Transmit+0x188>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d017      	beq.n	80023ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	6a39      	ldr	r1, [r7, #32]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fcd0 	bl	8002d96 <I2C_WaitOnBTFFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e01a      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d194      	bne.n	800234a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	00100002 	.word	0x00100002
 800245c:	ffff0000 	.word	0xffff0000

08002460 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	461a      	mov	r2, r3
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
 8002470:	4613      	mov	r3, r2
 8002472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff fa64 	bl	8001940 <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	f040 820b 	bne.w	800289e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2319      	movs	r3, #25
 800248e:	2201      	movs	r2, #1
 8002490:	497c      	ldr	r1, [pc, #496]	; (8002684 <HAL_I2C_Master_Receive+0x224>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fb68 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	e1fe      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2C_Master_Receive+0x50>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e1f7      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d007      	beq.n	80024d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2222      	movs	r2, #34	; 0x22
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2210      	movs	r2, #16
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	893a      	ldrh	r2, [r7, #8]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a5c      	ldr	r2, [pc, #368]	; (8002688 <HAL_I2C_Master_Receive+0x228>)
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa54 	bl	80029cc <I2C_MasterRequestRead>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1b8      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d113      	bne.n	800255e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	623b      	str	r3, [r7, #32]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e18c      	b.n	8002878 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	2b01      	cmp	r3, #1
 8002564:	d11b      	bne.n	800259e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e16c      	b.n	8002878 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d11b      	bne.n	80025de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	e14c      	b.n	8002878 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002604:	e138      	b.n	8002878 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	2b03      	cmp	r3, #3
 800260c:	f200 80f1 	bhi.w	80027f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b01      	cmp	r3, #1
 8002616:	d123      	bne.n	8002660 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fbfb 	bl	8002e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e139      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800265e:	e10b      	b.n	8002878 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	2b02      	cmp	r3, #2
 8002666:	d14e      	bne.n	8002706 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	2200      	movs	r2, #0
 8002670:	4906      	ldr	r1, [pc, #24]	; (800268c <HAL_I2C_Master_Receive+0x22c>)
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fa78 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e10e      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
 8002682:	bf00      	nop
 8002684:	00100002 	.word	0x00100002
 8002688:	ffff0000 	.word	0xffff0000
 800268c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002704:	e0b8      	b.n	8002878 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	2200      	movs	r2, #0
 800270e:	4966      	ldr	r1, [pc, #408]	; (80028a8 <HAL_I2C_Master_Receive+0x448>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fa29 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0bf      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	2200      	movs	r2, #0
 800276a:	494f      	ldr	r1, [pc, #316]	; (80028a8 <HAL_I2C_Master_Receive+0x448>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f9fb 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e091      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027f0:	e042      	b.n	8002878 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fb0e 	bl	8002e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e04c      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d118      	bne.n	8002878 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f aec2 	bne.w	8002606 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	00010004 	.word	0x00010004

080028ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	b2db      	uxtb	r3, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d006      	beq.n	80028f2 <I2C_MasterRequestWrite+0x2a>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d003      	beq.n	80028f2 <I2C_MasterRequestWrite+0x2a>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f0:	d108      	bne.n	8002904 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e00b      	b.n	800291c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	2b12      	cmp	r3, #18
 800290a:	d107      	bne.n	800291c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f91d 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002942:	d103      	bne.n	800294c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e035      	b.n	80029bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002958:	d108      	bne.n	800296c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002968:	611a      	str	r2, [r3, #16]
 800296a:	e01b      	b.n	80029a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800296c:	897b      	ldrh	r3, [r7, #10]
 800296e:	11db      	asrs	r3, r3, #7
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0306 	and.w	r3, r3, #6
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f063 030f 	orn	r3, r3, #15
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	490e      	ldr	r1, [pc, #56]	; (80029c4 <I2C_MasterRequestWrite+0xfc>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f943 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e010      	b.n	80029bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800299a:	897b      	ldrh	r3, [r7, #10]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <I2C_MasterRequestWrite+0x100>)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f933 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	00010008 	.word	0x00010008
 80029c8:	00010002 	.word	0x00010002

080029cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d006      	beq.n	8002a06 <I2C_MasterRequestRead+0x3a>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d003      	beq.n	8002a06 <I2C_MasterRequestRead+0x3a>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a04:	d108      	bne.n	8002a18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e00b      	b.n	8002a30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	2b11      	cmp	r3, #17
 8002a1e:	d107      	bne.n	8002a30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f893 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a56:	d103      	bne.n	8002a60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e079      	b.n	8002b58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a6c:	d108      	bne.n	8002a80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]
 8002a7e:	e05f      	b.n	8002b40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	11db      	asrs	r3, r3, #7
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 0306 	and.w	r3, r3, #6
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f063 030f 	orn	r3, r3, #15
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4930      	ldr	r1, [pc, #192]	; (8002b60 <I2C_MasterRequestRead+0x194>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8b9 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e054      	b.n	8002b58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4929      	ldr	r1, [pc, #164]	; (8002b64 <I2C_MasterRequestRead+0x198>)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f8a9 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e044      	b.n	8002b58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f831 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1a:	d103      	bne.n	8002b24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e017      	b.n	8002b58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b28:	897b      	ldrh	r3, [r7, #10]
 8002b2a:	11db      	asrs	r3, r3, #7
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0306 	and.w	r3, r3, #6
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f063 030e 	orn	r3, r3, #14
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <I2C_MasterRequestRead+0x198>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f865 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	00010008 	.word	0x00010008
 8002b64:	00010002 	.word	0x00010002

08002b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b78:	e025      	b.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d021      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b82:	f7fe fedd 	bl	8001940 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d116      	bne.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0220 	orr.w	r2, r3, #32
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e023      	b.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10d      	bne.n	8002bec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	e00c      	b.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2301      	moveq	r3, #1
 8002c00:	2300      	movne	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d0b6      	beq.n	8002b7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c24:	e051      	b.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c34:	d123      	bne.n	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e046      	b.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d021      	beq.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fe5b 	bl	8001940 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d116      	bne.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e020      	b.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10c      	bne.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e00b      	b.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d18d      	bne.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d20:	e02d      	b.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f8ce 	bl	8002ec4 <I2C_IsAcknowledgeFailed>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e02d      	b.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d021      	beq.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	f7fe fe01 	bl	8001940 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d302      	bcc.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d1ca      	bne.n	8002d22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da2:	e02d      	b.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f88d 	bl	8002ec4 <I2C_IsAcknowledgeFailed>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e02d      	b.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d021      	beq.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbc:	f7fe fdc0 	bl	8001940 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e007      	b.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d1ca      	bne.n	8002da4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e24:	e042      	b.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d119      	bne.n	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0210 	mvn.w	r2, #16
 8002e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e029      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e68:	f7fe fd6a 	bl	8001940 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d302      	bcc.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d1b5      	bne.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d11b      	bne.n	8002f14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ee4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e267      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d075      	beq.n	800302e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d112      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4b82      	ldr	r3, [pc, #520]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05b      	beq.n	800302c <HAL_RCC_OscConfig+0x108>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d157      	bne.n	800302c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e242      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x74>
 8002f8a:	4b76      	ldr	r3, [pc, #472]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a75      	ldr	r2, [pc, #468]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b70      	ldr	r3, [pc, #448]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6f      	ldr	r2, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6c      	ldr	r2, [pc, #432]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002fbc:	4b69      	ldr	r3, [pc, #420]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a68      	ldr	r2, [pc, #416]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b66      	ldr	r3, [pc, #408]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a65      	ldr	r2, [pc, #404]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fcb0 	bl	8001940 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fcac 	bl	8001940 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e207      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xc0>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fc9c 	bl	8001940 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe fc98 	bl	8001940 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1f3      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b51      	ldr	r3, [pc, #324]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0xe8>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003052:	4b44      	ldr	r3, [pc, #272]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1c7      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4937      	ldr	r1, [pc, #220]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b34      	ldr	r3, [pc, #208]	; (8003168 <HAL_RCC_OscConfig+0x244>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fc51 	bl	8001940 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fc4d 	bl	8001940 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1a8      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4925      	ldr	r1, [pc, #148]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x244>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fc30 	bl	8001940 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe fc2c 	bl	8001940 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e187      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d036      	beq.n	800317c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCC_OscConfig+0x248>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe fc10 	bl	8001940 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe fc0c 	bl	8001940 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e167      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_OscConfig+0x240>)
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x200>
 8003142:	e01b      	b.n	800317c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCC_OscConfig+0x248>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe fbf9 	bl	8001940 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	e00e      	b.n	8003170 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003152:	f7fe fbf5 	bl	8001940 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d907      	bls.n	8003170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e150      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
 8003164:	40023800 	.word	0x40023800
 8003168:	42470000 	.word	0x42470000
 800316c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ea      	bne.n	8003152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8097 	beq.w	80032b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	4b7d      	ldr	r3, [pc, #500]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a7c      	ldr	r2, [pc, #496]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b7a      	ldr	r3, [pc, #488]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b77      	ldr	r3, [pc, #476]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b74      	ldr	r3, [pc, #464]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a73      	ldr	r2, [pc, #460]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fbb5 	bl	8001940 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fe fbb1 	bl	8001940 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e10c      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x474>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x2ea>
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a63      	ldr	r2, [pc, #396]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	e01c      	b.n	8003248 <HAL_RCC_OscConfig+0x324>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x30c>
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a5e      	ldr	r2, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
 8003222:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a5b      	ldr	r2, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	e00b      	b.n	8003248 <HAL_RCC_OscConfig+0x324>
 8003230:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6713      	str	r3, [r2, #112]	; 0x70
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a54      	ldr	r2, [pc, #336]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003242:	f023 0304 	bic.w	r3, r3, #4
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d015      	beq.n	800327c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe fb76 	bl	8001940 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	e00a      	b.n	800326e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fe fb72 	bl	8001940 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0cb      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ee      	beq.n	8003258 <HAL_RCC_OscConfig+0x334>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327c:	f7fe fb60 	bl	8001940 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe fb5c 	bl	8001940 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0b5      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	4b3e      	ldr	r3, [pc, #248]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1ee      	bne.n	8003284 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	4a38      	ldr	r2, [pc, #224]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80a1 	beq.w	8003404 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d05c      	beq.n	8003388 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d141      	bne.n	800335a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <HAL_RCC_OscConfig+0x478>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fb30 	bl	8001940 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe fb2c 	bl	8001940 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e087      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x478>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fb05 	bl	8001940 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333a:	f7fe fb01 	bl	8001940 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e05c      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x416>
 8003358:	e054      	b.n	8003404 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x478>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe faee 	bl	8001940 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe faea 	bl	8001940 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e045      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_OscConfig+0x470>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x444>
 8003386:	e03d      	b.n	8003404 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e038      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
 800339c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x4ec>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d028      	beq.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d121      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d11a      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d8:	4293      	cmp	r3, r2
 80033da:	d111      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	3b01      	subs	r3, #1
 80033ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0cc      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b68      	ldr	r3, [pc, #416]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d90c      	bls.n	8003450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b65      	ldr	r3, [pc, #404]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800348a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d044      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d119      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e067      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4934      	ldr	r1, [pc, #208]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fe fa1c 	bl	8001940 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe fa18 	bl	8001940 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e04f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d20c      	bcs.n	800355c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f821 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe f97c 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023c00 	.word	0x40023c00
 80035d0:	40023800 	.word	0x40023800
 80035d4:	0800a724 	.word	0x0800a724
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b094      	sub	sp, #80	; 0x50
 80035e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	647b      	str	r3, [r7, #68]	; 0x44
 80035ec:	2300      	movs	r3, #0
 80035ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035f0:	2300      	movs	r3, #0
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f8:	4b79      	ldr	r3, [pc, #484]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d00d      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x40>
 8003604:	2b08      	cmp	r3, #8
 8003606:	f200 80e1 	bhi.w	80037cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x34>
 800360e:	2b04      	cmp	r3, #4
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x3a>
 8003612:	e0db      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b73      	ldr	r3, [pc, #460]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003618:	e0db      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b73      	ldr	r3, [pc, #460]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800361c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800361e:	e0d8      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003628:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362a:	4b6d      	ldr	r3, [pc, #436]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d063      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	2200      	movs	r2, #0
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003640:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
 800364a:	2300      	movs	r3, #0
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003652:	4622      	mov	r2, r4
 8003654:	462b      	mov	r3, r5
 8003656:	f04f 0000 	mov.w	r0, #0
 800365a:	f04f 0100 	mov.w	r1, #0
 800365e:	0159      	lsls	r1, r3, #5
 8003660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003664:	0150      	lsls	r0, r2, #5
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4621      	mov	r1, r4
 800366c:	1a51      	subs	r1, r2, r1
 800366e:	6139      	str	r1, [r7, #16]
 8003670:	4629      	mov	r1, r5
 8003672:	eb63 0301 	sbc.w	r3, r3, r1
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003684:	4659      	mov	r1, fp
 8003686:	018b      	lsls	r3, r1, #6
 8003688:	4651      	mov	r1, sl
 800368a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368e:	4651      	mov	r1, sl
 8003690:	018a      	lsls	r2, r1, #6
 8003692:	4651      	mov	r1, sl
 8003694:	ebb2 0801 	subs.w	r8, r2, r1
 8003698:	4659      	mov	r1, fp
 800369a:	eb63 0901 	sbc.w	r9, r3, r1
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036b2:	4690      	mov	r8, r2
 80036b4:	4699      	mov	r9, r3
 80036b6:	4623      	mov	r3, r4
 80036b8:	eb18 0303 	adds.w	r3, r8, r3
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	462b      	mov	r3, r5
 80036c0:	eb49 0303 	adc.w	r3, r9, r3
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036d2:	4629      	mov	r1, r5
 80036d4:	024b      	lsls	r3, r1, #9
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036dc:	4621      	mov	r1, r4
 80036de:	024a      	lsls	r2, r1, #9
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e6:	2200      	movs	r2, #0
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f0:	f7fd fad2 	bl	8000c98 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	e058      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	2200      	movs	r2, #0
 8003706:	4618      	mov	r0, r3
 8003708:	4611      	mov	r1, r2
 800370a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
 8003714:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	f04f 0000 	mov.w	r0, #0
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	0159      	lsls	r1, r3, #5
 8003726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372a:	0150      	lsls	r0, r2, #5
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4641      	mov	r1, r8
 8003732:	ebb2 0a01 	subs.w	sl, r2, r1
 8003736:	4649      	mov	r1, r9
 8003738:	eb63 0b01 	sbc.w	fp, r3, r1
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003748:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800374c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003750:	ebb2 040a 	subs.w	r4, r2, sl
 8003754:	eb63 050b 	sbc.w	r5, r3, fp
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	00eb      	lsls	r3, r5, #3
 8003762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003766:	00e2      	lsls	r2, r4, #3
 8003768:	4614      	mov	r4, r2
 800376a:	461d      	mov	r5, r3
 800376c:	4643      	mov	r3, r8
 800376e:	18e3      	adds	r3, r4, r3
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	464b      	mov	r3, r9
 8003774:	eb45 0303 	adc.w	r3, r5, r3
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003786:	4629      	mov	r1, r5
 8003788:	028b      	lsls	r3, r1, #10
 800378a:	4621      	mov	r1, r4
 800378c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003790:	4621      	mov	r1, r4
 8003792:	028a      	lsls	r2, r1, #10
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379a:	2200      	movs	r2, #0
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	61fa      	str	r2, [r7, #28]
 80037a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a4:	f7fd fa78 	bl	8000c98 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4613      	mov	r3, r2
 80037ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3750      	adds	r7, #80	; 0x50
 80037d8:	46bd      	mov	sp, r7
 80037da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000000 	.word	0x20000000

08003804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003808:	f7ff fff0 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 800380c:	4602      	mov	r2, r0
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	0a9b      	lsrs	r3, r3, #10
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	4903      	ldr	r1, [pc, #12]	; (8003828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	0800a734 	.word	0x0800a734

0800382c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003830:	f7ff ffdc 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0b5b      	lsrs	r3, r3, #13
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40023800 	.word	0x40023800
 8003850:	0800a734 	.word	0x0800a734

08003854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e03f      	b.n	80038e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd ff80 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fd7b 	bl	8004394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b08a      	sub	sp, #40	; 0x28
 80038f2:	af02      	add	r7, sp, #8
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b20      	cmp	r3, #32
 800390c:	d17c      	bne.n	8003a08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_UART_Transmit+0x2c>
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e075      	b.n	8003a0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_UART_Transmit+0x3e>
 8003928:	2302      	movs	r3, #2
 800392a:	e06e      	b.n	8003a0a <HAL_UART_Transmit+0x11c>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2221      	movs	r2, #33	; 0x21
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003942:	f7fd fffd 	bl	8001940 <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	88fa      	ldrh	r2, [r7, #6]
 8003952:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d108      	bne.n	8003970 <HAL_UART_Transmit+0x82>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	e003      	b.n	8003978 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003980:	e02a      	b.n	80039d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 faf9 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e036      	b.n	8003a0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3302      	adds	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e007      	b.n	80039ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	3301      	adds	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1cf      	bne.n	8003982 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2140      	movs	r1, #64	; 0x40
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fac9 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e006      	b.n	8003a0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0ba      	sub	sp, #232	; 0xe8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_UART_IRQHandler+0x66>
 8003a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fbd3 	bl	800421e <UART_Receive_IT>
      return;
 8003a78:	e256      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80de 	beq.w	8003c40 <HAL_UART_IRQHandler+0x22c>
 8003a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80d1 	beq.w	8003c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xae>
 8003aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xd2>
 8003ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f043 0202 	orr.w	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_UART_IRQHandler+0xf6>
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d011      	beq.n	8003b3a <HAL_UART_IRQHandler+0x126>
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0208 	orr.w	r2, r3, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 81ed 	beq.w	8003f1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_UART_IRQHandler+0x14e>
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fb5e 	bl	800421e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <HAL_UART_IRQHandler+0x17a>
 8003b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d04f      	beq.n	8003c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fa66 	bl	8004060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d141      	bne.n	8003c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3314      	adds	r3, #20
 8003ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3314      	adds	r3, #20
 8003bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1d9      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d013      	beq.n	8003c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	4a7d      	ldr	r2, [pc, #500]	; (8003df0 <HAL_UART_IRQHandler+0x3dc>)
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe f829 	bl	8001c5a <HAL_DMA_Abort_IT>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	e00e      	b.n	8003c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f99a 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	e00a      	b.n	8003c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f996 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e006      	b.n	8003c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f992 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c3a:	e170      	b.n	8003f1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	bf00      	nop
    return;
 8003c3e:	e16e      	b.n	8003f1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f040 814a 	bne.w	8003ede <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8143 	beq.w	8003ede <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 813c 	beq.w	8003ede <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	f040 80b4 	bne.w	8003df4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8140 	beq.w	8003f22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003caa:	429a      	cmp	r2, r3
 8003cac:	f080 8139 	bcs.w	8003f22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc2:	f000 8088 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1d9      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e1      	bne.n	8003d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e3      	bne.n	8003d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e3      	bne.n	8003d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fed2 	bl	8001b7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8c0 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dec:	e099      	b.n	8003f22 <HAL_UART_IRQHandler+0x50e>
 8003dee:	bf00      	nop
 8003df0:	08004127 	.word	0x08004127
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 808b 	beq.w	8003f26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8086 	beq.w	8003f26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e3      	bne.n	8003e1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	623b      	str	r3, [r7, #32]
   return(result);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e76:	633a      	str	r2, [r7, #48]	; 0x30
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e3      	bne.n	8003e52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e3      	bne.n	8003e98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f848 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003edc:	e023      	b.n	8003f26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_UART_IRQHandler+0x4ea>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f929 	bl	800414e <UART_Transmit_IT>
    return;
 8003efc:	e014      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00e      	beq.n	8003f28 <HAL_UART_IRQHandler+0x514>
 8003f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f969 	bl	80041ee <UART_EndTransmit_IT>
    return;
 8003f1c:	e004      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
    return;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
      return;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_UART_IRQHandler+0x514>
      return;
 8003f26:	bf00      	nop
  }
}
 8003f28:	37e8      	adds	r7, #232	; 0xe8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop

08003f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b090      	sub	sp, #64	; 0x40
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	e050      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d04c      	beq.n	8004038 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa4:	f7fd fccc 	bl	8001940 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d241      	bcs.n	8004038 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fd4:	637a      	str	r2, [r7, #52]	; 0x34
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004008:	623a      	str	r2, [r7, #32]
 800400a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	61bb      	str	r3, [r7, #24]
   return(result);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e00f      	b.n	8004058 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	429a      	cmp	r2, r3
 8004054:	d09f      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3740      	adds	r7, #64	; 0x40
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b095      	sub	sp, #84	; 0x54
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	e853 3f00 	ldrex	r3, [r3]
 8004076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004088:	643a      	str	r2, [r7, #64]	; 0x40
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800408e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d119      	bne.n	800410c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	647b      	str	r3, [r7, #68]	; 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f8:	61ba      	str	r2, [r7, #24]
 80040fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	613b      	str	r3, [r7, #16]
   return(result);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
}
 800411a:	bf00      	nop
 800411c:	3754      	adds	r7, #84	; 0x54
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff ff09 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b21      	cmp	r3, #33	; 0x21
 8004160:	d13e      	bne.n	80041e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d114      	bne.n	8004196 <UART_Transmit_IT+0x48>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d110      	bne.n	8004196 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004188:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	621a      	str	r2, [r3, #32]
 8004194:	e008      	b.n	80041a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6211      	str	r1, [r2, #32]
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4619      	mov	r1, r3
 80041b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10f      	bne.n	80041dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fe8e 	bl	8003f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b08c      	sub	sp, #48	; 0x30
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b22      	cmp	r3, #34	; 0x22
 8004230:	f040 80ab 	bne.w	800438a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d117      	bne.n	800426e <UART_Receive_IT+0x50>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b29b      	uxth	r3, r3
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	b29a      	uxth	r2, r3
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
 800426c:	e026      	b.n	80042bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d007      	beq.n	8004292 <UART_Receive_IT+0x74>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <UART_Receive_IT+0x82>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e008      	b.n	80042b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4619      	mov	r1, r3
 80042ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d15a      	bne.n	8004386 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0220 	bic.w	r2, r2, #32
 80042de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	2b01      	cmp	r3, #1
 800430e:	d135      	bne.n	800437c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	613b      	str	r3, [r7, #16]
   return(result);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f023 0310 	bic.w	r3, r3, #16
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	623a      	str	r2, [r7, #32]
 8004338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	61bb      	str	r3, [r7, #24]
   return(result);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d10a      	bne.n	800436e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fdf9 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
 800437a:	e002      	b.n	8004382 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff fde1 	bl	8003f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e002      	b.n	800438c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3730      	adds	r7, #48	; 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004398:	b0c0      	sub	sp, #256	; 0x100
 800439a:	af00      	add	r7, sp, #0
 800439c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	68d9      	ldr	r1, [r3, #12]
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	ea40 0301 	orr.w	r3, r0, r1
 80043bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043ec:	f021 010c 	bic.w	r1, r1, #12
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043fa:	430b      	orrs	r3, r1
 80043fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	6999      	ldr	r1, [r3, #24]
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	ea40 0301 	orr.w	r3, r0, r1
 800441a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b8f      	ldr	r3, [pc, #572]	; (8004660 <UART_SetConfig+0x2cc>)
 8004424:	429a      	cmp	r2, r3
 8004426:	d005      	beq.n	8004434 <UART_SetConfig+0xa0>
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b8d      	ldr	r3, [pc, #564]	; (8004664 <UART_SetConfig+0x2d0>)
 8004430:	429a      	cmp	r2, r3
 8004432:	d104      	bne.n	800443e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7ff f9fa 	bl	800382c <HAL_RCC_GetPCLK2Freq>
 8004438:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800443c:	e003      	b.n	8004446 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800443e:	f7ff f9e1 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004442:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004450:	f040 810c 	bne.w	800466c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800445e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004462:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	1891      	adds	r1, r2, r2
 800446c:	65b9      	str	r1, [r7, #88]	; 0x58
 800446e:	415b      	adcs	r3, r3
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004472:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004476:	4621      	mov	r1, r4
 8004478:	eb12 0801 	adds.w	r8, r2, r1
 800447c:	4629      	mov	r1, r5
 800447e:	eb43 0901 	adc.w	r9, r3, r1
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004496:	4690      	mov	r8, r2
 8004498:	4699      	mov	r9, r3
 800449a:	4623      	mov	r3, r4
 800449c:	eb18 0303 	adds.w	r3, r8, r3
 80044a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044a4:	462b      	mov	r3, r5
 80044a6:	eb49 0303 	adc.w	r3, r9, r3
 80044aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044c2:	460b      	mov	r3, r1
 80044c4:	18db      	adds	r3, r3, r3
 80044c6:	653b      	str	r3, [r7, #80]	; 0x50
 80044c8:	4613      	mov	r3, r2
 80044ca:	eb42 0303 	adc.w	r3, r2, r3
 80044ce:	657b      	str	r3, [r7, #84]	; 0x54
 80044d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044d8:	f7fc fbde 	bl	8000c98 <__aeabi_uldivmod>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4b61      	ldr	r3, [pc, #388]	; (8004668 <UART_SetConfig+0x2d4>)
 80044e2:	fba3 2302 	umull	r2, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	011c      	lsls	r4, r3, #4
 80044ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	1891      	adds	r1, r2, r2
 8004502:	64b9      	str	r1, [r7, #72]	; 0x48
 8004504:	415b      	adcs	r3, r3
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800450c:	4641      	mov	r1, r8
 800450e:	eb12 0a01 	adds.w	sl, r2, r1
 8004512:	4649      	mov	r1, r9
 8004514:	eb43 0b01 	adc.w	fp, r3, r1
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004524:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800452c:	4692      	mov	sl, r2
 800452e:	469b      	mov	fp, r3
 8004530:	4643      	mov	r3, r8
 8004532:	eb1a 0303 	adds.w	r3, sl, r3
 8004536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800453a:	464b      	mov	r3, r9
 800453c:	eb4b 0303 	adc.w	r3, fp, r3
 8004540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004550:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004554:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004558:	460b      	mov	r3, r1
 800455a:	18db      	adds	r3, r3, r3
 800455c:	643b      	str	r3, [r7, #64]	; 0x40
 800455e:	4613      	mov	r3, r2
 8004560:	eb42 0303 	adc.w	r3, r2, r3
 8004564:	647b      	str	r3, [r7, #68]	; 0x44
 8004566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800456a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800456e:	f7fc fb93 	bl	8000c98 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4611      	mov	r1, r2
 8004578:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <UART_SetConfig+0x2d4>)
 800457a:	fba3 2301 	umull	r2, r3, r3, r1
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2264      	movs	r2, #100	; 0x64
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	1acb      	subs	r3, r1, r3
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <UART_SetConfig+0x2d4>)
 8004590:	fba3 2302 	umull	r2, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800459c:	441c      	add	r4, r3
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045b8:	415b      	adcs	r3, r3
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045c0:	4641      	mov	r1, r8
 80045c2:	1851      	adds	r1, r2, r1
 80045c4:	6339      	str	r1, [r7, #48]	; 0x30
 80045c6:	4649      	mov	r1, r9
 80045c8:	414b      	adcs	r3, r1
 80045ca:	637b      	str	r3, [r7, #52]	; 0x34
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045d8:	4659      	mov	r1, fp
 80045da:	00cb      	lsls	r3, r1, #3
 80045dc:	4651      	mov	r1, sl
 80045de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e2:	4651      	mov	r1, sl
 80045e4:	00ca      	lsls	r2, r1, #3
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	4642      	mov	r2, r8
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f4:	464b      	mov	r3, r9
 80045f6:	460a      	mov	r2, r1
 80045f8:	eb42 0303 	adc.w	r3, r2, r3
 80045fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800460c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004610:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004614:	460b      	mov	r3, r1
 8004616:	18db      	adds	r3, r3, r3
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
 800461a:	4613      	mov	r3, r2
 800461c:	eb42 0303 	adc.w	r3, r2, r3
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004626:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800462a:	f7fc fb35 	bl	8000c98 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <UART_SetConfig+0x2d4>)
 8004634:	fba3 1302 	umull	r1, r3, r3, r2
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	2164      	movs	r1, #100	; 0x64
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	3332      	adds	r3, #50	; 0x32
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <UART_SetConfig+0x2d4>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	f003 0207 	and.w	r2, r3, #7
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4422      	add	r2, r4
 800465a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800465c:	e105      	b.n	800486a <UART_SetConfig+0x4d6>
 800465e:	bf00      	nop
 8004660:	40011000 	.word	0x40011000
 8004664:	40011400 	.word	0x40011400
 8004668:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800466c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004676:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800467a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800467e:	4642      	mov	r2, r8
 8004680:	464b      	mov	r3, r9
 8004682:	1891      	adds	r1, r2, r2
 8004684:	6239      	str	r1, [r7, #32]
 8004686:	415b      	adcs	r3, r3
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
 800468a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800468e:	4641      	mov	r1, r8
 8004690:	1854      	adds	r4, r2, r1
 8004692:	4649      	mov	r1, r9
 8004694:	eb43 0501 	adc.w	r5, r3, r1
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	00eb      	lsls	r3, r5, #3
 80046a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a6:	00e2      	lsls	r2, r4, #3
 80046a8:	4614      	mov	r4, r2
 80046aa:	461d      	mov	r5, r3
 80046ac:	4643      	mov	r3, r8
 80046ae:	18e3      	adds	r3, r4, r3
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046b4:	464b      	mov	r3, r9
 80046b6:	eb45 0303 	adc.w	r3, r5, r3
 80046ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046da:	4629      	mov	r1, r5
 80046dc:	008b      	lsls	r3, r1, #2
 80046de:	4621      	mov	r1, r4
 80046e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e4:	4621      	mov	r1, r4
 80046e6:	008a      	lsls	r2, r1, #2
 80046e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046ec:	f7fc fad4 	bl	8000c98 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4b60      	ldr	r3, [pc, #384]	; (8004878 <UART_SetConfig+0x4e4>)
 80046f6:	fba3 2302 	umull	r2, r3, r3, r2
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	011c      	lsls	r4, r3, #4
 80046fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004708:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800470c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	1891      	adds	r1, r2, r2
 8004716:	61b9      	str	r1, [r7, #24]
 8004718:	415b      	adcs	r3, r3
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004720:	4641      	mov	r1, r8
 8004722:	1851      	adds	r1, r2, r1
 8004724:	6139      	str	r1, [r7, #16]
 8004726:	4649      	mov	r1, r9
 8004728:	414b      	adcs	r3, r1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004738:	4659      	mov	r1, fp
 800473a:	00cb      	lsls	r3, r1, #3
 800473c:	4651      	mov	r1, sl
 800473e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004742:	4651      	mov	r1, sl
 8004744:	00ca      	lsls	r2, r1, #3
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	4603      	mov	r3, r0
 800474c:	4642      	mov	r2, r8
 800474e:	189b      	adds	r3, r3, r2
 8004750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004754:	464b      	mov	r3, r9
 8004756:	460a      	mov	r2, r1
 8004758:	eb42 0303 	adc.w	r3, r2, r3
 800475c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	67bb      	str	r3, [r7, #120]	; 0x78
 800476a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004778:	4649      	mov	r1, r9
 800477a:	008b      	lsls	r3, r1, #2
 800477c:	4641      	mov	r1, r8
 800477e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004782:	4641      	mov	r1, r8
 8004784:	008a      	lsls	r2, r1, #2
 8004786:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800478a:	f7fc fa85 	bl	8000c98 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b39      	ldr	r3, [pc, #228]	; (8004878 <UART_SetConfig+0x4e4>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	; 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	4a34      	ldr	r2, [pc, #208]	; (8004878 <UART_SetConfig+0x4e4>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b2:	441c      	add	r4, r3
 80047b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b8:	2200      	movs	r2, #0
 80047ba:	673b      	str	r3, [r7, #112]	; 0x70
 80047bc:	677a      	str	r2, [r7, #116]	; 0x74
 80047be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	415b      	adcs	r3, r3
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d2:	4641      	mov	r1, r8
 80047d4:	1851      	adds	r1, r2, r1
 80047d6:	6039      	str	r1, [r7, #0]
 80047d8:	4649      	mov	r1, r9
 80047da:	414b      	adcs	r3, r1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047ea:	4659      	mov	r1, fp
 80047ec:	00cb      	lsls	r3, r1, #3
 80047ee:	4651      	mov	r1, sl
 80047f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f4:	4651      	mov	r1, sl
 80047f6:	00ca      	lsls	r2, r1, #3
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	4642      	mov	r2, r8
 8004800:	189b      	adds	r3, r3, r2
 8004802:	66bb      	str	r3, [r7, #104]	; 0x68
 8004804:	464b      	mov	r3, r9
 8004806:	460a      	mov	r2, r1
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	663b      	str	r3, [r7, #96]	; 0x60
 8004818:	667a      	str	r2, [r7, #100]	; 0x64
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004826:	4649      	mov	r1, r9
 8004828:	008b      	lsls	r3, r1, #2
 800482a:	4641      	mov	r1, r8
 800482c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004830:	4641      	mov	r1, r8
 8004832:	008a      	lsls	r2, r1, #2
 8004834:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004838:	f7fc fa2e 	bl	8000c98 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <UART_SetConfig+0x4e4>)
 8004842:	fba3 1302 	umull	r1, r3, r3, r2
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	2164      	movs	r1, #100	; 0x64
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	3332      	adds	r3, #50	; 0x32
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <UART_SetConfig+0x4e4>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	f003 020f 	and.w	r2, r3, #15
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4422      	add	r2, r4
 8004868:	609a      	str	r2, [r3, #8]
}
 800486a:	bf00      	nop
 800486c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004876:	bf00      	nop
 8004878:	51eb851f 	.word	0x51eb851f

0800487c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800488a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800488e:	2b84      	cmp	r3, #132	; 0x84
 8004890:	d005      	beq.n	800489e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004892:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	3303      	adds	r3, #3
 800489c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800489e:	68fb      	ldr	r3, [r7, #12]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80048b0:	f000 fade 	bl	8004e70 <vTaskStartScheduler>
  
  return osOK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	bd80      	pop	{r7, pc}

080048ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80048ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048bc:	b089      	sub	sp, #36	; 0x24
 80048be:	af04      	add	r7, sp, #16
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d020      	beq.n	800490e <osThreadCreate+0x54>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01c      	beq.n	800490e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685c      	ldr	r4, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681d      	ldr	r5, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691e      	ldr	r6, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ffc8 	bl	800487c <makeFreeRtosPriority>
 80048ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048f6:	9202      	str	r2, [sp, #8]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	9100      	str	r1, [sp, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4632      	mov	r2, r6
 8004900:	4629      	mov	r1, r5
 8004902:	4620      	mov	r0, r4
 8004904:	f000 f8ed 	bl	8004ae2 <xTaskCreateStatic>
 8004908:	4603      	mov	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e01c      	b.n	8004948 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685c      	ldr	r4, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800491a:	b29e      	uxth	r6, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff ffaa 	bl	800487c <makeFreeRtosPriority>
 8004928:	4602      	mov	r2, r0
 800492a:	f107 030c 	add.w	r3, r7, #12
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	9200      	str	r2, [sp, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	4632      	mov	r2, r6
 8004936:	4629      	mov	r1, r5
 8004938:	4620      	mov	r0, r4
 800493a:	f000 f92f 	bl	8004b9c <xTaskCreate>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004952 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <osDelay+0x16>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	e000      	b.n	800496a <osDelay+0x18>
 8004968:	2301      	movs	r3, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fa4c 	bl	8004e08 <vTaskDelay>
  
  return osOK;
 8004970:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f103 0208 	add.w	r2, r3, #8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f103 0208 	add.w	r2, r3, #8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f103 0208 	add.w	r2, r3, #8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d103      	bne.n	8004a3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	e00c      	b.n	8004a56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e002      	b.n	8004a4a <vListInsert+0x2e>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d2f6      	bcs.n	8004a44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6892      	ldr	r2, [r2, #8]
 8004aa4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6852      	ldr	r2, [r2, #4]
 8004aae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d103      	bne.n	8004ac2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1e5a      	subs	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b08e      	sub	sp, #56	; 0x38
 8004ae6:	af04      	add	r7, sp, #16
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10a      	bne.n	8004b28 <xTaskCreateStatic+0x46>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	61fb      	str	r3, [r7, #28]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b28:	2354      	movs	r3, #84	; 0x54
 8004b2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b54      	cmp	r3, #84	; 0x54
 8004b30:	d00a      	beq.n	8004b48 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	61bb      	str	r3, [r7, #24]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01e      	beq.n	8004b8e <xTaskCreateStatic+0xac>
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01b      	beq.n	8004b8e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9303      	str	r3, [sp, #12]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f850 	bl	8004c26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b88:	f000 f8d4 	bl	8004d34 <prvAddNewTaskToReadyList>
 8004b8c:	e001      	b.n	8004b92 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b92:	697b      	ldr	r3, [r7, #20]
	}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3728      	adds	r7, #40	; 0x28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af04      	add	r7, sp, #16
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fee1 	bl	8005978 <pvPortMalloc>
 8004bb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bbe:	2054      	movs	r0, #84	; 0x54
 8004bc0:	f000 feda 	bl	8005978 <pvPortMalloc>
 8004bc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd2:	e005      	b.n	8004be0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bd4:	6978      	ldr	r0, [r7, #20]
 8004bd6:	f000 ff9b 	bl	8005b10 <vPortFree>
 8004bda:	e001      	b.n	8004be0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d017      	beq.n	8004c16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9303      	str	r3, [sp, #12]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	9302      	str	r3, [sp, #8]
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f80e 	bl	8004c26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c0a:	69f8      	ldr	r0, [r7, #28]
 8004c0c:	f000 f892 	bl	8004d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c10:	2301      	movs	r3, #1
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	e002      	b.n	8004c1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
	}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b088      	sub	sp, #32
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f023 0307 	bic.w	r3, r3, #7
 8004c4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <prvInitialiseNewTask+0x48>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	617b      	str	r3, [r7, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01f      	beq.n	8004cb4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c74:	2300      	movs	r3, #0
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e012      	b.n	8004ca0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	4413      	add	r3, r2
 8004c80:	7819      	ldrb	r1, [r3, #0]
 8004c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	3334      	adds	r3, #52	; 0x34
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b0f      	cmp	r3, #15
 8004ca4:	d9e9      	bls.n	8004c7a <prvInitialiseNewTask+0x54>
 8004ca6:	e000      	b.n	8004caa <prvInitialiseNewTask+0x84>
			{
				break;
 8004ca8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb2:	e003      	b.n	8004cbc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d901      	bls.n	8004cc6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cc2:	2306      	movs	r3, #6
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fe6c 	bl	80049ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	3318      	adds	r3, #24
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fe67 	bl	80049ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	f1c3 0207 	rsb	r2, r3, #7
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	2200      	movs	r2, #0
 8004d06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	69b8      	ldr	r0, [r7, #24]
 8004d16:	f000 fc23 	bl	8005560 <pxPortInitialiseStack>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d2c:	bf00      	nop
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d3c:	f000 fd3a 	bl	80057b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d40:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <prvAddNewTaskToReadyList+0xb8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	4a29      	ldr	r2, [pc, #164]	; (8004dec <prvAddNewTaskToReadyList+0xb8>)
 8004d48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d4a:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <prvAddNewTaskToReadyList+0xbc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d52:	4a27      	ldr	r2, [pc, #156]	; (8004df0 <prvAddNewTaskToReadyList+0xbc>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <prvAddNewTaskToReadyList+0xb8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d110      	bne.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d60:	f000 fabc 	bl	80052dc <prvInitialiseTaskLists>
 8004d64:	e00d      	b.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d66:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <prvAddNewTaskToReadyList+0xc0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d6e:	4b20      	ldr	r3, [pc, #128]	; (8004df0 <prvAddNewTaskToReadyList+0xbc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d802      	bhi.n	8004d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <prvAddNewTaskToReadyList+0xbc>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <prvAddNewTaskToReadyList+0xc4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <prvAddNewTaskToReadyList+0xc4>)
 8004d8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	2201      	movs	r2, #1
 8004d92:	409a      	lsls	r2, r3
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <prvAddNewTaskToReadyList+0xc8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <prvAddNewTaskToReadyList+0xc8>)
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <prvAddNewTaskToReadyList+0xcc>)
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7ff fe0d 	bl	80049d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dba:	f000 fd2b 	bl	8005814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <prvAddNewTaskToReadyList+0xc0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00e      	beq.n	8004de4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <prvAddNewTaskToReadyList+0xbc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d207      	bcs.n	8004de4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <prvAddNewTaskToReadyList+0xd0>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	200005f8 	.word	0x200005f8
 8004df0:	200004f8 	.word	0x200004f8
 8004df4:	20000604 	.word	0x20000604
 8004df8:	20000614 	.word	0x20000614
 8004dfc:	20000600 	.word	0x20000600
 8004e00:	200004fc 	.word	0x200004fc
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d017      	beq.n	8004e4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e1a:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <vTaskDelay+0x60>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <vTaskDelay+0x30>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60bb      	str	r3, [r7, #8]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e38:	f000 f87a 	bl	8004f30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fb28 	bl	8005494 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e44:	f000 f882 	bl	8004f4c <xTaskResumeAll>
 8004e48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <vTaskDelay+0x64>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000620 	.word	0x20000620
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e7e:	463a      	mov	r2, r7
 8004e80:	1d39      	adds	r1, r7, #4
 8004e82:	f107 0308 	add.w	r3, r7, #8
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc f93e 	bl	8001108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	9202      	str	r2, [sp, #8]
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	460a      	mov	r2, r1
 8004e9e:	491e      	ldr	r1, [pc, #120]	; (8004f18 <vTaskStartScheduler+0xa8>)
 8004ea0:	481e      	ldr	r0, [pc, #120]	; (8004f1c <vTaskStartScheduler+0xac>)
 8004ea2:	f7ff fe1e 	bl	8004ae2 <xTaskCreateStatic>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <vTaskStartScheduler+0xb0>)
 8004eaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004eac:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <vTaskStartScheduler+0xb0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e001      	b.n	8004ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d116      	bne.n	8004ef2 <vTaskStartScheduler+0x82>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	613b      	str	r3, [r7, #16]
}
 8004ed6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed8:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <vTaskStartScheduler+0xb4>)
 8004eda:	f04f 32ff 	mov.w	r2, #4294967295
 8004ede:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <vTaskStartScheduler+0xb8>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ee6:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <vTaskStartScheduler+0xbc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004eec:	f000 fbc0 	bl	8005670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ef0:	e00e      	b.n	8004f10 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d10a      	bne.n	8004f10 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60fb      	str	r3, [r7, #12]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vTaskStartScheduler+0x9e>
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	0800a71c 	.word	0x0800a71c
 8004f1c:	080052ad 	.word	0x080052ad
 8004f20:	2000061c 	.word	0x2000061c
 8004f24:	20000618 	.word	0x20000618
 8004f28:	20000604 	.word	0x20000604
 8004f2c:	200005fc 	.word	0x200005fc

08004f30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <vTaskSuspendAll+0x18>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	4a03      	ldr	r2, [pc, #12]	; (8004f48 <vTaskSuspendAll+0x18>)
 8004f3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20000620 	.word	0x20000620

08004f4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <xTaskResumeAll+0x114>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	603b      	str	r3, [r7, #0]
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f78:	f000 fc1c 	bl	80057b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f7c:	4b38      	ldr	r3, [pc, #224]	; (8005060 <xTaskResumeAll+0x114>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	4a37      	ldr	r2, [pc, #220]	; (8005060 <xTaskResumeAll+0x114>)
 8004f84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <xTaskResumeAll+0x114>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d161      	bne.n	8005052 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f8e:	4b35      	ldr	r3, [pc, #212]	; (8005064 <xTaskResumeAll+0x118>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d05d      	beq.n	8005052 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f96:	e02e      	b.n	8004ff6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f98:	4b33      	ldr	r3, [pc, #204]	; (8005068 <xTaskResumeAll+0x11c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3318      	adds	r3, #24
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fd72 	bl	8004a8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fd6d 	bl	8004a8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	2201      	movs	r2, #1
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	; (800506c <xTaskResumeAll+0x120>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	; (800506c <xTaskResumeAll+0x120>)
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4a27      	ldr	r2, [pc, #156]	; (8005070 <xTaskResumeAll+0x124>)
 8004fd4:	441a      	add	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7ff fcf9 	bl	80049d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	4b23      	ldr	r3, [pc, #140]	; (8005074 <xTaskResumeAll+0x128>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d302      	bcc.n	8004ff6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <xTaskResumeAll+0x12c>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ff6:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <xTaskResumeAll+0x11c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1cc      	bne.n	8004f98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005004:	f000 fa08 	bl	8005418 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005008:	4b1c      	ldr	r3, [pc, #112]	; (800507c <xTaskResumeAll+0x130>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005014:	f000 f836 	bl	8005084 <xTaskIncrementTick>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800501e:	4b16      	ldr	r3, [pc, #88]	; (8005078 <xTaskResumeAll+0x12c>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3b01      	subs	r3, #1
 8005028:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f1      	bne.n	8005014 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <xTaskResumeAll+0x130>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005036:	4b10      	ldr	r3, [pc, #64]	; (8005078 <xTaskResumeAll+0x12c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800503e:	2301      	movs	r3, #1
 8005040:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005042:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <xTaskResumeAll+0x134>)
 8005044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005052:	f000 fbdf 	bl	8005814 <vPortExitCritical>

	return xAlreadyYielded;
 8005056:	68bb      	ldr	r3, [r7, #8]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000620 	.word	0x20000620
 8005064:	200005f8 	.word	0x200005f8
 8005068:	200005b8 	.word	0x200005b8
 800506c:	20000600 	.word	0x20000600
 8005070:	200004fc 	.word	0x200004fc
 8005074:	200004f8 	.word	0x200004f8
 8005078:	2000060c 	.word	0x2000060c
 800507c:	20000608 	.word	0x20000608
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508e:	4b4e      	ldr	r3, [pc, #312]	; (80051c8 <xTaskIncrementTick+0x144>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 808e 	bne.w	80051b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005098:	4b4c      	ldr	r3, [pc, #304]	; (80051cc <xTaskIncrementTick+0x148>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050a0:	4a4a      	ldr	r2, [pc, #296]	; (80051cc <xTaskIncrementTick+0x148>)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d120      	bne.n	80050ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050ac:	4b48      	ldr	r3, [pc, #288]	; (80051d0 <xTaskIncrementTick+0x14c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <xTaskIncrementTick+0x48>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	603b      	str	r3, [r7, #0]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <xTaskIncrementTick+0x46>
 80050cc:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <xTaskIncrementTick+0x14c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	4b40      	ldr	r3, [pc, #256]	; (80051d4 <xTaskIncrementTick+0x150>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a3e      	ldr	r2, [pc, #248]	; (80051d0 <xTaskIncrementTick+0x14c>)
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4a3e      	ldr	r2, [pc, #248]	; (80051d4 <xTaskIncrementTick+0x150>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <xTaskIncrementTick+0x154>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <xTaskIncrementTick+0x154>)
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	f000 f995 	bl	8005418 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050ee:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <xTaskIncrementTick+0x158>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d348      	bcc.n	800518a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f8:	4b35      	ldr	r3, [pc, #212]	; (80051d0 <xTaskIncrementTick+0x14c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005102:	4b36      	ldr	r3, [pc, #216]	; (80051dc <xTaskIncrementTick+0x158>)
 8005104:	f04f 32ff 	mov.w	r2, #4294967295
 8005108:	601a      	str	r2, [r3, #0]
					break;
 800510a:	e03e      	b.n	800518a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510c:	4b30      	ldr	r3, [pc, #192]	; (80051d0 <xTaskIncrementTick+0x14c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d203      	bcs.n	800512c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005124:	4a2d      	ldr	r2, [pc, #180]	; (80051dc <xTaskIncrementTick+0x158>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800512a:	e02e      	b.n	800518a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3304      	adds	r3, #4
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fcac 	bl	8004a8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3318      	adds	r3, #24
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fca3 	bl	8004a8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <xTaskIncrementTick+0x15c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4313      	orrs	r3, r2
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <xTaskIncrementTick+0x15c>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <xTaskIncrementTick+0x160>)
 8005168:	441a      	add	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7ff fc2f 	bl	80049d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <xTaskIncrementTick+0x164>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d3b9      	bcc.n	80050f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005188:	e7b6      	b.n	80050f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800518a:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <xTaskIncrementTick+0x164>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	4914      	ldr	r1, [pc, #80]	; (80051e4 <xTaskIncrementTick+0x160>)
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d901      	bls.n	80051a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051a6:	4b11      	ldr	r3, [pc, #68]	; (80051ec <xTaskIncrementTick+0x168>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	e004      	b.n	80051be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <xTaskIncrementTick+0x16c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <xTaskIncrementTick+0x16c>)
 80051bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051be:	697b      	ldr	r3, [r7, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000620 	.word	0x20000620
 80051cc:	200005fc 	.word	0x200005fc
 80051d0:	200005b0 	.word	0x200005b0
 80051d4:	200005b4 	.word	0x200005b4
 80051d8:	20000610 	.word	0x20000610
 80051dc:	20000618 	.word	0x20000618
 80051e0:	20000600 	.word	0x20000600
 80051e4:	200004fc 	.word	0x200004fc
 80051e8:	200004f8 	.word	0x200004f8
 80051ec:	2000060c 	.word	0x2000060c
 80051f0:	20000608 	.word	0x20000608

080051f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051fa:	4b27      	ldr	r3, [pc, #156]	; (8005298 <vTaskSwitchContext+0xa4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005202:	4b26      	ldr	r3, [pc, #152]	; (800529c <vTaskSwitchContext+0xa8>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005208:	e03f      	b.n	800528a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <vTaskSwitchContext+0xa8>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005210:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <vTaskSwitchContext+0xac>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800521e:	7afb      	ldrb	r3, [r7, #11]
 8005220:	f1c3 031f 	rsb	r3, r3, #31
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	491f      	ldr	r1, [pc, #124]	; (80052a4 <vTaskSwitchContext+0xb0>)
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <vTaskSwitchContext+0x5c>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	607b      	str	r3, [r7, #4]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <vTaskSwitchContext+0x5a>
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <vTaskSwitchContext+0xb0>)
 800525c:	4413      	add	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3308      	adds	r3, #8
 8005272:	429a      	cmp	r2, r3
 8005274:	d104      	bne.n	8005280 <vTaskSwitchContext+0x8c>
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <vTaskSwitchContext+0xb4>)
 8005288:	6013      	str	r3, [r2, #0]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000620 	.word	0x20000620
 800529c:	2000060c 	.word	0x2000060c
 80052a0:	20000600 	.word	0x20000600
 80052a4:	200004fc 	.word	0x200004fc
 80052a8:	200004f8 	.word	0x200004f8

080052ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052b4:	f000 f852 	bl	800535c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <prvIdleTask+0x28>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d9f9      	bls.n	80052b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <prvIdleTask+0x2c>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052d0:	e7f0      	b.n	80052b4 <prvIdleTask+0x8>
 80052d2:	bf00      	nop
 80052d4:	200004fc 	.word	0x200004fc
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	e00c      	b.n	8005302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4a12      	ldr	r2, [pc, #72]	; (800533c <prvInitialiseTaskLists+0x60>)
 80052f4:	4413      	add	r3, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fb3f 	bl	800497a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3301      	adds	r3, #1
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d9ef      	bls.n	80052e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005308:	480d      	ldr	r0, [pc, #52]	; (8005340 <prvInitialiseTaskLists+0x64>)
 800530a:	f7ff fb36 	bl	800497a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800530e:	480d      	ldr	r0, [pc, #52]	; (8005344 <prvInitialiseTaskLists+0x68>)
 8005310:	f7ff fb33 	bl	800497a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005314:	480c      	ldr	r0, [pc, #48]	; (8005348 <prvInitialiseTaskLists+0x6c>)
 8005316:	f7ff fb30 	bl	800497a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800531a:	480c      	ldr	r0, [pc, #48]	; (800534c <prvInitialiseTaskLists+0x70>)
 800531c:	f7ff fb2d 	bl	800497a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005320:	480b      	ldr	r0, [pc, #44]	; (8005350 <prvInitialiseTaskLists+0x74>)
 8005322:	f7ff fb2a 	bl	800497a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <prvInitialiseTaskLists+0x78>)
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <prvInitialiseTaskLists+0x64>)
 800532a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <prvInitialiseTaskLists+0x7c>)
 800532e:	4a05      	ldr	r2, [pc, #20]	; (8005344 <prvInitialiseTaskLists+0x68>)
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	200004fc 	.word	0x200004fc
 8005340:	20000588 	.word	0x20000588
 8005344:	2000059c 	.word	0x2000059c
 8005348:	200005b8 	.word	0x200005b8
 800534c:	200005cc 	.word	0x200005cc
 8005350:	200005e4 	.word	0x200005e4
 8005354:	200005b0 	.word	0x200005b0
 8005358:	200005b4 	.word	0x200005b4

0800535c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005362:	e019      	b.n	8005398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005364:	f000 fa26 	bl	80057b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <prvCheckTasksWaitingTermination+0x50>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fb8a 	bl	8004a8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <prvCheckTasksWaitingTermination+0x54>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <prvCheckTasksWaitingTermination+0x54>)
 8005382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <prvCheckTasksWaitingTermination+0x58>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3b01      	subs	r3, #1
 800538a:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <prvCheckTasksWaitingTermination+0x58>)
 800538c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800538e:	f000 fa41 	bl	8005814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f810 	bl	80053b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <prvCheckTasksWaitingTermination+0x58>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e1      	bne.n	8005364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	200005cc 	.word	0x200005cc
 80053b0:	200005f8 	.word	0x200005f8
 80053b4:	200005e0 	.word	0x200005e0

080053b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fb9e 	bl	8005b10 <vPortFree>
				vPortFree( pxTCB );
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fb9b 	bl	8005b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053da:	e018      	b.n	800540e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d103      	bne.n	80053ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fb92 	bl	8005b10 <vPortFree>
	}
 80053ec:	e00f      	b.n	800540e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d00a      	beq.n	800540e <prvDeleteTCB+0x56>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	60fb      	str	r3, [r7, #12]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <prvDeleteTCB+0x54>
	}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <prvResetNextTaskUnblockTime+0x38>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <prvResetNextTaskUnblockTime+0x3c>)
 800542a:	f04f 32ff 	mov.w	r2, #4294967295
 800542e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005430:	e008      	b.n	8005444 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005432:	4b07      	ldr	r3, [pc, #28]	; (8005450 <prvResetNextTaskUnblockTime+0x38>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a04      	ldr	r2, [pc, #16]	; (8005454 <prvResetNextTaskUnblockTime+0x3c>)
 8005442:	6013      	str	r3, [r2, #0]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	200005b0 	.word	0x200005b0
 8005454:	20000618 	.word	0x20000618

08005458 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <xTaskGetSchedulerState+0x34>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005466:	2301      	movs	r3, #1
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	e008      	b.n	800547e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <xTaskGetSchedulerState+0x38>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005474:	2302      	movs	r3, #2
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	e001      	b.n	800547e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800547e:	687b      	ldr	r3, [r7, #4]
	}
 8005480:	4618      	mov	r0, r3
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000604 	.word	0x20000604
 8005490:	20000620 	.word	0x20000620

08005494 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800549e:	4b29      	ldr	r3, [pc, #164]	; (8005544 <prvAddCurrentTaskToDelayedList+0xb0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a4:	4b28      	ldr	r3, [pc, #160]	; (8005548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff faef 	bl	8004a8e <uxListRemove>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	2201      	movs	r2, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43da      	mvns	r2, r3
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <prvAddCurrentTaskToDelayedList+0xb8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4013      	ands	r3, r2
 80054ca:	4a20      	ldr	r2, [pc, #128]	; (800554c <prvAddCurrentTaskToDelayedList+0xb8>)
 80054cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d10a      	bne.n	80054ec <prvAddCurrentTaskToDelayedList+0x58>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	481a      	ldr	r0, [pc, #104]	; (8005550 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054e6:	f7ff fa75 	bl	80049d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054ea:	e026      	b.n	800553a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	429a      	cmp	r2, r3
 8005502:	d209      	bcs.n	8005518 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005504:	4b13      	ldr	r3, [pc, #76]	; (8005554 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7ff fa83 	bl	8004a1c <vListInsert>
}
 8005516:	e010      	b.n	800553a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <prvAddCurrentTaskToDelayedList+0xc4>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3304      	adds	r3, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7ff fa79 	bl	8004a1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <prvAddCurrentTaskToDelayedList+0xc8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	d202      	bcs.n	800553a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005534:	4a09      	ldr	r2, [pc, #36]	; (800555c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6013      	str	r3, [r2, #0]
}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200005fc 	.word	0x200005fc
 8005548:	200004f8 	.word	0x200004f8
 800554c:	20000600 	.word	0x20000600
 8005550:	200005e4 	.word	0x200005e4
 8005554:	200005b4 	.word	0x200005b4
 8005558:	200005b0 	.word	0x200005b0
 800555c:	20000618 	.word	0x20000618

08005560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b04      	subs	r3, #4
 8005570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3b04      	subs	r3, #4
 800558e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005590:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <pxPortInitialiseStack+0x64>)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3b14      	subs	r3, #20
 800559a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b04      	subs	r3, #4
 80055a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f06f 0202 	mvn.w	r2, #2
 80055ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b20      	subs	r3, #32
 80055b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055b6:	68fb      	ldr	r3, [r7, #12]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	080055c9 	.word	0x080055c9

080055c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <prvTaskExitError+0x54>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d00a      	beq.n	80055f2 <prvTaskExitError+0x2a>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <prvTaskExitError+0x28>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	60bb      	str	r3, [r7, #8]
}
 8005604:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005606:	bf00      	nop
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0fc      	beq.n	8005608 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	2000000c 	.word	0x2000000c

08005620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <pxCurrentTCBConst2>)
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	6808      	ldr	r0, [r1, #0]
 8005626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	f380 8809 	msr	PSP, r0
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8811 	msr	BASEPRI, r0
 800563a:	4770      	bx	lr
 800563c:	f3af 8000 	nop.w

08005640 <pxCurrentTCBConst2>:
 8005640:	200004f8 	.word	0x200004f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005648:	4808      	ldr	r0, [pc, #32]	; (800566c <prvPortStartFirstTask+0x24>)
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	6800      	ldr	r0, [r0, #0]
 800564e:	f380 8808 	msr	MSP, r0
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8814 	msr	CONTROL, r0
 800565a:	b662      	cpsie	i
 800565c:	b661      	cpsie	f
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	df00      	svc	0
 8005668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800566a:	bf00      	nop
 800566c:	e000ed08 	.word	0xe000ed08

08005670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005676:	4b46      	ldr	r3, [pc, #280]	; (8005790 <xPortStartScheduler+0x120>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a46      	ldr	r2, [pc, #280]	; (8005794 <xPortStartScheduler+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10a      	bne.n	8005696 <xPortStartScheduler+0x26>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	613b      	str	r3, [r7, #16]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <xPortStartScheduler+0x120>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a3f      	ldr	r2, [pc, #252]	; (8005798 <xPortStartScheduler+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d10a      	bne.n	80056b6 <xPortStartScheduler+0x46>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <xPortStartScheduler+0x12c>)
 80056b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <xPortStartScheduler+0x130>)
 80056dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <xPortStartScheduler+0x134>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056e4:	e009      	b.n	80056fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056e6:	4b2f      	ldr	r3, [pc, #188]	; (80057a4 <xPortStartScheduler+0x134>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	4a2d      	ldr	r2, [pc, #180]	; (80057a4 <xPortStartScheduler+0x134>)
 80056ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d0ef      	beq.n	80056e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005706:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <xPortStartScheduler+0x134>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1c3 0307 	rsb	r3, r3, #7
 800570e:	2b04      	cmp	r3, #4
 8005710:	d00a      	beq.n	8005728 <xPortStartScheduler+0xb8>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	60bb      	str	r3, [r7, #8]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <xPortStartScheduler+0x134>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <xPortStartScheduler+0x134>)
 8005730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <xPortStartScheduler+0x134>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800573a:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <xPortStartScheduler+0x134>)
 800573c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <xPortStartScheduler+0x138>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <xPortStartScheduler+0x138>)
 800574c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <xPortStartScheduler+0x138>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <xPortStartScheduler+0x138>)
 8005758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800575c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800575e:	f000 f8dd 	bl	800591c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <xPortStartScheduler+0x13c>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005768:	f000 f8fc 	bl	8005964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800576c:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <xPortStartScheduler+0x140>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0f      	ldr	r2, [pc, #60]	; (80057b0 <xPortStartScheduler+0x140>)
 8005772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005778:	f7ff ff66 	bl	8005648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800577c:	f7ff fd3a 	bl	80051f4 <vTaskSwitchContext>
	prvTaskExitError();
 8005780:	f7ff ff22 	bl	80055c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	e000ed00 	.word	0xe000ed00
 8005794:	410fc271 	.word	0x410fc271
 8005798:	410fc270 	.word	0x410fc270
 800579c:	e000e400 	.word	0xe000e400
 80057a0:	20000624 	.word	0x20000624
 80057a4:	20000628 	.word	0x20000628
 80057a8:	e000ed20 	.word	0xe000ed20
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	e000ef34 	.word	0xe000ef34

080057b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	607b      	str	r3, [r7, #4]
}
 80057cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057ce:	4b0f      	ldr	r3, [pc, #60]	; (800580c <vPortEnterCritical+0x58>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	4a0d      	ldr	r2, [pc, #52]	; (800580c <vPortEnterCritical+0x58>)
 80057d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <vPortEnterCritical+0x58>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10f      	bne.n	8005800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <vPortEnterCritical+0x5c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <vPortEnterCritical+0x4c>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	603b      	str	r3, [r7, #0]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <vPortEnterCritical+0x4a>
	}
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	2000000c 	.word	0x2000000c
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <vPortExitCritical+0x50>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <vPortExitCritical+0x24>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	607b      	str	r3, [r7, #4]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <vPortExitCritical+0x50>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3b01      	subs	r3, #1
 800583e:	4a09      	ldr	r2, [pc, #36]	; (8005864 <vPortExitCritical+0x50>)
 8005840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <vPortExitCritical+0x50>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <vPortExitCritical+0x42>
 800584a:	2300      	movs	r3, #0
 800584c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000000c 	.word	0x2000000c
	...

08005870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f01e 0f10 	tst.w	lr, #16
 8005880:	bf08      	it	eq
 8005882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005894:	f380 8811 	msr	BASEPRI, r0
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f7ff fca8 	bl	80051f4 <vTaskSwitchContext>
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f380 8811 	msr	BASEPRI, r0
 80058ac:	bc09      	pop	{r0, r3}
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	6808      	ldr	r0, [r1, #0]
 80058b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b6:	f01e 0f10 	tst.w	lr, #16
 80058ba:	bf08      	it	eq
 80058bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058c0:	f380 8809 	msr	PSP, r0
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst>:
 80058d0:	200004f8 	.word	0x200004f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
}
 80058f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058f2:	f7ff fbc7 	bl	8005084 <xTaskIncrementTick>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <xPortSysTickHandler+0x40>)
 80058fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	2300      	movs	r3, #0
 8005906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f383 8811 	msr	BASEPRI, r3
}
 800590e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <vPortSetupTimerInterrupt+0x34>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <vPortSetupTimerInterrupt+0x38>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <vPortSetupTimerInterrupt+0x3c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0a      	ldr	r2, [pc, #40]	; (800595c <vPortSetupTimerInterrupt+0x40>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	099b      	lsrs	r3, r3, #6
 8005938:	4a09      	ldr	r2, [pc, #36]	; (8005960 <vPortSetupTimerInterrupt+0x44>)
 800593a:	3b01      	subs	r3, #1
 800593c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <vPortSetupTimerInterrupt+0x34>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000e010 	.word	0xe000e010
 8005954:	e000e018 	.word	0xe000e018
 8005958:	20000000 	.word	0x20000000
 800595c:	10624dd3 	.word	0x10624dd3
 8005960:	e000e014 	.word	0xe000e014

08005964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005974 <vPortEnableVFP+0x10>
 8005968:	6801      	ldr	r1, [r0, #0]
 800596a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800596e:	6001      	str	r1, [r0, #0]
 8005970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005972:	bf00      	nop
 8005974:	e000ed88 	.word	0xe000ed88

08005978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005984:	f7ff fad4 	bl	8004f30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005988:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <pvPortMalloc+0x180>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005990:	f000 f920 	bl	8005bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <pvPortMalloc+0x184>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8093 	bne.w	8005ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01d      	beq.n	80059e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80059a8:	2208      	movs	r2, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d014      	beq.n	80059e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f023 0307 	bic.w	r3, r3, #7
 80059c0:	3308      	adds	r3, #8
 80059c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <pvPortMalloc+0x6c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	617b      	str	r3, [r7, #20]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d06e      	beq.n	8005ac8 <pvPortMalloc+0x150>
 80059ea:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <pvPortMalloc+0x188>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d869      	bhi.n	8005ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059f4:	4b43      	ldr	r3, [pc, #268]	; (8005b04 <pvPortMalloc+0x18c>)
 80059f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059f8:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <pvPortMalloc+0x18c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059fe:	e004      	b.n	8005a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d903      	bls.n	8005a1c <pvPortMalloc+0xa4>
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f1      	bne.n	8005a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a1c:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <pvPortMalloc+0x180>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d050      	beq.n	8005ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	4413      	add	r3, r2
 8005a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	2308      	movs	r3, #8
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d91f      	bls.n	8005a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <pvPortMalloc+0xf8>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	613b      	str	r3, [r7, #16]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1ad2      	subs	r2, r2, r3
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a82:	69b8      	ldr	r0, [r7, #24]
 8005a84:	f000 f908 	bl	8005c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	; (8005b00 <pvPortMalloc+0x188>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <pvPortMalloc+0x188>)
 8005a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <pvPortMalloc+0x188>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <pvPortMalloc+0x190>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d203      	bcs.n	8005aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aa2:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <pvPortMalloc+0x188>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <pvPortMalloc+0x190>)
 8005aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <pvPortMalloc+0x184>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <pvPortMalloc+0x194>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <pvPortMalloc+0x194>)
 8005ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ac8:	f7ff fa40 	bl	8004f4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <pvPortMalloc+0x174>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <pvPortMalloc+0x172>
	return pvReturn;
 8005aec:	69fb      	ldr	r3, [r7, #28]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20004234 	.word	0x20004234
 8005afc:	20004248 	.word	0x20004248
 8005b00:	20004238 	.word	0x20004238
 8005b04:	2000422c 	.word	0x2000422c
 8005b08:	2000423c 	.word	0x2000423c
 8005b0c:	20004240 	.word	0x20004240

08005b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d04d      	beq.n	8005bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b22:	2308      	movs	r3, #8
 8005b24:	425b      	negs	r3, r3
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4413      	add	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <vPortFree+0xb8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <vPortFree+0x44>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60fb      	str	r3, [r7, #12]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <vPortFree+0x62>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60bb      	str	r3, [r7, #8]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <vPortFree+0xb8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d11a      	bne.n	8005bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <vPortFree+0xb8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	43db      	mvns	r3, r3
 8005b92:	401a      	ands	r2, r3
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b98:	f7ff f9ca 	bl	8004f30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <vPortFree+0xbc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <vPortFree+0xbc>)
 8005ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005baa:	6938      	ldr	r0, [r7, #16]
 8005bac:	f000 f874 	bl	8005c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bb0:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <vPortFree+0xc0>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	4a06      	ldr	r2, [pc, #24]	; (8005bd0 <vPortFree+0xc0>)
 8005bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bba:	f7ff f9c7 	bl	8004f4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20004248 	.word	0x20004248
 8005bcc:	20004238 	.word	0x20004238
 8005bd0:	20004244 	.word	0x20004244

08005bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <prvHeapInit+0xac>)
 8005be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00c      	beq.n	8005c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3307      	adds	r3, #7
 8005bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <prvHeapInit+0xac>)
 8005c04:	4413      	add	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <prvHeapInit+0xb0>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c12:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <prvHeapInit+0xb0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c20:	2208      	movs	r2, #8
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0307 	bic.w	r3, r3, #7
 8005c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <prvHeapInit+0xb4>)
 8005c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <prvHeapInit+0xb4>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c3e:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <prvHeapInit+0xb4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <prvHeapInit+0xb4>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <prvHeapInit+0xb8>)
 8005c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <prvHeapInit+0xbc>)
 8005c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <prvHeapInit+0xc0>)
 8005c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c72:	601a      	str	r2, [r3, #0]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	2000062c 	.word	0x2000062c
 8005c84:	2000422c 	.word	0x2000422c
 8005c88:	20004234 	.word	0x20004234
 8005c8c:	2000423c 	.word	0x2000423c
 8005c90:	20004238 	.word	0x20004238
 8005c94:	20004248 	.word	0x20004248

08005c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ca0:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <prvInsertBlockIntoFreeList+0xac>)
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e002      	b.n	8005cac <prvInsertBlockIntoFreeList+0x14>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d8f7      	bhi.n	8005ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d108      	bne.n	8005cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	441a      	add	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d118      	bne.n	8005d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d00d      	beq.n	8005d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e008      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d16:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <prvInsertBlockIntoFreeList+0xb0>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	e003      	b.n	8005d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d002      	beq.n	8005d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000422c 	.word	0x2000422c
 8005d48:	20004234 	.word	0x20004234

08005d4c <__errno>:
 8005d4c:	4b01      	ldr	r3, [pc, #4]	; (8005d54 <__errno+0x8>)
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000010 	.word	0x20000010

08005d58 <__libc_init_array>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	4d0d      	ldr	r5, [pc, #52]	; (8005d90 <__libc_init_array+0x38>)
 8005d5c:	4c0d      	ldr	r4, [pc, #52]	; (8005d94 <__libc_init_array+0x3c>)
 8005d5e:	1b64      	subs	r4, r4, r5
 8005d60:	10a4      	asrs	r4, r4, #2
 8005d62:	2600      	movs	r6, #0
 8005d64:	42a6      	cmp	r6, r4
 8005d66:	d109      	bne.n	8005d7c <__libc_init_array+0x24>
 8005d68:	4d0b      	ldr	r5, [pc, #44]	; (8005d98 <__libc_init_array+0x40>)
 8005d6a:	4c0c      	ldr	r4, [pc, #48]	; (8005d9c <__libc_init_array+0x44>)
 8005d6c:	f004 fcac 	bl	800a6c8 <_init>
 8005d70:	1b64      	subs	r4, r4, r5
 8005d72:	10a4      	asrs	r4, r4, #2
 8005d74:	2600      	movs	r6, #0
 8005d76:	42a6      	cmp	r6, r4
 8005d78:	d105      	bne.n	8005d86 <__libc_init_array+0x2e>
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d80:	4798      	blx	r3
 8005d82:	3601      	adds	r6, #1
 8005d84:	e7ee      	b.n	8005d64 <__libc_init_array+0xc>
 8005d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8a:	4798      	blx	r3
 8005d8c:	3601      	adds	r6, #1
 8005d8e:	e7f2      	b.n	8005d76 <__libc_init_array+0x1e>
 8005d90:	0800abf4 	.word	0x0800abf4
 8005d94:	0800abf4 	.word	0x0800abf4
 8005d98:	0800abf4 	.word	0x0800abf4
 8005d9c:	0800abf8 	.word	0x0800abf8

08005da0 <memcpy>:
 8005da0:	440a      	add	r2, r1
 8005da2:	4291      	cmp	r1, r2
 8005da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005da8:	d100      	bne.n	8005dac <memcpy+0xc>
 8005daa:	4770      	bx	lr
 8005dac:	b510      	push	{r4, lr}
 8005dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db6:	4291      	cmp	r1, r2
 8005db8:	d1f9      	bne.n	8005dae <memcpy+0xe>
 8005dba:	bd10      	pop	{r4, pc}

08005dbc <memset>:
 8005dbc:	4402      	add	r2, r0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d100      	bne.n	8005dc6 <memset+0xa>
 8005dc4:	4770      	bx	lr
 8005dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dca:	e7f9      	b.n	8005dc0 <memset+0x4>

08005dcc <__cvt>:
 8005dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	ec55 4b10 	vmov	r4, r5, d0
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	460e      	mov	r6, r1
 8005dd8:	4619      	mov	r1, r3
 8005dda:	462b      	mov	r3, r5
 8005ddc:	bfbb      	ittet	lt
 8005dde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005de2:	461d      	movlt	r5, r3
 8005de4:	2300      	movge	r3, #0
 8005de6:	232d      	movlt	r3, #45	; 0x2d
 8005de8:	700b      	strb	r3, [r1, #0]
 8005dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005df0:	4691      	mov	r9, r2
 8005df2:	f023 0820 	bic.w	r8, r3, #32
 8005df6:	bfbc      	itt	lt
 8005df8:	4622      	movlt	r2, r4
 8005dfa:	4614      	movlt	r4, r2
 8005dfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e00:	d005      	beq.n	8005e0e <__cvt+0x42>
 8005e02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e06:	d100      	bne.n	8005e0a <__cvt+0x3e>
 8005e08:	3601      	adds	r6, #1
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	e000      	b.n	8005e10 <__cvt+0x44>
 8005e0e:	2103      	movs	r1, #3
 8005e10:	ab03      	add	r3, sp, #12
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	ab02      	add	r3, sp, #8
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	ec45 4b10 	vmov	d0, r4, r5
 8005e1c:	4653      	mov	r3, sl
 8005e1e:	4632      	mov	r2, r6
 8005e20:	f001 fdc6 	bl	80079b0 <_dtoa_r>
 8005e24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e28:	4607      	mov	r7, r0
 8005e2a:	d102      	bne.n	8005e32 <__cvt+0x66>
 8005e2c:	f019 0f01 	tst.w	r9, #1
 8005e30:	d022      	beq.n	8005e78 <__cvt+0xac>
 8005e32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e36:	eb07 0906 	add.w	r9, r7, r6
 8005e3a:	d110      	bne.n	8005e5e <__cvt+0x92>
 8005e3c:	783b      	ldrb	r3, [r7, #0]
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d10a      	bne.n	8005e58 <__cvt+0x8c>
 8005e42:	2200      	movs	r2, #0
 8005e44:	2300      	movs	r3, #0
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f7fa fe45 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e4e:	b918      	cbnz	r0, 8005e58 <__cvt+0x8c>
 8005e50:	f1c6 0601 	rsb	r6, r6, #1
 8005e54:	f8ca 6000 	str.w	r6, [sl]
 8005e58:	f8da 3000 	ldr.w	r3, [sl]
 8005e5c:	4499      	add	r9, r3
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2300      	movs	r3, #0
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f7fa fe37 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e6a:	b108      	cbz	r0, 8005e70 <__cvt+0xa4>
 8005e6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e70:	2230      	movs	r2, #48	; 0x30
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	454b      	cmp	r3, r9
 8005e76:	d307      	bcc.n	8005e88 <__cvt+0xbc>
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e7c:	1bdb      	subs	r3, r3, r7
 8005e7e:	4638      	mov	r0, r7
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	b004      	add	sp, #16
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	9103      	str	r1, [sp, #12]
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e7f0      	b.n	8005e72 <__cvt+0xa6>

08005e90 <__exponent>:
 8005e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e92:	4603      	mov	r3, r0
 8005e94:	2900      	cmp	r1, #0
 8005e96:	bfb8      	it	lt
 8005e98:	4249      	neglt	r1, r1
 8005e9a:	f803 2b02 	strb.w	r2, [r3], #2
 8005e9e:	bfb4      	ite	lt
 8005ea0:	222d      	movlt	r2, #45	; 0x2d
 8005ea2:	222b      	movge	r2, #43	; 0x2b
 8005ea4:	2909      	cmp	r1, #9
 8005ea6:	7042      	strb	r2, [r0, #1]
 8005ea8:	dd2a      	ble.n	8005f00 <__exponent+0x70>
 8005eaa:	f10d 0407 	add.w	r4, sp, #7
 8005eae:	46a4      	mov	ip, r4
 8005eb0:	270a      	movs	r7, #10
 8005eb2:	46a6      	mov	lr, r4
 8005eb4:	460a      	mov	r2, r1
 8005eb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005eba:	fb07 1516 	mls	r5, r7, r6, r1
 8005ebe:	3530      	adds	r5, #48	; 0x30
 8005ec0:	2a63      	cmp	r2, #99	; 0x63
 8005ec2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ec6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005eca:	4631      	mov	r1, r6
 8005ecc:	dcf1      	bgt.n	8005eb2 <__exponent+0x22>
 8005ece:	3130      	adds	r1, #48	; 0x30
 8005ed0:	f1ae 0502 	sub.w	r5, lr, #2
 8005ed4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ed8:	1c44      	adds	r4, r0, #1
 8005eda:	4629      	mov	r1, r5
 8005edc:	4561      	cmp	r1, ip
 8005ede:	d30a      	bcc.n	8005ef6 <__exponent+0x66>
 8005ee0:	f10d 0209 	add.w	r2, sp, #9
 8005ee4:	eba2 020e 	sub.w	r2, r2, lr
 8005ee8:	4565      	cmp	r5, ip
 8005eea:	bf88      	it	hi
 8005eec:	2200      	movhi	r2, #0
 8005eee:	4413      	add	r3, r2
 8005ef0:	1a18      	subs	r0, r3, r0
 8005ef2:	b003      	add	sp, #12
 8005ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005efe:	e7ed      	b.n	8005edc <__exponent+0x4c>
 8005f00:	2330      	movs	r3, #48	; 0x30
 8005f02:	3130      	adds	r1, #48	; 0x30
 8005f04:	7083      	strb	r3, [r0, #2]
 8005f06:	70c1      	strb	r1, [r0, #3]
 8005f08:	1d03      	adds	r3, r0, #4
 8005f0a:	e7f1      	b.n	8005ef0 <__exponent+0x60>

08005f0c <_printf_float>:
 8005f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f10:	ed2d 8b02 	vpush	{d8}
 8005f14:	b08d      	sub	sp, #52	; 0x34
 8005f16:	460c      	mov	r4, r1
 8005f18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	461f      	mov	r7, r3
 8005f20:	4605      	mov	r5, r0
 8005f22:	f002 ff97 	bl	8008e54 <_localeconv_r>
 8005f26:	f8d0 a000 	ldr.w	sl, [r0]
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	f7fa f958 	bl	80001e0 <strlen>
 8005f30:	2300      	movs	r3, #0
 8005f32:	930a      	str	r3, [sp, #40]	; 0x28
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	9305      	str	r3, [sp, #20]
 8005f38:	f8d8 3000 	ldr.w	r3, [r8]
 8005f3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f40:	3307      	adds	r3, #7
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	f103 0208 	add.w	r2, r3, #8
 8005f4a:	f8c8 2000 	str.w	r2, [r8]
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f5e:	9307      	str	r3, [sp, #28]
 8005f60:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f64:	ee08 0a10 	vmov	s16, r0
 8005f68:	4b9f      	ldr	r3, [pc, #636]	; (80061e8 <_printf_float+0x2dc>)
 8005f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f72:	f7fa fde3 	bl	8000b3c <__aeabi_dcmpun>
 8005f76:	bb88      	cbnz	r0, 8005fdc <_printf_float+0xd0>
 8005f78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f7c:	4b9a      	ldr	r3, [pc, #616]	; (80061e8 <_printf_float+0x2dc>)
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f82:	f7fa fdbd 	bl	8000b00 <__aeabi_dcmple>
 8005f86:	bb48      	cbnz	r0, 8005fdc <_printf_float+0xd0>
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa fdac 	bl	8000aec <__aeabi_dcmplt>
 8005f94:	b110      	cbz	r0, 8005f9c <_printf_float+0x90>
 8005f96:	232d      	movs	r3, #45	; 0x2d
 8005f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9c:	4b93      	ldr	r3, [pc, #588]	; (80061ec <_printf_float+0x2e0>)
 8005f9e:	4894      	ldr	r0, [pc, #592]	; (80061f0 <_printf_float+0x2e4>)
 8005fa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fa4:	bf94      	ite	ls
 8005fa6:	4698      	movls	r8, r3
 8005fa8:	4680      	movhi	r8, r0
 8005faa:	2303      	movs	r3, #3
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	9b05      	ldr	r3, [sp, #20]
 8005fb0:	f023 0204 	bic.w	r2, r3, #4
 8005fb4:	6022      	str	r2, [r4, #0]
 8005fb6:	f04f 0900 	mov.w	r9, #0
 8005fba:	9700      	str	r7, [sp, #0]
 8005fbc:	4633      	mov	r3, r6
 8005fbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f9d8 	bl	8006378 <_printf_common>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	f040 8090 	bne.w	80060ee <_printf_float+0x1e2>
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	b00d      	add	sp, #52	; 0x34
 8005fd4:	ecbd 8b02 	vpop	{d8}
 8005fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	f7fa fdaa 	bl	8000b3c <__aeabi_dcmpun>
 8005fe8:	b140      	cbz	r0, 8005ffc <_printf_float+0xf0>
 8005fea:	464b      	mov	r3, r9
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bfbc      	itt	lt
 8005ff0:	232d      	movlt	r3, #45	; 0x2d
 8005ff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ff6:	487f      	ldr	r0, [pc, #508]	; (80061f4 <_printf_float+0x2e8>)
 8005ff8:	4b7f      	ldr	r3, [pc, #508]	; (80061f8 <_printf_float+0x2ec>)
 8005ffa:	e7d1      	b.n	8005fa0 <_printf_float+0x94>
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006002:	9206      	str	r2, [sp, #24]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	d13f      	bne.n	8006088 <_printf_float+0x17c>
 8006008:	2306      	movs	r3, #6
 800600a:	6063      	str	r3, [r4, #4]
 800600c:	9b05      	ldr	r3, [sp, #20]
 800600e:	6861      	ldr	r1, [r4, #4]
 8006010:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006014:	2300      	movs	r3, #0
 8006016:	9303      	str	r3, [sp, #12]
 8006018:	ab0a      	add	r3, sp, #40	; 0x28
 800601a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800601e:	ab09      	add	r3, sp, #36	; 0x24
 8006020:	ec49 8b10 	vmov	d0, r8, r9
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	6022      	str	r2, [r4, #0]
 8006028:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800602c:	4628      	mov	r0, r5
 800602e:	f7ff fecd 	bl	8005dcc <__cvt>
 8006032:	9b06      	ldr	r3, [sp, #24]
 8006034:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006036:	2b47      	cmp	r3, #71	; 0x47
 8006038:	4680      	mov	r8, r0
 800603a:	d108      	bne.n	800604e <_printf_float+0x142>
 800603c:	1cc8      	adds	r0, r1, #3
 800603e:	db02      	blt.n	8006046 <_printf_float+0x13a>
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	4299      	cmp	r1, r3
 8006044:	dd41      	ble.n	80060ca <_printf_float+0x1be>
 8006046:	f1ab 0b02 	sub.w	fp, fp, #2
 800604a:	fa5f fb8b 	uxtb.w	fp, fp
 800604e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006052:	d820      	bhi.n	8006096 <_printf_float+0x18a>
 8006054:	3901      	subs	r1, #1
 8006056:	465a      	mov	r2, fp
 8006058:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800605c:	9109      	str	r1, [sp, #36]	; 0x24
 800605e:	f7ff ff17 	bl	8005e90 <__exponent>
 8006062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006064:	1813      	adds	r3, r2, r0
 8006066:	2a01      	cmp	r2, #1
 8006068:	4681      	mov	r9, r0
 800606a:	6123      	str	r3, [r4, #16]
 800606c:	dc02      	bgt.n	8006074 <_printf_float+0x168>
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	07d2      	lsls	r2, r2, #31
 8006072:	d501      	bpl.n	8006078 <_printf_float+0x16c>
 8006074:	3301      	adds	r3, #1
 8006076:	6123      	str	r3, [r4, #16]
 8006078:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800607c:	2b00      	cmp	r3, #0
 800607e:	d09c      	beq.n	8005fba <_printf_float+0xae>
 8006080:	232d      	movs	r3, #45	; 0x2d
 8006082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006086:	e798      	b.n	8005fba <_printf_float+0xae>
 8006088:	9a06      	ldr	r2, [sp, #24]
 800608a:	2a47      	cmp	r2, #71	; 0x47
 800608c:	d1be      	bne.n	800600c <_printf_float+0x100>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1bc      	bne.n	800600c <_printf_float+0x100>
 8006092:	2301      	movs	r3, #1
 8006094:	e7b9      	b.n	800600a <_printf_float+0xfe>
 8006096:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800609a:	d118      	bne.n	80060ce <_printf_float+0x1c2>
 800609c:	2900      	cmp	r1, #0
 800609e:	6863      	ldr	r3, [r4, #4]
 80060a0:	dd0b      	ble.n	80060ba <_printf_float+0x1ae>
 80060a2:	6121      	str	r1, [r4, #16]
 80060a4:	b913      	cbnz	r3, 80060ac <_printf_float+0x1a0>
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	07d0      	lsls	r0, r2, #31
 80060aa:	d502      	bpl.n	80060b2 <_printf_float+0x1a6>
 80060ac:	3301      	adds	r3, #1
 80060ae:	440b      	add	r3, r1
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80060b4:	f04f 0900 	mov.w	r9, #0
 80060b8:	e7de      	b.n	8006078 <_printf_float+0x16c>
 80060ba:	b913      	cbnz	r3, 80060c2 <_printf_float+0x1b6>
 80060bc:	6822      	ldr	r2, [r4, #0]
 80060be:	07d2      	lsls	r2, r2, #31
 80060c0:	d501      	bpl.n	80060c6 <_printf_float+0x1ba>
 80060c2:	3302      	adds	r3, #2
 80060c4:	e7f4      	b.n	80060b0 <_printf_float+0x1a4>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e7f2      	b.n	80060b0 <_printf_float+0x1a4>
 80060ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d0:	4299      	cmp	r1, r3
 80060d2:	db05      	blt.n	80060e0 <_printf_float+0x1d4>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	6121      	str	r1, [r4, #16]
 80060d8:	07d8      	lsls	r0, r3, #31
 80060da:	d5ea      	bpl.n	80060b2 <_printf_float+0x1a6>
 80060dc:	1c4b      	adds	r3, r1, #1
 80060de:	e7e7      	b.n	80060b0 <_printf_float+0x1a4>
 80060e0:	2900      	cmp	r1, #0
 80060e2:	bfd4      	ite	le
 80060e4:	f1c1 0202 	rsble	r2, r1, #2
 80060e8:	2201      	movgt	r2, #1
 80060ea:	4413      	add	r3, r2
 80060ec:	e7e0      	b.n	80060b0 <_printf_float+0x1a4>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	055a      	lsls	r2, r3, #21
 80060f2:	d407      	bmi.n	8006104 <_printf_float+0x1f8>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	4642      	mov	r2, r8
 80060f8:	4631      	mov	r1, r6
 80060fa:	4628      	mov	r0, r5
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	d12c      	bne.n	800615c <_printf_float+0x250>
 8006102:	e764      	b.n	8005fce <_printf_float+0xc2>
 8006104:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006108:	f240 80e0 	bls.w	80062cc <_printf_float+0x3c0>
 800610c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006110:	2200      	movs	r2, #0
 8006112:	2300      	movs	r3, #0
 8006114:	f7fa fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006118:	2800      	cmp	r0, #0
 800611a:	d034      	beq.n	8006186 <_printf_float+0x27a>
 800611c:	4a37      	ldr	r2, [pc, #220]	; (80061fc <_printf_float+0x2f0>)
 800611e:	2301      	movs	r3, #1
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f af51 	beq.w	8005fce <_printf_float+0xc2>
 800612c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006130:	429a      	cmp	r2, r3
 8006132:	db02      	blt.n	800613a <_printf_float+0x22e>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	07d8      	lsls	r0, r3, #31
 8006138:	d510      	bpl.n	800615c <_printf_float+0x250>
 800613a:	ee18 3a10 	vmov	r3, s16
 800613e:	4652      	mov	r2, sl
 8006140:	4631      	mov	r1, r6
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	f43f af41 	beq.w	8005fce <_printf_float+0xc2>
 800614c:	f04f 0800 	mov.w	r8, #0
 8006150:	f104 091a 	add.w	r9, r4, #26
 8006154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006156:	3b01      	subs	r3, #1
 8006158:	4543      	cmp	r3, r8
 800615a:	dc09      	bgt.n	8006170 <_printf_float+0x264>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	079b      	lsls	r3, r3, #30
 8006160:	f100 8105 	bmi.w	800636e <_printf_float+0x462>
 8006164:	68e0      	ldr	r0, [r4, #12]
 8006166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006168:	4298      	cmp	r0, r3
 800616a:	bfb8      	it	lt
 800616c:	4618      	movlt	r0, r3
 800616e:	e730      	b.n	8005fd2 <_printf_float+0xc6>
 8006170:	2301      	movs	r3, #1
 8006172:	464a      	mov	r2, r9
 8006174:	4631      	mov	r1, r6
 8006176:	4628      	mov	r0, r5
 8006178:	47b8      	blx	r7
 800617a:	3001      	adds	r0, #1
 800617c:	f43f af27 	beq.w	8005fce <_printf_float+0xc2>
 8006180:	f108 0801 	add.w	r8, r8, #1
 8006184:	e7e6      	b.n	8006154 <_printf_float+0x248>
 8006186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	dc39      	bgt.n	8006200 <_printf_float+0x2f4>
 800618c:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <_printf_float+0x2f0>)
 800618e:	2301      	movs	r3, #1
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f af19 	beq.w	8005fce <_printf_float+0xc2>
 800619c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a0:	4313      	orrs	r3, r2
 80061a2:	d102      	bne.n	80061aa <_printf_float+0x29e>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	07d9      	lsls	r1, r3, #31
 80061a8:	d5d8      	bpl.n	800615c <_printf_float+0x250>
 80061aa:	ee18 3a10 	vmov	r3, s16
 80061ae:	4652      	mov	r2, sl
 80061b0:	4631      	mov	r1, r6
 80061b2:	4628      	mov	r0, r5
 80061b4:	47b8      	blx	r7
 80061b6:	3001      	adds	r0, #1
 80061b8:	f43f af09 	beq.w	8005fce <_printf_float+0xc2>
 80061bc:	f04f 0900 	mov.w	r9, #0
 80061c0:	f104 0a1a 	add.w	sl, r4, #26
 80061c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c6:	425b      	negs	r3, r3
 80061c8:	454b      	cmp	r3, r9
 80061ca:	dc01      	bgt.n	80061d0 <_printf_float+0x2c4>
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	e792      	b.n	80060f6 <_printf_float+0x1ea>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4652      	mov	r2, sl
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f aef7 	beq.w	8005fce <_printf_float+0xc2>
 80061e0:	f109 0901 	add.w	r9, r9, #1
 80061e4:	e7ee      	b.n	80061c4 <_printf_float+0x2b8>
 80061e6:	bf00      	nop
 80061e8:	7fefffff 	.word	0x7fefffff
 80061ec:	0800a740 	.word	0x0800a740
 80061f0:	0800a744 	.word	0x0800a744
 80061f4:	0800a74c 	.word	0x0800a74c
 80061f8:	0800a748 	.word	0x0800a748
 80061fc:	0800a750 	.word	0x0800a750
 8006200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006204:	429a      	cmp	r2, r3
 8006206:	bfa8      	it	ge
 8006208:	461a      	movge	r2, r3
 800620a:	2a00      	cmp	r2, #0
 800620c:	4691      	mov	r9, r2
 800620e:	dc37      	bgt.n	8006280 <_printf_float+0x374>
 8006210:	f04f 0b00 	mov.w	fp, #0
 8006214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006218:	f104 021a 	add.w	r2, r4, #26
 800621c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800621e:	9305      	str	r3, [sp, #20]
 8006220:	eba3 0309 	sub.w	r3, r3, r9
 8006224:	455b      	cmp	r3, fp
 8006226:	dc33      	bgt.n	8006290 <_printf_float+0x384>
 8006228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800622c:	429a      	cmp	r2, r3
 800622e:	db3b      	blt.n	80062a8 <_printf_float+0x39c>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	07da      	lsls	r2, r3, #31
 8006234:	d438      	bmi.n	80062a8 <_printf_float+0x39c>
 8006236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006238:	9a05      	ldr	r2, [sp, #20]
 800623a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800623c:	1a9a      	subs	r2, r3, r2
 800623e:	eba3 0901 	sub.w	r9, r3, r1
 8006242:	4591      	cmp	r9, r2
 8006244:	bfa8      	it	ge
 8006246:	4691      	movge	r9, r2
 8006248:	f1b9 0f00 	cmp.w	r9, #0
 800624c:	dc35      	bgt.n	80062ba <_printf_float+0x3ae>
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006256:	f104 0a1a 	add.w	sl, r4, #26
 800625a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	eba3 0309 	sub.w	r3, r3, r9
 8006264:	4543      	cmp	r3, r8
 8006266:	f77f af79 	ble.w	800615c <_printf_float+0x250>
 800626a:	2301      	movs	r3, #1
 800626c:	4652      	mov	r2, sl
 800626e:	4631      	mov	r1, r6
 8006270:	4628      	mov	r0, r5
 8006272:	47b8      	blx	r7
 8006274:	3001      	adds	r0, #1
 8006276:	f43f aeaa 	beq.w	8005fce <_printf_float+0xc2>
 800627a:	f108 0801 	add.w	r8, r8, #1
 800627e:	e7ec      	b.n	800625a <_printf_float+0x34e>
 8006280:	4613      	mov	r3, r2
 8006282:	4631      	mov	r1, r6
 8006284:	4642      	mov	r2, r8
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	d1c0      	bne.n	8006210 <_printf_float+0x304>
 800628e:	e69e      	b.n	8005fce <_printf_float+0xc2>
 8006290:	2301      	movs	r3, #1
 8006292:	4631      	mov	r1, r6
 8006294:	4628      	mov	r0, r5
 8006296:	9205      	str	r2, [sp, #20]
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	f43f ae97 	beq.w	8005fce <_printf_float+0xc2>
 80062a0:	9a05      	ldr	r2, [sp, #20]
 80062a2:	f10b 0b01 	add.w	fp, fp, #1
 80062a6:	e7b9      	b.n	800621c <_printf_float+0x310>
 80062a8:	ee18 3a10 	vmov	r3, s16
 80062ac:	4652      	mov	r2, sl
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	d1be      	bne.n	8006236 <_printf_float+0x32a>
 80062b8:	e689      	b.n	8005fce <_printf_float+0xc2>
 80062ba:	9a05      	ldr	r2, [sp, #20]
 80062bc:	464b      	mov	r3, r9
 80062be:	4442      	add	r2, r8
 80062c0:	4631      	mov	r1, r6
 80062c2:	4628      	mov	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	d1c1      	bne.n	800624e <_printf_float+0x342>
 80062ca:	e680      	b.n	8005fce <_printf_float+0xc2>
 80062cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ce:	2a01      	cmp	r2, #1
 80062d0:	dc01      	bgt.n	80062d6 <_printf_float+0x3ca>
 80062d2:	07db      	lsls	r3, r3, #31
 80062d4:	d538      	bpl.n	8006348 <_printf_float+0x43c>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4642      	mov	r2, r8
 80062da:	4631      	mov	r1, r6
 80062dc:	4628      	mov	r0, r5
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	f43f ae74 	beq.w	8005fce <_printf_float+0xc2>
 80062e6:	ee18 3a10 	vmov	r3, s16
 80062ea:	4652      	mov	r2, sl
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f ae6b 	beq.w	8005fce <_printf_float+0xc2>
 80062f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062fc:	2200      	movs	r2, #0
 80062fe:	2300      	movs	r3, #0
 8006300:	f7fa fbea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006304:	b9d8      	cbnz	r0, 800633e <_printf_float+0x432>
 8006306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006308:	f108 0201 	add.w	r2, r8, #1
 800630c:	3b01      	subs	r3, #1
 800630e:	4631      	mov	r1, r6
 8006310:	4628      	mov	r0, r5
 8006312:	47b8      	blx	r7
 8006314:	3001      	adds	r0, #1
 8006316:	d10e      	bne.n	8006336 <_printf_float+0x42a>
 8006318:	e659      	b.n	8005fce <_printf_float+0xc2>
 800631a:	2301      	movs	r3, #1
 800631c:	4652      	mov	r2, sl
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	f43f ae52 	beq.w	8005fce <_printf_float+0xc2>
 800632a:	f108 0801 	add.w	r8, r8, #1
 800632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006330:	3b01      	subs	r3, #1
 8006332:	4543      	cmp	r3, r8
 8006334:	dcf1      	bgt.n	800631a <_printf_float+0x40e>
 8006336:	464b      	mov	r3, r9
 8006338:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800633c:	e6dc      	b.n	80060f8 <_printf_float+0x1ec>
 800633e:	f04f 0800 	mov.w	r8, #0
 8006342:	f104 0a1a 	add.w	sl, r4, #26
 8006346:	e7f2      	b.n	800632e <_printf_float+0x422>
 8006348:	2301      	movs	r3, #1
 800634a:	4642      	mov	r2, r8
 800634c:	e7df      	b.n	800630e <_printf_float+0x402>
 800634e:	2301      	movs	r3, #1
 8006350:	464a      	mov	r2, r9
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f ae38 	beq.w	8005fce <_printf_float+0xc2>
 800635e:	f108 0801 	add.w	r8, r8, #1
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006366:	1a5b      	subs	r3, r3, r1
 8006368:	4543      	cmp	r3, r8
 800636a:	dcf0      	bgt.n	800634e <_printf_float+0x442>
 800636c:	e6fa      	b.n	8006164 <_printf_float+0x258>
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	f104 0919 	add.w	r9, r4, #25
 8006376:	e7f4      	b.n	8006362 <_printf_float+0x456>

08006378 <_printf_common>:
 8006378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	4616      	mov	r6, r2
 800637e:	4699      	mov	r9, r3
 8006380:	688a      	ldr	r2, [r1, #8]
 8006382:	690b      	ldr	r3, [r1, #16]
 8006384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006388:	4293      	cmp	r3, r2
 800638a:	bfb8      	it	lt
 800638c:	4613      	movlt	r3, r2
 800638e:	6033      	str	r3, [r6, #0]
 8006390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006394:	4607      	mov	r7, r0
 8006396:	460c      	mov	r4, r1
 8006398:	b10a      	cbz	r2, 800639e <_printf_common+0x26>
 800639a:	3301      	adds	r3, #1
 800639c:	6033      	str	r3, [r6, #0]
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	0699      	lsls	r1, r3, #26
 80063a2:	bf42      	ittt	mi
 80063a4:	6833      	ldrmi	r3, [r6, #0]
 80063a6:	3302      	addmi	r3, #2
 80063a8:	6033      	strmi	r3, [r6, #0]
 80063aa:	6825      	ldr	r5, [r4, #0]
 80063ac:	f015 0506 	ands.w	r5, r5, #6
 80063b0:	d106      	bne.n	80063c0 <_printf_common+0x48>
 80063b2:	f104 0a19 	add.w	sl, r4, #25
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	6832      	ldr	r2, [r6, #0]
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	42ab      	cmp	r3, r5
 80063be:	dc26      	bgt.n	800640e <_printf_common+0x96>
 80063c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c4:	1e13      	subs	r3, r2, #0
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	bf18      	it	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	0692      	lsls	r2, r2, #26
 80063ce:	d42b      	bmi.n	8006428 <_printf_common+0xb0>
 80063d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d4:	4649      	mov	r1, r9
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c0      	blx	r8
 80063da:	3001      	adds	r0, #1
 80063dc:	d01e      	beq.n	800641c <_printf_common+0xa4>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	68e5      	ldr	r5, [r4, #12]
 80063e2:	6832      	ldr	r2, [r6, #0]
 80063e4:	f003 0306 	and.w	r3, r3, #6
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	bf08      	it	eq
 80063ec:	1aad      	subeq	r5, r5, r2
 80063ee:	68a3      	ldr	r3, [r4, #8]
 80063f0:	6922      	ldr	r2, [r4, #16]
 80063f2:	bf0c      	ite	eq
 80063f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f8:	2500      	movne	r5, #0
 80063fa:	4293      	cmp	r3, r2
 80063fc:	bfc4      	itt	gt
 80063fe:	1a9b      	subgt	r3, r3, r2
 8006400:	18ed      	addgt	r5, r5, r3
 8006402:	2600      	movs	r6, #0
 8006404:	341a      	adds	r4, #26
 8006406:	42b5      	cmp	r5, r6
 8006408:	d11a      	bne.n	8006440 <_printf_common+0xc8>
 800640a:	2000      	movs	r0, #0
 800640c:	e008      	b.n	8006420 <_printf_common+0xa8>
 800640e:	2301      	movs	r3, #1
 8006410:	4652      	mov	r2, sl
 8006412:	4649      	mov	r1, r9
 8006414:	4638      	mov	r0, r7
 8006416:	47c0      	blx	r8
 8006418:	3001      	adds	r0, #1
 800641a:	d103      	bne.n	8006424 <_printf_common+0xac>
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	3501      	adds	r5, #1
 8006426:	e7c6      	b.n	80063b6 <_printf_common+0x3e>
 8006428:	18e1      	adds	r1, r4, r3
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	2030      	movs	r0, #48	; 0x30
 800642e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006432:	4422      	add	r2, r4
 8006434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800643c:	3302      	adds	r3, #2
 800643e:	e7c7      	b.n	80063d0 <_printf_common+0x58>
 8006440:	2301      	movs	r3, #1
 8006442:	4622      	mov	r2, r4
 8006444:	4649      	mov	r1, r9
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d0e6      	beq.n	800641c <_printf_common+0xa4>
 800644e:	3601      	adds	r6, #1
 8006450:	e7d9      	b.n	8006406 <_printf_common+0x8e>
	...

08006454 <_printf_i>:
 8006454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006458:	7e0f      	ldrb	r7, [r1, #24]
 800645a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800645c:	2f78      	cmp	r7, #120	; 0x78
 800645e:	4691      	mov	r9, r2
 8006460:	4680      	mov	r8, r0
 8006462:	460c      	mov	r4, r1
 8006464:	469a      	mov	sl, r3
 8006466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800646a:	d807      	bhi.n	800647c <_printf_i+0x28>
 800646c:	2f62      	cmp	r7, #98	; 0x62
 800646e:	d80a      	bhi.n	8006486 <_printf_i+0x32>
 8006470:	2f00      	cmp	r7, #0
 8006472:	f000 80d8 	beq.w	8006626 <_printf_i+0x1d2>
 8006476:	2f58      	cmp	r7, #88	; 0x58
 8006478:	f000 80a3 	beq.w	80065c2 <_printf_i+0x16e>
 800647c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006484:	e03a      	b.n	80064fc <_printf_i+0xa8>
 8006486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800648a:	2b15      	cmp	r3, #21
 800648c:	d8f6      	bhi.n	800647c <_printf_i+0x28>
 800648e:	a101      	add	r1, pc, #4	; (adr r1, 8006494 <_printf_i+0x40>)
 8006490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006494:	080064ed 	.word	0x080064ed
 8006498:	08006501 	.word	0x08006501
 800649c:	0800647d 	.word	0x0800647d
 80064a0:	0800647d 	.word	0x0800647d
 80064a4:	0800647d 	.word	0x0800647d
 80064a8:	0800647d 	.word	0x0800647d
 80064ac:	08006501 	.word	0x08006501
 80064b0:	0800647d 	.word	0x0800647d
 80064b4:	0800647d 	.word	0x0800647d
 80064b8:	0800647d 	.word	0x0800647d
 80064bc:	0800647d 	.word	0x0800647d
 80064c0:	0800660d 	.word	0x0800660d
 80064c4:	08006531 	.word	0x08006531
 80064c8:	080065ef 	.word	0x080065ef
 80064cc:	0800647d 	.word	0x0800647d
 80064d0:	0800647d 	.word	0x0800647d
 80064d4:	0800662f 	.word	0x0800662f
 80064d8:	0800647d 	.word	0x0800647d
 80064dc:	08006531 	.word	0x08006531
 80064e0:	0800647d 	.word	0x0800647d
 80064e4:	0800647d 	.word	0x0800647d
 80064e8:	080065f7 	.word	0x080065f7
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	1d1a      	adds	r2, r3, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	602a      	str	r2, [r5, #0]
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0a3      	b.n	8006648 <_printf_i+0x1f4>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	6829      	ldr	r1, [r5, #0]
 8006504:	0606      	lsls	r6, r0, #24
 8006506:	f101 0304 	add.w	r3, r1, #4
 800650a:	d50a      	bpl.n	8006522 <_printf_i+0xce>
 800650c:	680e      	ldr	r6, [r1, #0]
 800650e:	602b      	str	r3, [r5, #0]
 8006510:	2e00      	cmp	r6, #0
 8006512:	da03      	bge.n	800651c <_printf_i+0xc8>
 8006514:	232d      	movs	r3, #45	; 0x2d
 8006516:	4276      	negs	r6, r6
 8006518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800651c:	485e      	ldr	r0, [pc, #376]	; (8006698 <_printf_i+0x244>)
 800651e:	230a      	movs	r3, #10
 8006520:	e019      	b.n	8006556 <_printf_i+0x102>
 8006522:	680e      	ldr	r6, [r1, #0]
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	f010 0f40 	tst.w	r0, #64	; 0x40
 800652a:	bf18      	it	ne
 800652c:	b236      	sxthne	r6, r6
 800652e:	e7ef      	b.n	8006510 <_printf_i+0xbc>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	6820      	ldr	r0, [r4, #0]
 8006534:	1d19      	adds	r1, r3, #4
 8006536:	6029      	str	r1, [r5, #0]
 8006538:	0601      	lsls	r1, r0, #24
 800653a:	d501      	bpl.n	8006540 <_printf_i+0xec>
 800653c:	681e      	ldr	r6, [r3, #0]
 800653e:	e002      	b.n	8006546 <_printf_i+0xf2>
 8006540:	0646      	lsls	r6, r0, #25
 8006542:	d5fb      	bpl.n	800653c <_printf_i+0xe8>
 8006544:	881e      	ldrh	r6, [r3, #0]
 8006546:	4854      	ldr	r0, [pc, #336]	; (8006698 <_printf_i+0x244>)
 8006548:	2f6f      	cmp	r7, #111	; 0x6f
 800654a:	bf0c      	ite	eq
 800654c:	2308      	moveq	r3, #8
 800654e:	230a      	movne	r3, #10
 8006550:	2100      	movs	r1, #0
 8006552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006556:	6865      	ldr	r5, [r4, #4]
 8006558:	60a5      	str	r5, [r4, #8]
 800655a:	2d00      	cmp	r5, #0
 800655c:	bfa2      	ittt	ge
 800655e:	6821      	ldrge	r1, [r4, #0]
 8006560:	f021 0104 	bicge.w	r1, r1, #4
 8006564:	6021      	strge	r1, [r4, #0]
 8006566:	b90e      	cbnz	r6, 800656c <_printf_i+0x118>
 8006568:	2d00      	cmp	r5, #0
 800656a:	d04d      	beq.n	8006608 <_printf_i+0x1b4>
 800656c:	4615      	mov	r5, r2
 800656e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006572:	fb03 6711 	mls	r7, r3, r1, r6
 8006576:	5dc7      	ldrb	r7, [r0, r7]
 8006578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800657c:	4637      	mov	r7, r6
 800657e:	42bb      	cmp	r3, r7
 8006580:	460e      	mov	r6, r1
 8006582:	d9f4      	bls.n	800656e <_printf_i+0x11a>
 8006584:	2b08      	cmp	r3, #8
 8006586:	d10b      	bne.n	80065a0 <_printf_i+0x14c>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	07de      	lsls	r6, r3, #31
 800658c:	d508      	bpl.n	80065a0 <_printf_i+0x14c>
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	6861      	ldr	r1, [r4, #4]
 8006592:	4299      	cmp	r1, r3
 8006594:	bfde      	ittt	le
 8006596:	2330      	movle	r3, #48	; 0x30
 8006598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800659c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065a0:	1b52      	subs	r2, r2, r5
 80065a2:	6122      	str	r2, [r4, #16]
 80065a4:	f8cd a000 	str.w	sl, [sp]
 80065a8:	464b      	mov	r3, r9
 80065aa:	aa03      	add	r2, sp, #12
 80065ac:	4621      	mov	r1, r4
 80065ae:	4640      	mov	r0, r8
 80065b0:	f7ff fee2 	bl	8006378 <_printf_common>
 80065b4:	3001      	adds	r0, #1
 80065b6:	d14c      	bne.n	8006652 <_printf_i+0x1fe>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	b004      	add	sp, #16
 80065be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c2:	4835      	ldr	r0, [pc, #212]	; (8006698 <_printf_i+0x244>)
 80065c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065c8:	6829      	ldr	r1, [r5, #0]
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80065d0:	6029      	str	r1, [r5, #0]
 80065d2:	061d      	lsls	r5, r3, #24
 80065d4:	d514      	bpl.n	8006600 <_printf_i+0x1ac>
 80065d6:	07df      	lsls	r7, r3, #31
 80065d8:	bf44      	itt	mi
 80065da:	f043 0320 	orrmi.w	r3, r3, #32
 80065de:	6023      	strmi	r3, [r4, #0]
 80065e0:	b91e      	cbnz	r6, 80065ea <_printf_i+0x196>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f023 0320 	bic.w	r3, r3, #32
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	2310      	movs	r3, #16
 80065ec:	e7b0      	b.n	8006550 <_printf_i+0xfc>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	f043 0320 	orr.w	r3, r3, #32
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	2378      	movs	r3, #120	; 0x78
 80065f8:	4828      	ldr	r0, [pc, #160]	; (800669c <_printf_i+0x248>)
 80065fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065fe:	e7e3      	b.n	80065c8 <_printf_i+0x174>
 8006600:	0659      	lsls	r1, r3, #25
 8006602:	bf48      	it	mi
 8006604:	b2b6      	uxthmi	r6, r6
 8006606:	e7e6      	b.n	80065d6 <_printf_i+0x182>
 8006608:	4615      	mov	r5, r2
 800660a:	e7bb      	b.n	8006584 <_printf_i+0x130>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	6826      	ldr	r6, [r4, #0]
 8006610:	6961      	ldr	r1, [r4, #20]
 8006612:	1d18      	adds	r0, r3, #4
 8006614:	6028      	str	r0, [r5, #0]
 8006616:	0635      	lsls	r5, r6, #24
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	d501      	bpl.n	8006620 <_printf_i+0x1cc>
 800661c:	6019      	str	r1, [r3, #0]
 800661e:	e002      	b.n	8006626 <_printf_i+0x1d2>
 8006620:	0670      	lsls	r0, r6, #25
 8006622:	d5fb      	bpl.n	800661c <_printf_i+0x1c8>
 8006624:	8019      	strh	r1, [r3, #0]
 8006626:	2300      	movs	r3, #0
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	4615      	mov	r5, r2
 800662c:	e7ba      	b.n	80065a4 <_printf_i+0x150>
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	1d1a      	adds	r2, r3, #4
 8006632:	602a      	str	r2, [r5, #0]
 8006634:	681d      	ldr	r5, [r3, #0]
 8006636:	6862      	ldr	r2, [r4, #4]
 8006638:	2100      	movs	r1, #0
 800663a:	4628      	mov	r0, r5
 800663c:	f7f9 fdd8 	bl	80001f0 <memchr>
 8006640:	b108      	cbz	r0, 8006646 <_printf_i+0x1f2>
 8006642:	1b40      	subs	r0, r0, r5
 8006644:	6060      	str	r0, [r4, #4]
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	2300      	movs	r3, #0
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	e7a8      	b.n	80065a4 <_printf_i+0x150>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	462a      	mov	r2, r5
 8006656:	4649      	mov	r1, r9
 8006658:	4640      	mov	r0, r8
 800665a:	47d0      	blx	sl
 800665c:	3001      	adds	r0, #1
 800665e:	d0ab      	beq.n	80065b8 <_printf_i+0x164>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	079b      	lsls	r3, r3, #30
 8006664:	d413      	bmi.n	800668e <_printf_i+0x23a>
 8006666:	68e0      	ldr	r0, [r4, #12]
 8006668:	9b03      	ldr	r3, [sp, #12]
 800666a:	4298      	cmp	r0, r3
 800666c:	bfb8      	it	lt
 800666e:	4618      	movlt	r0, r3
 8006670:	e7a4      	b.n	80065bc <_printf_i+0x168>
 8006672:	2301      	movs	r3, #1
 8006674:	4632      	mov	r2, r6
 8006676:	4649      	mov	r1, r9
 8006678:	4640      	mov	r0, r8
 800667a:	47d0      	blx	sl
 800667c:	3001      	adds	r0, #1
 800667e:	d09b      	beq.n	80065b8 <_printf_i+0x164>
 8006680:	3501      	adds	r5, #1
 8006682:	68e3      	ldr	r3, [r4, #12]
 8006684:	9903      	ldr	r1, [sp, #12]
 8006686:	1a5b      	subs	r3, r3, r1
 8006688:	42ab      	cmp	r3, r5
 800668a:	dcf2      	bgt.n	8006672 <_printf_i+0x21e>
 800668c:	e7eb      	b.n	8006666 <_printf_i+0x212>
 800668e:	2500      	movs	r5, #0
 8006690:	f104 0619 	add.w	r6, r4, #25
 8006694:	e7f5      	b.n	8006682 <_printf_i+0x22e>
 8006696:	bf00      	nop
 8006698:	0800a752 	.word	0x0800a752
 800669c:	0800a763 	.word	0x0800a763

080066a0 <_scanf_float>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	b087      	sub	sp, #28
 80066a6:	4617      	mov	r7, r2
 80066a8:	9303      	str	r3, [sp, #12]
 80066aa:	688b      	ldr	r3, [r1, #8]
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80066b2:	bf83      	ittte	hi
 80066b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066b8:	195b      	addhi	r3, r3, r5
 80066ba:	9302      	strhi	r3, [sp, #8]
 80066bc:	2300      	movls	r3, #0
 80066be:	bf86      	itte	hi
 80066c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80066c4:	608b      	strhi	r3, [r1, #8]
 80066c6:	9302      	strls	r3, [sp, #8]
 80066c8:	680b      	ldr	r3, [r1, #0]
 80066ca:	468b      	mov	fp, r1
 80066cc:	2500      	movs	r5, #0
 80066ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80066d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80066d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066da:	4680      	mov	r8, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	465e      	mov	r6, fp
 80066e0:	46aa      	mov	sl, r5
 80066e2:	46a9      	mov	r9, r5
 80066e4:	9501      	str	r5, [sp, #4]
 80066e6:	68a2      	ldr	r2, [r4, #8]
 80066e8:	b152      	cbz	r2, 8006700 <_scanf_float+0x60>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b4e      	cmp	r3, #78	; 0x4e
 80066f0:	d864      	bhi.n	80067bc <_scanf_float+0x11c>
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d83c      	bhi.n	8006770 <_scanf_float+0xd0>
 80066f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80066fa:	b2c8      	uxtb	r0, r1
 80066fc:	280e      	cmp	r0, #14
 80066fe:	d93a      	bls.n	8006776 <_scanf_float+0xd6>
 8006700:	f1b9 0f00 	cmp.w	r9, #0
 8006704:	d003      	beq.n	800670e <_scanf_float+0x6e>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006712:	f1ba 0f01 	cmp.w	sl, #1
 8006716:	f200 8113 	bhi.w	8006940 <_scanf_float+0x2a0>
 800671a:	455e      	cmp	r6, fp
 800671c:	f200 8105 	bhi.w	800692a <_scanf_float+0x28a>
 8006720:	2501      	movs	r5, #1
 8006722:	4628      	mov	r0, r5
 8006724:	b007      	add	sp, #28
 8006726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800672e:	2a0d      	cmp	r2, #13
 8006730:	d8e6      	bhi.n	8006700 <_scanf_float+0x60>
 8006732:	a101      	add	r1, pc, #4	; (adr r1, 8006738 <_scanf_float+0x98>)
 8006734:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006738:	08006877 	.word	0x08006877
 800673c:	08006701 	.word	0x08006701
 8006740:	08006701 	.word	0x08006701
 8006744:	08006701 	.word	0x08006701
 8006748:	080068d7 	.word	0x080068d7
 800674c:	080068af 	.word	0x080068af
 8006750:	08006701 	.word	0x08006701
 8006754:	08006701 	.word	0x08006701
 8006758:	08006885 	.word	0x08006885
 800675c:	08006701 	.word	0x08006701
 8006760:	08006701 	.word	0x08006701
 8006764:	08006701 	.word	0x08006701
 8006768:	08006701 	.word	0x08006701
 800676c:	0800683d 	.word	0x0800683d
 8006770:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006774:	e7db      	b.n	800672e <_scanf_float+0x8e>
 8006776:	290e      	cmp	r1, #14
 8006778:	d8c2      	bhi.n	8006700 <_scanf_float+0x60>
 800677a:	a001      	add	r0, pc, #4	; (adr r0, 8006780 <_scanf_float+0xe0>)
 800677c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006780:	0800682f 	.word	0x0800682f
 8006784:	08006701 	.word	0x08006701
 8006788:	0800682f 	.word	0x0800682f
 800678c:	080068c3 	.word	0x080068c3
 8006790:	08006701 	.word	0x08006701
 8006794:	080067dd 	.word	0x080067dd
 8006798:	08006819 	.word	0x08006819
 800679c:	08006819 	.word	0x08006819
 80067a0:	08006819 	.word	0x08006819
 80067a4:	08006819 	.word	0x08006819
 80067a8:	08006819 	.word	0x08006819
 80067ac:	08006819 	.word	0x08006819
 80067b0:	08006819 	.word	0x08006819
 80067b4:	08006819 	.word	0x08006819
 80067b8:	08006819 	.word	0x08006819
 80067bc:	2b6e      	cmp	r3, #110	; 0x6e
 80067be:	d809      	bhi.n	80067d4 <_scanf_float+0x134>
 80067c0:	2b60      	cmp	r3, #96	; 0x60
 80067c2:	d8b2      	bhi.n	800672a <_scanf_float+0x8a>
 80067c4:	2b54      	cmp	r3, #84	; 0x54
 80067c6:	d077      	beq.n	80068b8 <_scanf_float+0x218>
 80067c8:	2b59      	cmp	r3, #89	; 0x59
 80067ca:	d199      	bne.n	8006700 <_scanf_float+0x60>
 80067cc:	2d07      	cmp	r5, #7
 80067ce:	d197      	bne.n	8006700 <_scanf_float+0x60>
 80067d0:	2508      	movs	r5, #8
 80067d2:	e029      	b.n	8006828 <_scanf_float+0x188>
 80067d4:	2b74      	cmp	r3, #116	; 0x74
 80067d6:	d06f      	beq.n	80068b8 <_scanf_float+0x218>
 80067d8:	2b79      	cmp	r3, #121	; 0x79
 80067da:	e7f6      	b.n	80067ca <_scanf_float+0x12a>
 80067dc:	6821      	ldr	r1, [r4, #0]
 80067de:	05c8      	lsls	r0, r1, #23
 80067e0:	d51a      	bpl.n	8006818 <_scanf_float+0x178>
 80067e2:	9b02      	ldr	r3, [sp, #8]
 80067e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80067e8:	6021      	str	r1, [r4, #0]
 80067ea:	f109 0901 	add.w	r9, r9, #1
 80067ee:	b11b      	cbz	r3, 80067f8 <_scanf_float+0x158>
 80067f0:	3b01      	subs	r3, #1
 80067f2:	3201      	adds	r2, #1
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	60a2      	str	r2, [r4, #8]
 80067f8:	68a3      	ldr	r3, [r4, #8]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	3301      	adds	r3, #1
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3b01      	subs	r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	f340 8084 	ble.w	8006918 <_scanf_float+0x278>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	3301      	adds	r3, #1
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	e766      	b.n	80066e6 <_scanf_float+0x46>
 8006818:	eb1a 0f05 	cmn.w	sl, r5
 800681c:	f47f af70 	bne.w	8006700 <_scanf_float+0x60>
 8006820:	6822      	ldr	r2, [r4, #0]
 8006822:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	f806 3b01 	strb.w	r3, [r6], #1
 800682c:	e7e4      	b.n	80067f8 <_scanf_float+0x158>
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	0610      	lsls	r0, r2, #24
 8006832:	f57f af65 	bpl.w	8006700 <_scanf_float+0x60>
 8006836:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800683a:	e7f4      	b.n	8006826 <_scanf_float+0x186>
 800683c:	f1ba 0f00 	cmp.w	sl, #0
 8006840:	d10e      	bne.n	8006860 <_scanf_float+0x1c0>
 8006842:	f1b9 0f00 	cmp.w	r9, #0
 8006846:	d10e      	bne.n	8006866 <_scanf_float+0x1c6>
 8006848:	6822      	ldr	r2, [r4, #0]
 800684a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800684e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006852:	d108      	bne.n	8006866 <_scanf_float+0x1c6>
 8006854:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006858:	6022      	str	r2, [r4, #0]
 800685a:	f04f 0a01 	mov.w	sl, #1
 800685e:	e7e3      	b.n	8006828 <_scanf_float+0x188>
 8006860:	f1ba 0f02 	cmp.w	sl, #2
 8006864:	d055      	beq.n	8006912 <_scanf_float+0x272>
 8006866:	2d01      	cmp	r5, #1
 8006868:	d002      	beq.n	8006870 <_scanf_float+0x1d0>
 800686a:	2d04      	cmp	r5, #4
 800686c:	f47f af48 	bne.w	8006700 <_scanf_float+0x60>
 8006870:	3501      	adds	r5, #1
 8006872:	b2ed      	uxtb	r5, r5
 8006874:	e7d8      	b.n	8006828 <_scanf_float+0x188>
 8006876:	f1ba 0f01 	cmp.w	sl, #1
 800687a:	f47f af41 	bne.w	8006700 <_scanf_float+0x60>
 800687e:	f04f 0a02 	mov.w	sl, #2
 8006882:	e7d1      	b.n	8006828 <_scanf_float+0x188>
 8006884:	b97d      	cbnz	r5, 80068a6 <_scanf_float+0x206>
 8006886:	f1b9 0f00 	cmp.w	r9, #0
 800688a:	f47f af3c 	bne.w	8006706 <_scanf_float+0x66>
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006894:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006898:	f47f af39 	bne.w	800670e <_scanf_float+0x6e>
 800689c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	2501      	movs	r5, #1
 80068a4:	e7c0      	b.n	8006828 <_scanf_float+0x188>
 80068a6:	2d03      	cmp	r5, #3
 80068a8:	d0e2      	beq.n	8006870 <_scanf_float+0x1d0>
 80068aa:	2d05      	cmp	r5, #5
 80068ac:	e7de      	b.n	800686c <_scanf_float+0x1cc>
 80068ae:	2d02      	cmp	r5, #2
 80068b0:	f47f af26 	bne.w	8006700 <_scanf_float+0x60>
 80068b4:	2503      	movs	r5, #3
 80068b6:	e7b7      	b.n	8006828 <_scanf_float+0x188>
 80068b8:	2d06      	cmp	r5, #6
 80068ba:	f47f af21 	bne.w	8006700 <_scanf_float+0x60>
 80068be:	2507      	movs	r5, #7
 80068c0:	e7b2      	b.n	8006828 <_scanf_float+0x188>
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	0591      	lsls	r1, r2, #22
 80068c6:	f57f af1b 	bpl.w	8006700 <_scanf_float+0x60>
 80068ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80068d4:	e7a8      	b.n	8006828 <_scanf_float+0x188>
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80068dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80068e0:	d006      	beq.n	80068f0 <_scanf_float+0x250>
 80068e2:	0550      	lsls	r0, r2, #21
 80068e4:	f57f af0c 	bpl.w	8006700 <_scanf_float+0x60>
 80068e8:	f1b9 0f00 	cmp.w	r9, #0
 80068ec:	f43f af0f 	beq.w	800670e <_scanf_float+0x6e>
 80068f0:	0591      	lsls	r1, r2, #22
 80068f2:	bf58      	it	pl
 80068f4:	9901      	ldrpl	r1, [sp, #4]
 80068f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068fa:	bf58      	it	pl
 80068fc:	eba9 0101 	subpl.w	r1, r9, r1
 8006900:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006904:	bf58      	it	pl
 8006906:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	f04f 0900 	mov.w	r9, #0
 8006910:	e78a      	b.n	8006828 <_scanf_float+0x188>
 8006912:	f04f 0a03 	mov.w	sl, #3
 8006916:	e787      	b.n	8006828 <_scanf_float+0x188>
 8006918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800691c:	4639      	mov	r1, r7
 800691e:	4640      	mov	r0, r8
 8006920:	4798      	blx	r3
 8006922:	2800      	cmp	r0, #0
 8006924:	f43f aedf 	beq.w	80066e6 <_scanf_float+0x46>
 8006928:	e6ea      	b.n	8006700 <_scanf_float+0x60>
 800692a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800692e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006932:	463a      	mov	r2, r7
 8006934:	4640      	mov	r0, r8
 8006936:	4798      	blx	r3
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	3b01      	subs	r3, #1
 800693c:	6123      	str	r3, [r4, #16]
 800693e:	e6ec      	b.n	800671a <_scanf_float+0x7a>
 8006940:	1e6b      	subs	r3, r5, #1
 8006942:	2b06      	cmp	r3, #6
 8006944:	d825      	bhi.n	8006992 <_scanf_float+0x2f2>
 8006946:	2d02      	cmp	r5, #2
 8006948:	d836      	bhi.n	80069b8 <_scanf_float+0x318>
 800694a:	455e      	cmp	r6, fp
 800694c:	f67f aee8 	bls.w	8006720 <_scanf_float+0x80>
 8006950:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006954:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006958:	463a      	mov	r2, r7
 800695a:	4640      	mov	r0, r8
 800695c:	4798      	blx	r3
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	3b01      	subs	r3, #1
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	e7f1      	b.n	800694a <_scanf_float+0x2aa>
 8006966:	9802      	ldr	r0, [sp, #8]
 8006968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800696c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006970:	9002      	str	r0, [sp, #8]
 8006972:	463a      	mov	r2, r7
 8006974:	4640      	mov	r0, r8
 8006976:	4798      	blx	r3
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	3b01      	subs	r3, #1
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006982:	fa5f fa8a 	uxtb.w	sl, sl
 8006986:	f1ba 0f02 	cmp.w	sl, #2
 800698a:	d1ec      	bne.n	8006966 <_scanf_float+0x2c6>
 800698c:	3d03      	subs	r5, #3
 800698e:	b2ed      	uxtb	r5, r5
 8006990:	1b76      	subs	r6, r6, r5
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	05da      	lsls	r2, r3, #23
 8006996:	d52f      	bpl.n	80069f8 <_scanf_float+0x358>
 8006998:	055b      	lsls	r3, r3, #21
 800699a:	d510      	bpl.n	80069be <_scanf_float+0x31e>
 800699c:	455e      	cmp	r6, fp
 800699e:	f67f aebf 	bls.w	8006720 <_scanf_float+0x80>
 80069a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069aa:	463a      	mov	r2, r7
 80069ac:	4640      	mov	r0, r8
 80069ae:	4798      	blx	r3
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	e7f1      	b.n	800699c <_scanf_float+0x2fc>
 80069b8:	46aa      	mov	sl, r5
 80069ba:	9602      	str	r6, [sp, #8]
 80069bc:	e7df      	b.n	800697e <_scanf_float+0x2de>
 80069be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	2965      	cmp	r1, #101	; 0x65
 80069c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80069ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	d00c      	beq.n	80069ec <_scanf_float+0x34c>
 80069d2:	2945      	cmp	r1, #69	; 0x45
 80069d4:	d00a      	beq.n	80069ec <_scanf_float+0x34c>
 80069d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069da:	463a      	mov	r2, r7
 80069dc:	4640      	mov	r0, r8
 80069de:	4798      	blx	r3
 80069e0:	6923      	ldr	r3, [r4, #16]
 80069e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	1eb5      	subs	r5, r6, #2
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069f0:	463a      	mov	r2, r7
 80069f2:	4640      	mov	r0, r8
 80069f4:	4798      	blx	r3
 80069f6:	462e      	mov	r6, r5
 80069f8:	6825      	ldr	r5, [r4, #0]
 80069fa:	f015 0510 	ands.w	r5, r5, #16
 80069fe:	d159      	bne.n	8006ab4 <_scanf_float+0x414>
 8006a00:	7035      	strb	r5, [r6, #0]
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0c:	d11b      	bne.n	8006a46 <_scanf_float+0x3a6>
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	454b      	cmp	r3, r9
 8006a12:	eba3 0209 	sub.w	r2, r3, r9
 8006a16:	d123      	bne.n	8006a60 <_scanf_float+0x3c0>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	f000 feb1 	bl	8007784 <_strtod_r>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	f012 0f02 	tst.w	r2, #2
 8006a2a:	ec57 6b10 	vmov	r6, r7, d0
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	d021      	beq.n	8006a76 <_scanf_float+0x3d6>
 8006a32:	9903      	ldr	r1, [sp, #12]
 8006a34:	1d1a      	adds	r2, r3, #4
 8006a36:	600a      	str	r2, [r1, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	e9c3 6700 	strd	r6, r7, [r3]
 8006a3e:	68e3      	ldr	r3, [r4, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60e3      	str	r3, [r4, #12]
 8006a44:	e66d      	b.n	8006722 <_scanf_float+0x82>
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0e5      	beq.n	8006a18 <_scanf_float+0x378>
 8006a4c:	9905      	ldr	r1, [sp, #20]
 8006a4e:	230a      	movs	r3, #10
 8006a50:	462a      	mov	r2, r5
 8006a52:	3101      	adds	r1, #1
 8006a54:	4640      	mov	r0, r8
 8006a56:	f000 ff1d 	bl	8007894 <_strtol_r>
 8006a5a:	9b04      	ldr	r3, [sp, #16]
 8006a5c:	9e05      	ldr	r6, [sp, #20]
 8006a5e:	1ac2      	subs	r2, r0, r3
 8006a60:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006a64:	429e      	cmp	r6, r3
 8006a66:	bf28      	it	cs
 8006a68:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006a6c:	4912      	ldr	r1, [pc, #72]	; (8006ab8 <_scanf_float+0x418>)
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f000 f844 	bl	8006afc <siprintf>
 8006a74:	e7d0      	b.n	8006a18 <_scanf_float+0x378>
 8006a76:	9903      	ldr	r1, [sp, #12]
 8006a78:	f012 0f04 	tst.w	r2, #4
 8006a7c:	f103 0204 	add.w	r2, r3, #4
 8006a80:	600a      	str	r2, [r1, #0]
 8006a82:	d1d9      	bne.n	8006a38 <_scanf_float+0x398>
 8006a84:	f8d3 8000 	ldr.w	r8, [r3]
 8006a88:	ee10 2a10 	vmov	r2, s0
 8006a8c:	ee10 0a10 	vmov	r0, s0
 8006a90:	463b      	mov	r3, r7
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7fa f852 	bl	8000b3c <__aeabi_dcmpun>
 8006a98:	b128      	cbz	r0, 8006aa6 <_scanf_float+0x406>
 8006a9a:	4808      	ldr	r0, [pc, #32]	; (8006abc <_scanf_float+0x41c>)
 8006a9c:	f000 f828 	bl	8006af0 <nanf>
 8006aa0:	ed88 0a00 	vstr	s0, [r8]
 8006aa4:	e7cb      	b.n	8006a3e <_scanf_float+0x39e>
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	f7fa f8a5 	bl	8000bf8 <__aeabi_d2f>
 8006aae:	f8c8 0000 	str.w	r0, [r8]
 8006ab2:	e7c4      	b.n	8006a3e <_scanf_float+0x39e>
 8006ab4:	2500      	movs	r5, #0
 8006ab6:	e634      	b.n	8006722 <_scanf_float+0x82>
 8006ab8:	0800a774 	.word	0x0800a774
 8006abc:	0800abe8 	.word	0x0800abe8

08006ac0 <iprintf>:
 8006ac0:	b40f      	push	{r0, r1, r2, r3}
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <iprintf+0x2c>)
 8006ac4:	b513      	push	{r0, r1, r4, lr}
 8006ac6:	681c      	ldr	r4, [r3, #0]
 8006ac8:	b124      	cbz	r4, 8006ad4 <iprintf+0x14>
 8006aca:	69a3      	ldr	r3, [r4, #24]
 8006acc:	b913      	cbnz	r3, 8006ad4 <iprintf+0x14>
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f001 fdb4 	bl	800863c <__sinit>
 8006ad4:	ab05      	add	r3, sp, #20
 8006ad6:	9a04      	ldr	r2, [sp, #16]
 8006ad8:	68a1      	ldr	r1, [r4, #8]
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	4620      	mov	r0, r4
 8006ade:	f003 f919 	bl	8009d14 <_vfiprintf_r>
 8006ae2:	b002      	add	sp, #8
 8006ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae8:	b004      	add	sp, #16
 8006aea:	4770      	bx	lr
 8006aec:	20000010 	.word	0x20000010

08006af0 <nanf>:
 8006af0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006af8 <nanf+0x8>
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	7fc00000 	.word	0x7fc00000

08006afc <siprintf>:
 8006afc:	b40e      	push	{r1, r2, r3}
 8006afe:	b500      	push	{lr}
 8006b00:	b09c      	sub	sp, #112	; 0x70
 8006b02:	ab1d      	add	r3, sp, #116	; 0x74
 8006b04:	9002      	str	r0, [sp, #8]
 8006b06:	9006      	str	r0, [sp, #24]
 8006b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <siprintf+0x38>)
 8006b0e:	9107      	str	r1, [sp, #28]
 8006b10:	9104      	str	r1, [sp, #16]
 8006b12:	4909      	ldr	r1, [pc, #36]	; (8006b38 <siprintf+0x3c>)
 8006b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b18:	9105      	str	r1, [sp, #20]
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	a902      	add	r1, sp, #8
 8006b20:	f002 ffce 	bl	8009ac0 <_svfiprintf_r>
 8006b24:	9b02      	ldr	r3, [sp, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	b01c      	add	sp, #112	; 0x70
 8006b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b30:	b003      	add	sp, #12
 8006b32:	4770      	bx	lr
 8006b34:	20000010 	.word	0x20000010
 8006b38:	ffff0208 	.word	0xffff0208

08006b3c <sulp>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	ec45 4b10 	vmov	d0, r4, r5
 8006b46:	4616      	mov	r6, r2
 8006b48:	f002 fd18 	bl	800957c <__ulp>
 8006b4c:	ec51 0b10 	vmov	r0, r1, d0
 8006b50:	b17e      	cbz	r6, 8006b72 <sulp+0x36>
 8006b52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dd09      	ble.n	8006b72 <sulp+0x36>
 8006b5e:	051b      	lsls	r3, r3, #20
 8006b60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b64:	2400      	movs	r4, #0
 8006b66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	f7f9 fd4b 	bl	8000608 <__aeabi_dmul>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	0000      	movs	r0, r0
	...

08006b78 <_strtod_l>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	ed2d 8b02 	vpush	{d8}
 8006b80:	b09d      	sub	sp, #116	; 0x74
 8006b82:	461f      	mov	r7, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	9318      	str	r3, [sp, #96]	; 0x60
 8006b88:	4ba2      	ldr	r3, [pc, #648]	; (8006e14 <_strtod_l+0x29c>)
 8006b8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	9305      	str	r3, [sp, #20]
 8006b90:	4604      	mov	r4, r0
 8006b92:	4618      	mov	r0, r3
 8006b94:	4688      	mov	r8, r1
 8006b96:	f7f9 fb23 	bl	80001e0 <strlen>
 8006b9a:	f04f 0a00 	mov.w	sl, #0
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	f04f 0b00 	mov.w	fp, #0
 8006ba4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	2a2b      	cmp	r2, #43	; 0x2b
 8006bae:	d04e      	beq.n	8006c4e <_strtod_l+0xd6>
 8006bb0:	d83b      	bhi.n	8006c2a <_strtod_l+0xb2>
 8006bb2:	2a0d      	cmp	r2, #13
 8006bb4:	d834      	bhi.n	8006c20 <_strtod_l+0xa8>
 8006bb6:	2a08      	cmp	r2, #8
 8006bb8:	d834      	bhi.n	8006c24 <_strtod_l+0xac>
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d03e      	beq.n	8006c3c <_strtod_l+0xc4>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8006bc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006bc4:	7833      	ldrb	r3, [r6, #0]
 8006bc6:	2b30      	cmp	r3, #48	; 0x30
 8006bc8:	f040 80b0 	bne.w	8006d2c <_strtod_l+0x1b4>
 8006bcc:	7873      	ldrb	r3, [r6, #1]
 8006bce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006bd2:	2b58      	cmp	r3, #88	; 0x58
 8006bd4:	d168      	bne.n	8006ca8 <_strtod_l+0x130>
 8006bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	ab18      	add	r3, sp, #96	; 0x60
 8006bdc:	9702      	str	r7, [sp, #8]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4a8d      	ldr	r2, [pc, #564]	; (8006e18 <_strtod_l+0x2a0>)
 8006be2:	ab19      	add	r3, sp, #100	; 0x64
 8006be4:	a917      	add	r1, sp, #92	; 0x5c
 8006be6:	4620      	mov	r0, r4
 8006be8:	f001 fe2c 	bl	8008844 <__gethex>
 8006bec:	f010 0707 	ands.w	r7, r0, #7
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	d005      	beq.n	8006c00 <_strtod_l+0x88>
 8006bf4:	2f06      	cmp	r7, #6
 8006bf6:	d12c      	bne.n	8006c52 <_strtod_l+0xda>
 8006bf8:	3601      	adds	r6, #1
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8006c00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 8590 	bne.w	8007728 <_strtod_l+0xbb0>
 8006c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0a:	b1eb      	cbz	r3, 8006c48 <_strtod_l+0xd0>
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c12:	ec43 2b10 	vmov	d0, r2, r3
 8006c16:	b01d      	add	sp, #116	; 0x74
 8006c18:	ecbd 8b02 	vpop	{d8}
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	2a20      	cmp	r2, #32
 8006c22:	d1cc      	bne.n	8006bbe <_strtod_l+0x46>
 8006c24:	3301      	adds	r3, #1
 8006c26:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c28:	e7be      	b.n	8006ba8 <_strtod_l+0x30>
 8006c2a:	2a2d      	cmp	r2, #45	; 0x2d
 8006c2c:	d1c7      	bne.n	8006bbe <_strtod_l+0x46>
 8006c2e:	2201      	movs	r2, #1
 8006c30:	920a      	str	r2, [sp, #40]	; 0x28
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1c2      	bne.n	8006bc2 <_strtod_l+0x4a>
 8006c3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f040 856e 	bne.w	8007724 <_strtod_l+0xbac>
 8006c48:	4652      	mov	r2, sl
 8006c4a:	465b      	mov	r3, fp
 8006c4c:	e7e1      	b.n	8006c12 <_strtod_l+0x9a>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	e7ee      	b.n	8006c30 <_strtod_l+0xb8>
 8006c52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c54:	b13a      	cbz	r2, 8006c66 <_strtod_l+0xee>
 8006c56:	2135      	movs	r1, #53	; 0x35
 8006c58:	a81a      	add	r0, sp, #104	; 0x68
 8006c5a:	f002 fd9a 	bl	8009792 <__copybits>
 8006c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c60:	4620      	mov	r0, r4
 8006c62:	f002 f959 	bl	8008f18 <_Bfree>
 8006c66:	3f01      	subs	r7, #1
 8006c68:	2f04      	cmp	r7, #4
 8006c6a:	d806      	bhi.n	8006c7a <_strtod_l+0x102>
 8006c6c:	e8df f007 	tbb	[pc, r7]
 8006c70:	1714030a 	.word	0x1714030a
 8006c74:	0a          	.byte	0x0a
 8006c75:	00          	.byte	0x00
 8006c76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006c7a:	0728      	lsls	r0, r5, #28
 8006c7c:	d5c0      	bpl.n	8006c00 <_strtod_l+0x88>
 8006c7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006c82:	e7bd      	b.n	8006c00 <_strtod_l+0x88>
 8006c84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006c88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006c8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c96:	e7f0      	b.n	8006c7a <_strtod_l+0x102>
 8006c98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006e1c <_strtod_l+0x2a4>
 8006c9c:	e7ed      	b.n	8006c7a <_strtod_l+0x102>
 8006c9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006ca2:	f04f 3aff 	mov.w	sl, #4294967295
 8006ca6:	e7e8      	b.n	8006c7a <_strtod_l+0x102>
 8006ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d0f9      	beq.n	8006ca8 <_strtod_l+0x130>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0a3      	beq.n	8006c00 <_strtod_l+0x88>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f04f 0900 	mov.w	r9, #0
 8006cbe:	9304      	str	r3, [sp, #16]
 8006cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cc2:	9308      	str	r3, [sp, #32]
 8006cc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006cc8:	464f      	mov	r7, r9
 8006cca:	220a      	movs	r2, #10
 8006ccc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006cce:	7806      	ldrb	r6, [r0, #0]
 8006cd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006cd4:	b2d9      	uxtb	r1, r3
 8006cd6:	2909      	cmp	r1, #9
 8006cd8:	d92a      	bls.n	8006d30 <_strtod_l+0x1b8>
 8006cda:	9905      	ldr	r1, [sp, #20]
 8006cdc:	462a      	mov	r2, r5
 8006cde:	f003 f9a6 	bl	800a02e <strncmp>
 8006ce2:	b398      	cbz	r0, 8006d4c <_strtod_l+0x1d4>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	4632      	mov	r2, r6
 8006ce8:	463d      	mov	r5, r7
 8006cea:	9005      	str	r0, [sp, #20]
 8006cec:	4603      	mov	r3, r0
 8006cee:	2a65      	cmp	r2, #101	; 0x65
 8006cf0:	d001      	beq.n	8006cf6 <_strtod_l+0x17e>
 8006cf2:	2a45      	cmp	r2, #69	; 0x45
 8006cf4:	d118      	bne.n	8006d28 <_strtod_l+0x1b0>
 8006cf6:	b91d      	cbnz	r5, 8006d00 <_strtod_l+0x188>
 8006cf8:	9a04      	ldr	r2, [sp, #16]
 8006cfa:	4302      	orrs	r2, r0
 8006cfc:	d09e      	beq.n	8006c3c <_strtod_l+0xc4>
 8006cfe:	2500      	movs	r5, #0
 8006d00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006d04:	f108 0201 	add.w	r2, r8, #1
 8006d08:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006d0e:	2a2b      	cmp	r2, #43	; 0x2b
 8006d10:	d075      	beq.n	8006dfe <_strtod_l+0x286>
 8006d12:	2a2d      	cmp	r2, #45	; 0x2d
 8006d14:	d07b      	beq.n	8006e0e <_strtod_l+0x296>
 8006d16:	f04f 0c00 	mov.w	ip, #0
 8006d1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d1e:	2909      	cmp	r1, #9
 8006d20:	f240 8082 	bls.w	8006e28 <_strtod_l+0x2b0>
 8006d24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d28:	2600      	movs	r6, #0
 8006d2a:	e09d      	b.n	8006e68 <_strtod_l+0x2f0>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e7c4      	b.n	8006cba <_strtod_l+0x142>
 8006d30:	2f08      	cmp	r7, #8
 8006d32:	bfd8      	it	le
 8006d34:	9907      	ldrle	r1, [sp, #28]
 8006d36:	f100 0001 	add.w	r0, r0, #1
 8006d3a:	bfda      	itte	le
 8006d3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d40:	9307      	strle	r3, [sp, #28]
 8006d42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006d46:	3701      	adds	r7, #1
 8006d48:	9017      	str	r0, [sp, #92]	; 0x5c
 8006d4a:	e7bf      	b.n	8006ccc <_strtod_l+0x154>
 8006d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d4e:	195a      	adds	r2, r3, r5
 8006d50:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d52:	5d5a      	ldrb	r2, [r3, r5]
 8006d54:	2f00      	cmp	r7, #0
 8006d56:	d037      	beq.n	8006dc8 <_strtod_l+0x250>
 8006d58:	9005      	str	r0, [sp, #20]
 8006d5a:	463d      	mov	r5, r7
 8006d5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006d60:	2b09      	cmp	r3, #9
 8006d62:	d912      	bls.n	8006d8a <_strtod_l+0x212>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e7c2      	b.n	8006cee <_strtod_l+0x176>
 8006d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d6e:	785a      	ldrb	r2, [r3, #1]
 8006d70:	3001      	adds	r0, #1
 8006d72:	2a30      	cmp	r2, #48	; 0x30
 8006d74:	d0f8      	beq.n	8006d68 <_strtod_l+0x1f0>
 8006d76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	f200 84d9 	bhi.w	8007732 <_strtod_l+0xbba>
 8006d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d82:	9005      	str	r0, [sp, #20]
 8006d84:	2000      	movs	r0, #0
 8006d86:	9308      	str	r3, [sp, #32]
 8006d88:	4605      	mov	r5, r0
 8006d8a:	3a30      	subs	r2, #48	; 0x30
 8006d8c:	f100 0301 	add.w	r3, r0, #1
 8006d90:	d014      	beq.n	8006dbc <_strtod_l+0x244>
 8006d92:	9905      	ldr	r1, [sp, #20]
 8006d94:	4419      	add	r1, r3
 8006d96:	9105      	str	r1, [sp, #20]
 8006d98:	462b      	mov	r3, r5
 8006d9a:	eb00 0e05 	add.w	lr, r0, r5
 8006d9e:	210a      	movs	r1, #10
 8006da0:	4573      	cmp	r3, lr
 8006da2:	d113      	bne.n	8006dcc <_strtod_l+0x254>
 8006da4:	182b      	adds	r3, r5, r0
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	f105 0501 	add.w	r5, r5, #1
 8006dac:	4405      	add	r5, r0
 8006dae:	dc1c      	bgt.n	8006dea <_strtod_l+0x272>
 8006db0:	9907      	ldr	r1, [sp, #28]
 8006db2:	230a      	movs	r3, #10
 8006db4:	fb03 2301 	mla	r3, r3, r1, r2
 8006db8:	9307      	str	r3, [sp, #28]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006dbe:	1c51      	adds	r1, r2, #1
 8006dc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8006dc2:	7852      	ldrb	r2, [r2, #1]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	e7c9      	b.n	8006d5c <_strtod_l+0x1e4>
 8006dc8:	4638      	mov	r0, r7
 8006dca:	e7d2      	b.n	8006d72 <_strtod_l+0x1fa>
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	dc04      	bgt.n	8006dda <_strtod_l+0x262>
 8006dd0:	9e07      	ldr	r6, [sp, #28]
 8006dd2:	434e      	muls	r6, r1
 8006dd4:	9607      	str	r6, [sp, #28]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	e7e2      	b.n	8006da0 <_strtod_l+0x228>
 8006dda:	f103 0c01 	add.w	ip, r3, #1
 8006dde:	f1bc 0f10 	cmp.w	ip, #16
 8006de2:	bfd8      	it	le
 8006de4:	fb01 f909 	mulle.w	r9, r1, r9
 8006de8:	e7f5      	b.n	8006dd6 <_strtod_l+0x25e>
 8006dea:	2d10      	cmp	r5, #16
 8006dec:	bfdc      	itt	le
 8006dee:	230a      	movle	r3, #10
 8006df0:	fb03 2909 	mlale	r9, r3, r9, r2
 8006df4:	e7e1      	b.n	8006dba <_strtod_l+0x242>
 8006df6:	2300      	movs	r3, #0
 8006df8:	9305      	str	r3, [sp, #20]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e77c      	b.n	8006cf8 <_strtod_l+0x180>
 8006dfe:	f04f 0c00 	mov.w	ip, #0
 8006e02:	f108 0202 	add.w	r2, r8, #2
 8006e06:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006e0c:	e785      	b.n	8006d1a <_strtod_l+0x1a2>
 8006e0e:	f04f 0c01 	mov.w	ip, #1
 8006e12:	e7f6      	b.n	8006e02 <_strtod_l+0x28a>
 8006e14:	0800aa2c 	.word	0x0800aa2c
 8006e18:	0800a77c 	.word	0x0800a77c
 8006e1c:	7ff00000 	.word	0x7ff00000
 8006e20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e22:	1c51      	adds	r1, r2, #1
 8006e24:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e26:	7852      	ldrb	r2, [r2, #1]
 8006e28:	2a30      	cmp	r2, #48	; 0x30
 8006e2a:	d0f9      	beq.n	8006e20 <_strtod_l+0x2a8>
 8006e2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006e30:	2908      	cmp	r1, #8
 8006e32:	f63f af79 	bhi.w	8006d28 <_strtod_l+0x1b0>
 8006e36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006e3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e3c:	9206      	str	r2, [sp, #24]
 8006e3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e40:	1c51      	adds	r1, r2, #1
 8006e42:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e44:	7852      	ldrb	r2, [r2, #1]
 8006e46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006e4a:	2e09      	cmp	r6, #9
 8006e4c:	d937      	bls.n	8006ebe <_strtod_l+0x346>
 8006e4e:	9e06      	ldr	r6, [sp, #24]
 8006e50:	1b89      	subs	r1, r1, r6
 8006e52:	2908      	cmp	r1, #8
 8006e54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006e58:	dc02      	bgt.n	8006e60 <_strtod_l+0x2e8>
 8006e5a:	4576      	cmp	r6, lr
 8006e5c:	bfa8      	it	ge
 8006e5e:	4676      	movge	r6, lr
 8006e60:	f1bc 0f00 	cmp.w	ip, #0
 8006e64:	d000      	beq.n	8006e68 <_strtod_l+0x2f0>
 8006e66:	4276      	negs	r6, r6
 8006e68:	2d00      	cmp	r5, #0
 8006e6a:	d14d      	bne.n	8006f08 <_strtod_l+0x390>
 8006e6c:	9904      	ldr	r1, [sp, #16]
 8006e6e:	4301      	orrs	r1, r0
 8006e70:	f47f aec6 	bne.w	8006c00 <_strtod_l+0x88>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f47f aee1 	bne.w	8006c3c <_strtod_l+0xc4>
 8006e7a:	2a69      	cmp	r2, #105	; 0x69
 8006e7c:	d027      	beq.n	8006ece <_strtod_l+0x356>
 8006e7e:	dc24      	bgt.n	8006eca <_strtod_l+0x352>
 8006e80:	2a49      	cmp	r2, #73	; 0x49
 8006e82:	d024      	beq.n	8006ece <_strtod_l+0x356>
 8006e84:	2a4e      	cmp	r2, #78	; 0x4e
 8006e86:	f47f aed9 	bne.w	8006c3c <_strtod_l+0xc4>
 8006e8a:	499f      	ldr	r1, [pc, #636]	; (8007108 <_strtod_l+0x590>)
 8006e8c:	a817      	add	r0, sp, #92	; 0x5c
 8006e8e:	f001 ff31 	bl	8008cf4 <__match>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	f43f aed2 	beq.w	8006c3c <_strtod_l+0xc4>
 8006e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b28      	cmp	r3, #40	; 0x28
 8006e9e:	d12d      	bne.n	8006efc <_strtod_l+0x384>
 8006ea0:	499a      	ldr	r1, [pc, #616]	; (800710c <_strtod_l+0x594>)
 8006ea2:	aa1a      	add	r2, sp, #104	; 0x68
 8006ea4:	a817      	add	r0, sp, #92	; 0x5c
 8006ea6:	f001 ff39 	bl	8008d1c <__hexnan>
 8006eaa:	2805      	cmp	r0, #5
 8006eac:	d126      	bne.n	8006efc <_strtod_l+0x384>
 8006eae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eb0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006eb4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006eb8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006ebc:	e6a0      	b.n	8006c00 <_strtod_l+0x88>
 8006ebe:	210a      	movs	r1, #10
 8006ec0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006ec4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006ec8:	e7b9      	b.n	8006e3e <_strtod_l+0x2c6>
 8006eca:	2a6e      	cmp	r2, #110	; 0x6e
 8006ecc:	e7db      	b.n	8006e86 <_strtod_l+0x30e>
 8006ece:	4990      	ldr	r1, [pc, #576]	; (8007110 <_strtod_l+0x598>)
 8006ed0:	a817      	add	r0, sp, #92	; 0x5c
 8006ed2:	f001 ff0f 	bl	8008cf4 <__match>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f43f aeb0 	beq.w	8006c3c <_strtod_l+0xc4>
 8006edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ede:	498d      	ldr	r1, [pc, #564]	; (8007114 <_strtod_l+0x59c>)
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	a817      	add	r0, sp, #92	; 0x5c
 8006ee4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ee6:	f001 ff05 	bl	8008cf4 <__match>
 8006eea:	b910      	cbnz	r0, 8006ef2 <_strtod_l+0x37a>
 8006eec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eee:	3301      	adds	r3, #1
 8006ef0:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ef2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007124 <_strtod_l+0x5ac>
 8006ef6:	f04f 0a00 	mov.w	sl, #0
 8006efa:	e681      	b.n	8006c00 <_strtod_l+0x88>
 8006efc:	4886      	ldr	r0, [pc, #536]	; (8007118 <_strtod_l+0x5a0>)
 8006efe:	f003 f83b 	bl	8009f78 <nan>
 8006f02:	ec5b ab10 	vmov	sl, fp, d0
 8006f06:	e67b      	b.n	8006c00 <_strtod_l+0x88>
 8006f08:	9b05      	ldr	r3, [sp, #20]
 8006f0a:	9807      	ldr	r0, [sp, #28]
 8006f0c:	1af3      	subs	r3, r6, r3
 8006f0e:	2f00      	cmp	r7, #0
 8006f10:	bf08      	it	eq
 8006f12:	462f      	moveq	r7, r5
 8006f14:	2d10      	cmp	r5, #16
 8006f16:	9306      	str	r3, [sp, #24]
 8006f18:	46a8      	mov	r8, r5
 8006f1a:	bfa8      	it	ge
 8006f1c:	f04f 0810 	movge.w	r8, #16
 8006f20:	f7f9 faf8 	bl	8000514 <__aeabi_ui2d>
 8006f24:	2d09      	cmp	r5, #9
 8006f26:	4682      	mov	sl, r0
 8006f28:	468b      	mov	fp, r1
 8006f2a:	dd13      	ble.n	8006f54 <_strtod_l+0x3dc>
 8006f2c:	4b7b      	ldr	r3, [pc, #492]	; (800711c <_strtod_l+0x5a4>)
 8006f2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f36:	f7f9 fb67 	bl	8000608 <__aeabi_dmul>
 8006f3a:	4682      	mov	sl, r0
 8006f3c:	4648      	mov	r0, r9
 8006f3e:	468b      	mov	fp, r1
 8006f40:	f7f9 fae8 	bl	8000514 <__aeabi_ui2d>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4650      	mov	r0, sl
 8006f4a:	4659      	mov	r1, fp
 8006f4c:	f7f9 f9a6 	bl	800029c <__adddf3>
 8006f50:	4682      	mov	sl, r0
 8006f52:	468b      	mov	fp, r1
 8006f54:	2d0f      	cmp	r5, #15
 8006f56:	dc38      	bgt.n	8006fca <_strtod_l+0x452>
 8006f58:	9b06      	ldr	r3, [sp, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f43f ae50 	beq.w	8006c00 <_strtod_l+0x88>
 8006f60:	dd24      	ble.n	8006fac <_strtod_l+0x434>
 8006f62:	2b16      	cmp	r3, #22
 8006f64:	dc0b      	bgt.n	8006f7e <_strtod_l+0x406>
 8006f66:	496d      	ldr	r1, [pc, #436]	; (800711c <_strtod_l+0x5a4>)
 8006f68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f70:	4652      	mov	r2, sl
 8006f72:	465b      	mov	r3, fp
 8006f74:	f7f9 fb48 	bl	8000608 <__aeabi_dmul>
 8006f78:	4682      	mov	sl, r0
 8006f7a:	468b      	mov	fp, r1
 8006f7c:	e640      	b.n	8006c00 <_strtod_l+0x88>
 8006f7e:	9a06      	ldr	r2, [sp, #24]
 8006f80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006f84:	4293      	cmp	r3, r2
 8006f86:	db20      	blt.n	8006fca <_strtod_l+0x452>
 8006f88:	4c64      	ldr	r4, [pc, #400]	; (800711c <_strtod_l+0x5a4>)
 8006f8a:	f1c5 050f 	rsb	r5, r5, #15
 8006f8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f92:	4652      	mov	r2, sl
 8006f94:	465b      	mov	r3, fp
 8006f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9a:	f7f9 fb35 	bl	8000608 <__aeabi_dmul>
 8006f9e:	9b06      	ldr	r3, [sp, #24]
 8006fa0:	1b5d      	subs	r5, r3, r5
 8006fa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006faa:	e7e3      	b.n	8006f74 <_strtod_l+0x3fc>
 8006fac:	9b06      	ldr	r3, [sp, #24]
 8006fae:	3316      	adds	r3, #22
 8006fb0:	db0b      	blt.n	8006fca <_strtod_l+0x452>
 8006fb2:	9b05      	ldr	r3, [sp, #20]
 8006fb4:	1b9e      	subs	r6, r3, r6
 8006fb6:	4b59      	ldr	r3, [pc, #356]	; (800711c <_strtod_l+0x5a4>)
 8006fb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006fbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	f7f9 fc4a 	bl	800085c <__aeabi_ddiv>
 8006fc8:	e7d6      	b.n	8006f78 <_strtod_l+0x400>
 8006fca:	9b06      	ldr	r3, [sp, #24]
 8006fcc:	eba5 0808 	sub.w	r8, r5, r8
 8006fd0:	4498      	add	r8, r3
 8006fd2:	f1b8 0f00 	cmp.w	r8, #0
 8006fd6:	dd74      	ble.n	80070c2 <_strtod_l+0x54a>
 8006fd8:	f018 030f 	ands.w	r3, r8, #15
 8006fdc:	d00a      	beq.n	8006ff4 <_strtod_l+0x47c>
 8006fde:	494f      	ldr	r1, [pc, #316]	; (800711c <_strtod_l+0x5a4>)
 8006fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fe4:	4652      	mov	r2, sl
 8006fe6:	465b      	mov	r3, fp
 8006fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fec:	f7f9 fb0c 	bl	8000608 <__aeabi_dmul>
 8006ff0:	4682      	mov	sl, r0
 8006ff2:	468b      	mov	fp, r1
 8006ff4:	f038 080f 	bics.w	r8, r8, #15
 8006ff8:	d04f      	beq.n	800709a <_strtod_l+0x522>
 8006ffa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006ffe:	dd22      	ble.n	8007046 <_strtod_l+0x4ce>
 8007000:	2500      	movs	r5, #0
 8007002:	462e      	mov	r6, r5
 8007004:	9507      	str	r5, [sp, #28]
 8007006:	9505      	str	r5, [sp, #20]
 8007008:	2322      	movs	r3, #34	; 0x22
 800700a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007124 <_strtod_l+0x5ac>
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	f04f 0a00 	mov.w	sl, #0
 8007014:	9b07      	ldr	r3, [sp, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f43f adf2 	beq.w	8006c00 <_strtod_l+0x88>
 800701c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800701e:	4620      	mov	r0, r4
 8007020:	f001 ff7a 	bl	8008f18 <_Bfree>
 8007024:	9905      	ldr	r1, [sp, #20]
 8007026:	4620      	mov	r0, r4
 8007028:	f001 ff76 	bl	8008f18 <_Bfree>
 800702c:	4631      	mov	r1, r6
 800702e:	4620      	mov	r0, r4
 8007030:	f001 ff72 	bl	8008f18 <_Bfree>
 8007034:	9907      	ldr	r1, [sp, #28]
 8007036:	4620      	mov	r0, r4
 8007038:	f001 ff6e 	bl	8008f18 <_Bfree>
 800703c:	4629      	mov	r1, r5
 800703e:	4620      	mov	r0, r4
 8007040:	f001 ff6a 	bl	8008f18 <_Bfree>
 8007044:	e5dc      	b.n	8006c00 <_strtod_l+0x88>
 8007046:	4b36      	ldr	r3, [pc, #216]	; (8007120 <_strtod_l+0x5a8>)
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	2300      	movs	r3, #0
 800704c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007050:	4650      	mov	r0, sl
 8007052:	4659      	mov	r1, fp
 8007054:	4699      	mov	r9, r3
 8007056:	f1b8 0f01 	cmp.w	r8, #1
 800705a:	dc21      	bgt.n	80070a0 <_strtod_l+0x528>
 800705c:	b10b      	cbz	r3, 8007062 <_strtod_l+0x4ea>
 800705e:	4682      	mov	sl, r0
 8007060:	468b      	mov	fp, r1
 8007062:	4b2f      	ldr	r3, [pc, #188]	; (8007120 <_strtod_l+0x5a8>)
 8007064:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007068:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800706c:	4652      	mov	r2, sl
 800706e:	465b      	mov	r3, fp
 8007070:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007074:	f7f9 fac8 	bl	8000608 <__aeabi_dmul>
 8007078:	4b2a      	ldr	r3, [pc, #168]	; (8007124 <_strtod_l+0x5ac>)
 800707a:	460a      	mov	r2, r1
 800707c:	400b      	ands	r3, r1
 800707e:	492a      	ldr	r1, [pc, #168]	; (8007128 <_strtod_l+0x5b0>)
 8007080:	428b      	cmp	r3, r1
 8007082:	4682      	mov	sl, r0
 8007084:	d8bc      	bhi.n	8007000 <_strtod_l+0x488>
 8007086:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800708a:	428b      	cmp	r3, r1
 800708c:	bf86      	itte	hi
 800708e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800712c <_strtod_l+0x5b4>
 8007092:	f04f 3aff 	movhi.w	sl, #4294967295
 8007096:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800709a:	2300      	movs	r3, #0
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	e084      	b.n	80071aa <_strtod_l+0x632>
 80070a0:	f018 0f01 	tst.w	r8, #1
 80070a4:	d005      	beq.n	80070b2 <_strtod_l+0x53a>
 80070a6:	9b04      	ldr	r3, [sp, #16]
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 faac 	bl	8000608 <__aeabi_dmul>
 80070b0:	2301      	movs	r3, #1
 80070b2:	9a04      	ldr	r2, [sp, #16]
 80070b4:	3208      	adds	r2, #8
 80070b6:	f109 0901 	add.w	r9, r9, #1
 80070ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070be:	9204      	str	r2, [sp, #16]
 80070c0:	e7c9      	b.n	8007056 <_strtod_l+0x4de>
 80070c2:	d0ea      	beq.n	800709a <_strtod_l+0x522>
 80070c4:	f1c8 0800 	rsb	r8, r8, #0
 80070c8:	f018 020f 	ands.w	r2, r8, #15
 80070cc:	d00a      	beq.n	80070e4 <_strtod_l+0x56c>
 80070ce:	4b13      	ldr	r3, [pc, #76]	; (800711c <_strtod_l+0x5a4>)
 80070d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d4:	4650      	mov	r0, sl
 80070d6:	4659      	mov	r1, fp
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f7f9 fbbe 	bl	800085c <__aeabi_ddiv>
 80070e0:	4682      	mov	sl, r0
 80070e2:	468b      	mov	fp, r1
 80070e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80070e8:	d0d7      	beq.n	800709a <_strtod_l+0x522>
 80070ea:	f1b8 0f1f 	cmp.w	r8, #31
 80070ee:	dd1f      	ble.n	8007130 <_strtod_l+0x5b8>
 80070f0:	2500      	movs	r5, #0
 80070f2:	462e      	mov	r6, r5
 80070f4:	9507      	str	r5, [sp, #28]
 80070f6:	9505      	str	r5, [sp, #20]
 80070f8:	2322      	movs	r3, #34	; 0x22
 80070fa:	f04f 0a00 	mov.w	sl, #0
 80070fe:	f04f 0b00 	mov.w	fp, #0
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	e786      	b.n	8007014 <_strtod_l+0x49c>
 8007106:	bf00      	nop
 8007108:	0800a74d 	.word	0x0800a74d
 800710c:	0800a790 	.word	0x0800a790
 8007110:	0800a745 	.word	0x0800a745
 8007114:	0800a8d4 	.word	0x0800a8d4
 8007118:	0800abe8 	.word	0x0800abe8
 800711c:	0800aac8 	.word	0x0800aac8
 8007120:	0800aaa0 	.word	0x0800aaa0
 8007124:	7ff00000 	.word	0x7ff00000
 8007128:	7ca00000 	.word	0x7ca00000
 800712c:	7fefffff 	.word	0x7fefffff
 8007130:	f018 0310 	ands.w	r3, r8, #16
 8007134:	bf18      	it	ne
 8007136:	236a      	movne	r3, #106	; 0x6a
 8007138:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80074e8 <_strtod_l+0x970>
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	4650      	mov	r0, sl
 8007140:	4659      	mov	r1, fp
 8007142:	2300      	movs	r3, #0
 8007144:	f018 0f01 	tst.w	r8, #1
 8007148:	d004      	beq.n	8007154 <_strtod_l+0x5dc>
 800714a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800714e:	f7f9 fa5b 	bl	8000608 <__aeabi_dmul>
 8007152:	2301      	movs	r3, #1
 8007154:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007158:	f109 0908 	add.w	r9, r9, #8
 800715c:	d1f2      	bne.n	8007144 <_strtod_l+0x5cc>
 800715e:	b10b      	cbz	r3, 8007164 <_strtod_l+0x5ec>
 8007160:	4682      	mov	sl, r0
 8007162:	468b      	mov	fp, r1
 8007164:	9b04      	ldr	r3, [sp, #16]
 8007166:	b1c3      	cbz	r3, 800719a <_strtod_l+0x622>
 8007168:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800716c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007170:	2b00      	cmp	r3, #0
 8007172:	4659      	mov	r1, fp
 8007174:	dd11      	ble.n	800719a <_strtod_l+0x622>
 8007176:	2b1f      	cmp	r3, #31
 8007178:	f340 8124 	ble.w	80073c4 <_strtod_l+0x84c>
 800717c:	2b34      	cmp	r3, #52	; 0x34
 800717e:	bfde      	ittt	le
 8007180:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007184:	f04f 33ff 	movle.w	r3, #4294967295
 8007188:	fa03 f202 	lslle.w	r2, r3, r2
 800718c:	f04f 0a00 	mov.w	sl, #0
 8007190:	bfcc      	ite	gt
 8007192:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007196:	ea02 0b01 	andle.w	fp, r2, r1
 800719a:	2200      	movs	r2, #0
 800719c:	2300      	movs	r3, #0
 800719e:	4650      	mov	r0, sl
 80071a0:	4659      	mov	r1, fp
 80071a2:	f7f9 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d1a2      	bne.n	80070f0 <_strtod_l+0x578>
 80071aa:	9b07      	ldr	r3, [sp, #28]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	9908      	ldr	r1, [sp, #32]
 80071b0:	462b      	mov	r3, r5
 80071b2:	463a      	mov	r2, r7
 80071b4:	4620      	mov	r0, r4
 80071b6:	f001 ff17 	bl	8008fe8 <__s2b>
 80071ba:	9007      	str	r0, [sp, #28]
 80071bc:	2800      	cmp	r0, #0
 80071be:	f43f af1f 	beq.w	8007000 <_strtod_l+0x488>
 80071c2:	9b05      	ldr	r3, [sp, #20]
 80071c4:	1b9e      	subs	r6, r3, r6
 80071c6:	9b06      	ldr	r3, [sp, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfb4      	ite	lt
 80071cc:	4633      	movlt	r3, r6
 80071ce:	2300      	movge	r3, #0
 80071d0:	930c      	str	r3, [sp, #48]	; 0x30
 80071d2:	9b06      	ldr	r3, [sp, #24]
 80071d4:	2500      	movs	r5, #0
 80071d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071da:	9312      	str	r3, [sp, #72]	; 0x48
 80071dc:	462e      	mov	r6, r5
 80071de:	9b07      	ldr	r3, [sp, #28]
 80071e0:	4620      	mov	r0, r4
 80071e2:	6859      	ldr	r1, [r3, #4]
 80071e4:	f001 fe58 	bl	8008e98 <_Balloc>
 80071e8:	9005      	str	r0, [sp, #20]
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f43f af0c 	beq.w	8007008 <_strtod_l+0x490>
 80071f0:	9b07      	ldr	r3, [sp, #28]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	3202      	adds	r2, #2
 80071f6:	f103 010c 	add.w	r1, r3, #12
 80071fa:	0092      	lsls	r2, r2, #2
 80071fc:	300c      	adds	r0, #12
 80071fe:	f7fe fdcf 	bl	8005da0 <memcpy>
 8007202:	ec4b ab10 	vmov	d0, sl, fp
 8007206:	aa1a      	add	r2, sp, #104	; 0x68
 8007208:	a919      	add	r1, sp, #100	; 0x64
 800720a:	4620      	mov	r0, r4
 800720c:	f002 fa32 	bl	8009674 <__d2b>
 8007210:	ec4b ab18 	vmov	d8, sl, fp
 8007214:	9018      	str	r0, [sp, #96]	; 0x60
 8007216:	2800      	cmp	r0, #0
 8007218:	f43f aef6 	beq.w	8007008 <_strtod_l+0x490>
 800721c:	2101      	movs	r1, #1
 800721e:	4620      	mov	r0, r4
 8007220:	f001 ff7c 	bl	800911c <__i2b>
 8007224:	4606      	mov	r6, r0
 8007226:	2800      	cmp	r0, #0
 8007228:	f43f aeee 	beq.w	8007008 <_strtod_l+0x490>
 800722c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800722e:	9904      	ldr	r1, [sp, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	bfab      	itete	ge
 8007234:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007236:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007238:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800723a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800723e:	bfac      	ite	ge
 8007240:	eb03 0902 	addge.w	r9, r3, r2
 8007244:	1ad7      	sublt	r7, r2, r3
 8007246:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007248:	eba3 0801 	sub.w	r8, r3, r1
 800724c:	4490      	add	r8, r2
 800724e:	4ba1      	ldr	r3, [pc, #644]	; (80074d4 <_strtod_l+0x95c>)
 8007250:	f108 38ff 	add.w	r8, r8, #4294967295
 8007254:	4598      	cmp	r8, r3
 8007256:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800725a:	f280 80c7 	bge.w	80073ec <_strtod_l+0x874>
 800725e:	eba3 0308 	sub.w	r3, r3, r8
 8007262:	2b1f      	cmp	r3, #31
 8007264:	eba2 0203 	sub.w	r2, r2, r3
 8007268:	f04f 0101 	mov.w	r1, #1
 800726c:	f300 80b1 	bgt.w	80073d2 <_strtod_l+0x85a>
 8007270:	fa01 f303 	lsl.w	r3, r1, r3
 8007274:	930d      	str	r3, [sp, #52]	; 0x34
 8007276:	2300      	movs	r3, #0
 8007278:	9308      	str	r3, [sp, #32]
 800727a:	eb09 0802 	add.w	r8, r9, r2
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	45c1      	cmp	r9, r8
 8007282:	4417      	add	r7, r2
 8007284:	441f      	add	r7, r3
 8007286:	464b      	mov	r3, r9
 8007288:	bfa8      	it	ge
 800728a:	4643      	movge	r3, r8
 800728c:	42bb      	cmp	r3, r7
 800728e:	bfa8      	it	ge
 8007290:	463b      	movge	r3, r7
 8007292:	2b00      	cmp	r3, #0
 8007294:	bfc2      	ittt	gt
 8007296:	eba8 0803 	subgt.w	r8, r8, r3
 800729a:	1aff      	subgt	r7, r7, r3
 800729c:	eba9 0903 	subgt.w	r9, r9, r3
 80072a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	dd17      	ble.n	80072d6 <_strtod_l+0x75e>
 80072a6:	4631      	mov	r1, r6
 80072a8:	461a      	mov	r2, r3
 80072aa:	4620      	mov	r0, r4
 80072ac:	f001 fff6 	bl	800929c <__pow5mult>
 80072b0:	4606      	mov	r6, r0
 80072b2:	2800      	cmp	r0, #0
 80072b4:	f43f aea8 	beq.w	8007008 <_strtod_l+0x490>
 80072b8:	4601      	mov	r1, r0
 80072ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072bc:	4620      	mov	r0, r4
 80072be:	f001 ff43 	bl	8009148 <__multiply>
 80072c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f43f ae9f 	beq.w	8007008 <_strtod_l+0x490>
 80072ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072cc:	4620      	mov	r0, r4
 80072ce:	f001 fe23 	bl	8008f18 <_Bfree>
 80072d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d4:	9318      	str	r3, [sp, #96]	; 0x60
 80072d6:	f1b8 0f00 	cmp.w	r8, #0
 80072da:	f300 808c 	bgt.w	80073f6 <_strtod_l+0x87e>
 80072de:	9b06      	ldr	r3, [sp, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dd08      	ble.n	80072f6 <_strtod_l+0x77e>
 80072e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072e6:	9905      	ldr	r1, [sp, #20]
 80072e8:	4620      	mov	r0, r4
 80072ea:	f001 ffd7 	bl	800929c <__pow5mult>
 80072ee:	9005      	str	r0, [sp, #20]
 80072f0:	2800      	cmp	r0, #0
 80072f2:	f43f ae89 	beq.w	8007008 <_strtod_l+0x490>
 80072f6:	2f00      	cmp	r7, #0
 80072f8:	dd08      	ble.n	800730c <_strtod_l+0x794>
 80072fa:	9905      	ldr	r1, [sp, #20]
 80072fc:	463a      	mov	r2, r7
 80072fe:	4620      	mov	r0, r4
 8007300:	f002 f826 	bl	8009350 <__lshift>
 8007304:	9005      	str	r0, [sp, #20]
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f ae7e 	beq.w	8007008 <_strtod_l+0x490>
 800730c:	f1b9 0f00 	cmp.w	r9, #0
 8007310:	dd08      	ble.n	8007324 <_strtod_l+0x7ac>
 8007312:	4631      	mov	r1, r6
 8007314:	464a      	mov	r2, r9
 8007316:	4620      	mov	r0, r4
 8007318:	f002 f81a 	bl	8009350 <__lshift>
 800731c:	4606      	mov	r6, r0
 800731e:	2800      	cmp	r0, #0
 8007320:	f43f ae72 	beq.w	8007008 <_strtod_l+0x490>
 8007324:	9a05      	ldr	r2, [sp, #20]
 8007326:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007328:	4620      	mov	r0, r4
 800732a:	f002 f89d 	bl	8009468 <__mdiff>
 800732e:	4605      	mov	r5, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	f43f ae69 	beq.w	8007008 <_strtod_l+0x490>
 8007336:	68c3      	ldr	r3, [r0, #12]
 8007338:	930b      	str	r3, [sp, #44]	; 0x2c
 800733a:	2300      	movs	r3, #0
 800733c:	60c3      	str	r3, [r0, #12]
 800733e:	4631      	mov	r1, r6
 8007340:	f002 f876 	bl	8009430 <__mcmp>
 8007344:	2800      	cmp	r0, #0
 8007346:	da60      	bge.n	800740a <_strtod_l+0x892>
 8007348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800734a:	ea53 030a 	orrs.w	r3, r3, sl
 800734e:	f040 8082 	bne.w	8007456 <_strtod_l+0x8de>
 8007352:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007356:	2b00      	cmp	r3, #0
 8007358:	d17d      	bne.n	8007456 <_strtod_l+0x8de>
 800735a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800735e:	0d1b      	lsrs	r3, r3, #20
 8007360:	051b      	lsls	r3, r3, #20
 8007362:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007366:	d976      	bls.n	8007456 <_strtod_l+0x8de>
 8007368:	696b      	ldr	r3, [r5, #20]
 800736a:	b913      	cbnz	r3, 8007372 <_strtod_l+0x7fa>
 800736c:	692b      	ldr	r3, [r5, #16]
 800736e:	2b01      	cmp	r3, #1
 8007370:	dd71      	ble.n	8007456 <_strtod_l+0x8de>
 8007372:	4629      	mov	r1, r5
 8007374:	2201      	movs	r2, #1
 8007376:	4620      	mov	r0, r4
 8007378:	f001 ffea 	bl	8009350 <__lshift>
 800737c:	4631      	mov	r1, r6
 800737e:	4605      	mov	r5, r0
 8007380:	f002 f856 	bl	8009430 <__mcmp>
 8007384:	2800      	cmp	r0, #0
 8007386:	dd66      	ble.n	8007456 <_strtod_l+0x8de>
 8007388:	9904      	ldr	r1, [sp, #16]
 800738a:	4a53      	ldr	r2, [pc, #332]	; (80074d8 <_strtod_l+0x960>)
 800738c:	465b      	mov	r3, fp
 800738e:	2900      	cmp	r1, #0
 8007390:	f000 8081 	beq.w	8007496 <_strtod_l+0x91e>
 8007394:	ea02 010b 	and.w	r1, r2, fp
 8007398:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800739c:	dc7b      	bgt.n	8007496 <_strtod_l+0x91e>
 800739e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80073a2:	f77f aea9 	ble.w	80070f8 <_strtod_l+0x580>
 80073a6:	4b4d      	ldr	r3, [pc, #308]	; (80074dc <_strtod_l+0x964>)
 80073a8:	4650      	mov	r0, sl
 80073aa:	4659      	mov	r1, fp
 80073ac:	2200      	movs	r2, #0
 80073ae:	f7f9 f92b 	bl	8000608 <__aeabi_dmul>
 80073b2:	460b      	mov	r3, r1
 80073b4:	4303      	orrs	r3, r0
 80073b6:	bf08      	it	eq
 80073b8:	2322      	moveq	r3, #34	; 0x22
 80073ba:	4682      	mov	sl, r0
 80073bc:	468b      	mov	fp, r1
 80073be:	bf08      	it	eq
 80073c0:	6023      	streq	r3, [r4, #0]
 80073c2:	e62b      	b.n	800701c <_strtod_l+0x4a4>
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	ea03 0a0a 	and.w	sl, r3, sl
 80073d0:	e6e3      	b.n	800719a <_strtod_l+0x622>
 80073d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80073d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80073da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80073de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80073e2:	fa01 f308 	lsl.w	r3, r1, r8
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	910d      	str	r1, [sp, #52]	; 0x34
 80073ea:	e746      	b.n	800727a <_strtod_l+0x702>
 80073ec:	2300      	movs	r3, #0
 80073ee:	9308      	str	r3, [sp, #32]
 80073f0:	2301      	movs	r3, #1
 80073f2:	930d      	str	r3, [sp, #52]	; 0x34
 80073f4:	e741      	b.n	800727a <_strtod_l+0x702>
 80073f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073f8:	4642      	mov	r2, r8
 80073fa:	4620      	mov	r0, r4
 80073fc:	f001 ffa8 	bl	8009350 <__lshift>
 8007400:	9018      	str	r0, [sp, #96]	; 0x60
 8007402:	2800      	cmp	r0, #0
 8007404:	f47f af6b 	bne.w	80072de <_strtod_l+0x766>
 8007408:	e5fe      	b.n	8007008 <_strtod_l+0x490>
 800740a:	465f      	mov	r7, fp
 800740c:	d16e      	bne.n	80074ec <_strtod_l+0x974>
 800740e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007410:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007414:	b342      	cbz	r2, 8007468 <_strtod_l+0x8f0>
 8007416:	4a32      	ldr	r2, [pc, #200]	; (80074e0 <_strtod_l+0x968>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d128      	bne.n	800746e <_strtod_l+0x8f6>
 800741c:	9b04      	ldr	r3, [sp, #16]
 800741e:	4651      	mov	r1, sl
 8007420:	b1eb      	cbz	r3, 800745e <_strtod_l+0x8e6>
 8007422:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <_strtod_l+0x960>)
 8007424:	403b      	ands	r3, r7
 8007426:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800742a:	f04f 32ff 	mov.w	r2, #4294967295
 800742e:	d819      	bhi.n	8007464 <_strtod_l+0x8ec>
 8007430:	0d1b      	lsrs	r3, r3, #20
 8007432:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	4299      	cmp	r1, r3
 800743c:	d117      	bne.n	800746e <_strtod_l+0x8f6>
 800743e:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <_strtod_l+0x96c>)
 8007440:	429f      	cmp	r7, r3
 8007442:	d102      	bne.n	800744a <_strtod_l+0x8d2>
 8007444:	3101      	adds	r1, #1
 8007446:	f43f addf 	beq.w	8007008 <_strtod_l+0x490>
 800744a:	4b23      	ldr	r3, [pc, #140]	; (80074d8 <_strtod_l+0x960>)
 800744c:	403b      	ands	r3, r7
 800744e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007452:	f04f 0a00 	mov.w	sl, #0
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1a4      	bne.n	80073a6 <_strtod_l+0x82e>
 800745c:	e5de      	b.n	800701c <_strtod_l+0x4a4>
 800745e:	f04f 33ff 	mov.w	r3, #4294967295
 8007462:	e7ea      	b.n	800743a <_strtod_l+0x8c2>
 8007464:	4613      	mov	r3, r2
 8007466:	e7e8      	b.n	800743a <_strtod_l+0x8c2>
 8007468:	ea53 030a 	orrs.w	r3, r3, sl
 800746c:	d08c      	beq.n	8007388 <_strtod_l+0x810>
 800746e:	9b08      	ldr	r3, [sp, #32]
 8007470:	b1db      	cbz	r3, 80074aa <_strtod_l+0x932>
 8007472:	423b      	tst	r3, r7
 8007474:	d0ef      	beq.n	8007456 <_strtod_l+0x8de>
 8007476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007478:	9a04      	ldr	r2, [sp, #16]
 800747a:	4650      	mov	r0, sl
 800747c:	4659      	mov	r1, fp
 800747e:	b1c3      	cbz	r3, 80074b2 <_strtod_l+0x93a>
 8007480:	f7ff fb5c 	bl	8006b3c <sulp>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	ec51 0b18 	vmov	r0, r1, d8
 800748c:	f7f8 ff06 	bl	800029c <__adddf3>
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	e7df      	b.n	8007456 <_strtod_l+0x8de>
 8007496:	4013      	ands	r3, r2
 8007498:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800749c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074a4:	f04f 3aff 	mov.w	sl, #4294967295
 80074a8:	e7d5      	b.n	8007456 <_strtod_l+0x8de>
 80074aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ac:	ea13 0f0a 	tst.w	r3, sl
 80074b0:	e7e0      	b.n	8007474 <_strtod_l+0x8fc>
 80074b2:	f7ff fb43 	bl	8006b3c <sulp>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	ec51 0b18 	vmov	r0, r1, d8
 80074be:	f7f8 feeb 	bl	8000298 <__aeabi_dsub>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2300      	movs	r3, #0
 80074c6:	4682      	mov	sl, r0
 80074c8:	468b      	mov	fp, r1
 80074ca:	f7f9 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d0c1      	beq.n	8007456 <_strtod_l+0x8de>
 80074d2:	e611      	b.n	80070f8 <_strtod_l+0x580>
 80074d4:	fffffc02 	.word	0xfffffc02
 80074d8:	7ff00000 	.word	0x7ff00000
 80074dc:	39500000 	.word	0x39500000
 80074e0:	000fffff 	.word	0x000fffff
 80074e4:	7fefffff 	.word	0x7fefffff
 80074e8:	0800a7a8 	.word	0x0800a7a8
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	f002 f91c 	bl	800972c <__ratio>
 80074f4:	ec59 8b10 	vmov	r8, r9, d0
 80074f8:	ee10 0a10 	vmov	r0, s0
 80074fc:	2200      	movs	r2, #0
 80074fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007502:	4649      	mov	r1, r9
 8007504:	f7f9 fafc 	bl	8000b00 <__aeabi_dcmple>
 8007508:	2800      	cmp	r0, #0
 800750a:	d07a      	beq.n	8007602 <_strtod_l+0xa8a>
 800750c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d04a      	beq.n	80075a8 <_strtod_l+0xa30>
 8007512:	4b95      	ldr	r3, [pc, #596]	; (8007768 <_strtod_l+0xbf0>)
 8007514:	2200      	movs	r2, #0
 8007516:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800751a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007768 <_strtod_l+0xbf0>
 800751e:	f04f 0800 	mov.w	r8, #0
 8007522:	4b92      	ldr	r3, [pc, #584]	; (800776c <_strtod_l+0xbf4>)
 8007524:	403b      	ands	r3, r7
 8007526:	930d      	str	r3, [sp, #52]	; 0x34
 8007528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800752a:	4b91      	ldr	r3, [pc, #580]	; (8007770 <_strtod_l+0xbf8>)
 800752c:	429a      	cmp	r2, r3
 800752e:	f040 80b0 	bne.w	8007692 <_strtod_l+0xb1a>
 8007532:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007536:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800753a:	ec4b ab10 	vmov	d0, sl, fp
 800753e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007542:	f002 f81b 	bl	800957c <__ulp>
 8007546:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800754a:	ec53 2b10 	vmov	r2, r3, d0
 800754e:	f7f9 f85b 	bl	8000608 <__aeabi_dmul>
 8007552:	4652      	mov	r2, sl
 8007554:	465b      	mov	r3, fp
 8007556:	f7f8 fea1 	bl	800029c <__adddf3>
 800755a:	460b      	mov	r3, r1
 800755c:	4983      	ldr	r1, [pc, #524]	; (800776c <_strtod_l+0xbf4>)
 800755e:	4a85      	ldr	r2, [pc, #532]	; (8007774 <_strtod_l+0xbfc>)
 8007560:	4019      	ands	r1, r3
 8007562:	4291      	cmp	r1, r2
 8007564:	4682      	mov	sl, r0
 8007566:	d960      	bls.n	800762a <_strtod_l+0xab2>
 8007568:	ee18 3a90 	vmov	r3, s17
 800756c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007570:	4293      	cmp	r3, r2
 8007572:	d104      	bne.n	800757e <_strtod_l+0xa06>
 8007574:	ee18 3a10 	vmov	r3, s16
 8007578:	3301      	adds	r3, #1
 800757a:	f43f ad45 	beq.w	8007008 <_strtod_l+0x490>
 800757e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007780 <_strtod_l+0xc08>
 8007582:	f04f 3aff 	mov.w	sl, #4294967295
 8007586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007588:	4620      	mov	r0, r4
 800758a:	f001 fcc5 	bl	8008f18 <_Bfree>
 800758e:	9905      	ldr	r1, [sp, #20]
 8007590:	4620      	mov	r0, r4
 8007592:	f001 fcc1 	bl	8008f18 <_Bfree>
 8007596:	4631      	mov	r1, r6
 8007598:	4620      	mov	r0, r4
 800759a:	f001 fcbd 	bl	8008f18 <_Bfree>
 800759e:	4629      	mov	r1, r5
 80075a0:	4620      	mov	r0, r4
 80075a2:	f001 fcb9 	bl	8008f18 <_Bfree>
 80075a6:	e61a      	b.n	80071de <_strtod_l+0x666>
 80075a8:	f1ba 0f00 	cmp.w	sl, #0
 80075ac:	d11b      	bne.n	80075e6 <_strtod_l+0xa6e>
 80075ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075b2:	b9f3      	cbnz	r3, 80075f2 <_strtod_l+0xa7a>
 80075b4:	4b6c      	ldr	r3, [pc, #432]	; (8007768 <_strtod_l+0xbf0>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f9 fa96 	bl	8000aec <__aeabi_dcmplt>
 80075c0:	b9d0      	cbnz	r0, 80075f8 <_strtod_l+0xa80>
 80075c2:	4640      	mov	r0, r8
 80075c4:	4649      	mov	r1, r9
 80075c6:	4b6c      	ldr	r3, [pc, #432]	; (8007778 <_strtod_l+0xc00>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	f7f9 f81d 	bl	8000608 <__aeabi_dmul>
 80075ce:	4680      	mov	r8, r0
 80075d0:	4689      	mov	r9, r1
 80075d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80075da:	9315      	str	r3, [sp, #84]	; 0x54
 80075dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80075e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075e4:	e79d      	b.n	8007522 <_strtod_l+0x9aa>
 80075e6:	f1ba 0f01 	cmp.w	sl, #1
 80075ea:	d102      	bne.n	80075f2 <_strtod_l+0xa7a>
 80075ec:	2f00      	cmp	r7, #0
 80075ee:	f43f ad83 	beq.w	80070f8 <_strtod_l+0x580>
 80075f2:	4b62      	ldr	r3, [pc, #392]	; (800777c <_strtod_l+0xc04>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	e78e      	b.n	8007516 <_strtod_l+0x99e>
 80075f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007778 <_strtod_l+0xc00>
 80075fc:	f04f 0800 	mov.w	r8, #0
 8007600:	e7e7      	b.n	80075d2 <_strtod_l+0xa5a>
 8007602:	4b5d      	ldr	r3, [pc, #372]	; (8007778 <_strtod_l+0xc00>)
 8007604:	4640      	mov	r0, r8
 8007606:	4649      	mov	r1, r9
 8007608:	2200      	movs	r2, #0
 800760a:	f7f8 fffd 	bl	8000608 <__aeabi_dmul>
 800760e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007610:	4680      	mov	r8, r0
 8007612:	4689      	mov	r9, r1
 8007614:	b933      	cbnz	r3, 8007624 <_strtod_l+0xaac>
 8007616:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800761a:	900e      	str	r0, [sp, #56]	; 0x38
 800761c:	930f      	str	r3, [sp, #60]	; 0x3c
 800761e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007622:	e7dd      	b.n	80075e0 <_strtod_l+0xa68>
 8007624:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007628:	e7f9      	b.n	800761e <_strtod_l+0xaa6>
 800762a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800762e:	9b04      	ldr	r3, [sp, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1a8      	bne.n	8007586 <_strtod_l+0xa0e>
 8007634:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007638:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	051b      	lsls	r3, r3, #20
 800763e:	429a      	cmp	r2, r3
 8007640:	d1a1      	bne.n	8007586 <_strtod_l+0xa0e>
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f9 fb3f 	bl	8000cc8 <__aeabi_d2lz>
 800764a:	f7f8 ffaf 	bl	80005ac <__aeabi_l2d>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	f7f8 fe1f 	bl	8000298 <__aeabi_dsub>
 800765a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800765c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007660:	ea43 030a 	orr.w	r3, r3, sl
 8007664:	4313      	orrs	r3, r2
 8007666:	4680      	mov	r8, r0
 8007668:	4689      	mov	r9, r1
 800766a:	d055      	beq.n	8007718 <_strtod_l+0xba0>
 800766c:	a336      	add	r3, pc, #216	; (adr r3, 8007748 <_strtod_l+0xbd0>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f9 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	f47f acd0 	bne.w	800701c <_strtod_l+0x4a4>
 800767c:	a334      	add	r3, pc, #208	; (adr r3, 8007750 <_strtod_l+0xbd8>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	4640      	mov	r0, r8
 8007684:	4649      	mov	r1, r9
 8007686:	f7f9 fa4f 	bl	8000b28 <__aeabi_dcmpgt>
 800768a:	2800      	cmp	r0, #0
 800768c:	f43f af7b 	beq.w	8007586 <_strtod_l+0xa0e>
 8007690:	e4c4      	b.n	800701c <_strtod_l+0x4a4>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	b333      	cbz	r3, 80076e4 <_strtod_l+0xb6c>
 8007696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007698:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800769c:	d822      	bhi.n	80076e4 <_strtod_l+0xb6c>
 800769e:	a32e      	add	r3, pc, #184	; (adr r3, 8007758 <_strtod_l+0xbe0>)
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	4640      	mov	r0, r8
 80076a6:	4649      	mov	r1, r9
 80076a8:	f7f9 fa2a 	bl	8000b00 <__aeabi_dcmple>
 80076ac:	b1a0      	cbz	r0, 80076d8 <_strtod_l+0xb60>
 80076ae:	4649      	mov	r1, r9
 80076b0:	4640      	mov	r0, r8
 80076b2:	f7f9 fa81 	bl	8000bb8 <__aeabi_d2uiz>
 80076b6:	2801      	cmp	r0, #1
 80076b8:	bf38      	it	cc
 80076ba:	2001      	movcc	r0, #1
 80076bc:	f7f8 ff2a 	bl	8000514 <__aeabi_ui2d>
 80076c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c2:	4680      	mov	r8, r0
 80076c4:	4689      	mov	r9, r1
 80076c6:	bb23      	cbnz	r3, 8007712 <_strtod_l+0xb9a>
 80076c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076cc:	9010      	str	r0, [sp, #64]	; 0x40
 80076ce:	9311      	str	r3, [sp, #68]	; 0x44
 80076d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80076e0:	1a9b      	subs	r3, r3, r2
 80076e2:	9309      	str	r3, [sp, #36]	; 0x24
 80076e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076e8:	eeb0 0a48 	vmov.f32	s0, s16
 80076ec:	eef0 0a68 	vmov.f32	s1, s17
 80076f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076f4:	f001 ff42 	bl	800957c <__ulp>
 80076f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076fc:	ec53 2b10 	vmov	r2, r3, d0
 8007700:	f7f8 ff82 	bl	8000608 <__aeabi_dmul>
 8007704:	ec53 2b18 	vmov	r2, r3, d8
 8007708:	f7f8 fdc8 	bl	800029c <__adddf3>
 800770c:	4682      	mov	sl, r0
 800770e:	468b      	mov	fp, r1
 8007710:	e78d      	b.n	800762e <_strtod_l+0xab6>
 8007712:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007716:	e7db      	b.n	80076d0 <_strtod_l+0xb58>
 8007718:	a311      	add	r3, pc, #68	; (adr r3, 8007760 <_strtod_l+0xbe8>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f7f9 f9e5 	bl	8000aec <__aeabi_dcmplt>
 8007722:	e7b2      	b.n	800768a <_strtod_l+0xb12>
 8007724:	2300      	movs	r3, #0
 8007726:	930a      	str	r3, [sp, #40]	; 0x28
 8007728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800772a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	f7ff ba6b 	b.w	8006c08 <_strtod_l+0x90>
 8007732:	2a65      	cmp	r2, #101	; 0x65
 8007734:	f43f ab5f 	beq.w	8006df6 <_strtod_l+0x27e>
 8007738:	2a45      	cmp	r2, #69	; 0x45
 800773a:	f43f ab5c 	beq.w	8006df6 <_strtod_l+0x27e>
 800773e:	2301      	movs	r3, #1
 8007740:	f7ff bb94 	b.w	8006e6c <_strtod_l+0x2f4>
 8007744:	f3af 8000 	nop.w
 8007748:	94a03595 	.word	0x94a03595
 800774c:	3fdfffff 	.word	0x3fdfffff
 8007750:	35afe535 	.word	0x35afe535
 8007754:	3fe00000 	.word	0x3fe00000
 8007758:	ffc00000 	.word	0xffc00000
 800775c:	41dfffff 	.word	0x41dfffff
 8007760:	94a03595 	.word	0x94a03595
 8007764:	3fcfffff 	.word	0x3fcfffff
 8007768:	3ff00000 	.word	0x3ff00000
 800776c:	7ff00000 	.word	0x7ff00000
 8007770:	7fe00000 	.word	0x7fe00000
 8007774:	7c9fffff 	.word	0x7c9fffff
 8007778:	3fe00000 	.word	0x3fe00000
 800777c:	bff00000 	.word	0xbff00000
 8007780:	7fefffff 	.word	0x7fefffff

08007784 <_strtod_r>:
 8007784:	4b01      	ldr	r3, [pc, #4]	; (800778c <_strtod_r+0x8>)
 8007786:	f7ff b9f7 	b.w	8006b78 <_strtod_l>
 800778a:	bf00      	nop
 800778c:	20000078 	.word	0x20000078

08007790 <_strtol_l.constprop.0>:
 8007790:	2b01      	cmp	r3, #1
 8007792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007796:	d001      	beq.n	800779c <_strtol_l.constprop.0+0xc>
 8007798:	2b24      	cmp	r3, #36	; 0x24
 800779a:	d906      	bls.n	80077aa <_strtol_l.constprop.0+0x1a>
 800779c:	f7fe fad6 	bl	8005d4c <__errno>
 80077a0:	2316      	movs	r3, #22
 80077a2:	6003      	str	r3, [r0, #0]
 80077a4:	2000      	movs	r0, #0
 80077a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007890 <_strtol_l.constprop.0+0x100>
 80077ae:	460d      	mov	r5, r1
 80077b0:	462e      	mov	r6, r5
 80077b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80077ba:	f017 0708 	ands.w	r7, r7, #8
 80077be:	d1f7      	bne.n	80077b0 <_strtol_l.constprop.0+0x20>
 80077c0:	2c2d      	cmp	r4, #45	; 0x2d
 80077c2:	d132      	bne.n	800782a <_strtol_l.constprop.0+0x9a>
 80077c4:	782c      	ldrb	r4, [r5, #0]
 80077c6:	2701      	movs	r7, #1
 80077c8:	1cb5      	adds	r5, r6, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d05b      	beq.n	8007886 <_strtol_l.constprop.0+0xf6>
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d109      	bne.n	80077e6 <_strtol_l.constprop.0+0x56>
 80077d2:	2c30      	cmp	r4, #48	; 0x30
 80077d4:	d107      	bne.n	80077e6 <_strtol_l.constprop.0+0x56>
 80077d6:	782c      	ldrb	r4, [r5, #0]
 80077d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077dc:	2c58      	cmp	r4, #88	; 0x58
 80077de:	d14d      	bne.n	800787c <_strtol_l.constprop.0+0xec>
 80077e0:	786c      	ldrb	r4, [r5, #1]
 80077e2:	2310      	movs	r3, #16
 80077e4:	3502      	adds	r5, #2
 80077e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80077ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ee:	f04f 0c00 	mov.w	ip, #0
 80077f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80077f6:	4666      	mov	r6, ip
 80077f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80077fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007800:	f1be 0f09 	cmp.w	lr, #9
 8007804:	d816      	bhi.n	8007834 <_strtol_l.constprop.0+0xa4>
 8007806:	4674      	mov	r4, lr
 8007808:	42a3      	cmp	r3, r4
 800780a:	dd24      	ble.n	8007856 <_strtol_l.constprop.0+0xc6>
 800780c:	f1bc 0f00 	cmp.w	ip, #0
 8007810:	db1e      	blt.n	8007850 <_strtol_l.constprop.0+0xc0>
 8007812:	45b1      	cmp	r9, r6
 8007814:	d31c      	bcc.n	8007850 <_strtol_l.constprop.0+0xc0>
 8007816:	d101      	bne.n	800781c <_strtol_l.constprop.0+0x8c>
 8007818:	45a2      	cmp	sl, r4
 800781a:	db19      	blt.n	8007850 <_strtol_l.constprop.0+0xc0>
 800781c:	fb06 4603 	mla	r6, r6, r3, r4
 8007820:	f04f 0c01 	mov.w	ip, #1
 8007824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007828:	e7e8      	b.n	80077fc <_strtol_l.constprop.0+0x6c>
 800782a:	2c2b      	cmp	r4, #43	; 0x2b
 800782c:	bf04      	itt	eq
 800782e:	782c      	ldrbeq	r4, [r5, #0]
 8007830:	1cb5      	addeq	r5, r6, #2
 8007832:	e7ca      	b.n	80077ca <_strtol_l.constprop.0+0x3a>
 8007834:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007838:	f1be 0f19 	cmp.w	lr, #25
 800783c:	d801      	bhi.n	8007842 <_strtol_l.constprop.0+0xb2>
 800783e:	3c37      	subs	r4, #55	; 0x37
 8007840:	e7e2      	b.n	8007808 <_strtol_l.constprop.0+0x78>
 8007842:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007846:	f1be 0f19 	cmp.w	lr, #25
 800784a:	d804      	bhi.n	8007856 <_strtol_l.constprop.0+0xc6>
 800784c:	3c57      	subs	r4, #87	; 0x57
 800784e:	e7db      	b.n	8007808 <_strtol_l.constprop.0+0x78>
 8007850:	f04f 3cff 	mov.w	ip, #4294967295
 8007854:	e7e6      	b.n	8007824 <_strtol_l.constprop.0+0x94>
 8007856:	f1bc 0f00 	cmp.w	ip, #0
 800785a:	da05      	bge.n	8007868 <_strtol_l.constprop.0+0xd8>
 800785c:	2322      	movs	r3, #34	; 0x22
 800785e:	6003      	str	r3, [r0, #0]
 8007860:	4646      	mov	r6, r8
 8007862:	b942      	cbnz	r2, 8007876 <_strtol_l.constprop.0+0xe6>
 8007864:	4630      	mov	r0, r6
 8007866:	e79e      	b.n	80077a6 <_strtol_l.constprop.0+0x16>
 8007868:	b107      	cbz	r7, 800786c <_strtol_l.constprop.0+0xdc>
 800786a:	4276      	negs	r6, r6
 800786c:	2a00      	cmp	r2, #0
 800786e:	d0f9      	beq.n	8007864 <_strtol_l.constprop.0+0xd4>
 8007870:	f1bc 0f00 	cmp.w	ip, #0
 8007874:	d000      	beq.n	8007878 <_strtol_l.constprop.0+0xe8>
 8007876:	1e69      	subs	r1, r5, #1
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	e7f3      	b.n	8007864 <_strtol_l.constprop.0+0xd4>
 800787c:	2430      	movs	r4, #48	; 0x30
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1b1      	bne.n	80077e6 <_strtol_l.constprop.0+0x56>
 8007882:	2308      	movs	r3, #8
 8007884:	e7af      	b.n	80077e6 <_strtol_l.constprop.0+0x56>
 8007886:	2c30      	cmp	r4, #48	; 0x30
 8007888:	d0a5      	beq.n	80077d6 <_strtol_l.constprop.0+0x46>
 800788a:	230a      	movs	r3, #10
 800788c:	e7ab      	b.n	80077e6 <_strtol_l.constprop.0+0x56>
 800788e:	bf00      	nop
 8007890:	0800a7d1 	.word	0x0800a7d1

08007894 <_strtol_r>:
 8007894:	f7ff bf7c 	b.w	8007790 <_strtol_l.constprop.0>

08007898 <quorem>:
 8007898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	6903      	ldr	r3, [r0, #16]
 800789e:	690c      	ldr	r4, [r1, #16]
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	4607      	mov	r7, r0
 80078a4:	f2c0 8081 	blt.w	80079aa <quorem+0x112>
 80078a8:	3c01      	subs	r4, #1
 80078aa:	f101 0814 	add.w	r8, r1, #20
 80078ae:	f100 0514 	add.w	r5, r0, #20
 80078b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078c0:	3301      	adds	r3, #1
 80078c2:	429a      	cmp	r2, r3
 80078c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80078d0:	d331      	bcc.n	8007936 <quorem+0x9e>
 80078d2:	f04f 0e00 	mov.w	lr, #0
 80078d6:	4640      	mov	r0, r8
 80078d8:	46ac      	mov	ip, r5
 80078da:	46f2      	mov	sl, lr
 80078dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80078e0:	b293      	uxth	r3, r2
 80078e2:	fb06 e303 	mla	r3, r6, r3, lr
 80078e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	ebaa 0303 	sub.w	r3, sl, r3
 80078f0:	f8dc a000 	ldr.w	sl, [ip]
 80078f4:	0c12      	lsrs	r2, r2, #16
 80078f6:	fa13 f38a 	uxtah	r3, r3, sl
 80078fa:	fb06 e202 	mla	r2, r6, r2, lr
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007906:	b292      	uxth	r2, r2
 8007908:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800790c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007910:	f8bd 3000 	ldrh.w	r3, [sp]
 8007914:	4581      	cmp	r9, r0
 8007916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800791a:	f84c 3b04 	str.w	r3, [ip], #4
 800791e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007922:	d2db      	bcs.n	80078dc <quorem+0x44>
 8007924:	f855 300b 	ldr.w	r3, [r5, fp]
 8007928:	b92b      	cbnz	r3, 8007936 <quorem+0x9e>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	3b04      	subs	r3, #4
 800792e:	429d      	cmp	r5, r3
 8007930:	461a      	mov	r2, r3
 8007932:	d32e      	bcc.n	8007992 <quorem+0xfa>
 8007934:	613c      	str	r4, [r7, #16]
 8007936:	4638      	mov	r0, r7
 8007938:	f001 fd7a 	bl	8009430 <__mcmp>
 800793c:	2800      	cmp	r0, #0
 800793e:	db24      	blt.n	800798a <quorem+0xf2>
 8007940:	3601      	adds	r6, #1
 8007942:	4628      	mov	r0, r5
 8007944:	f04f 0c00 	mov.w	ip, #0
 8007948:	f858 2b04 	ldr.w	r2, [r8], #4
 800794c:	f8d0 e000 	ldr.w	lr, [r0]
 8007950:	b293      	uxth	r3, r2
 8007952:	ebac 0303 	sub.w	r3, ip, r3
 8007956:	0c12      	lsrs	r2, r2, #16
 8007958:	fa13 f38e 	uxtah	r3, r3, lr
 800795c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800796a:	45c1      	cmp	r9, r8
 800796c:	f840 3b04 	str.w	r3, [r0], #4
 8007970:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007974:	d2e8      	bcs.n	8007948 <quorem+0xb0>
 8007976:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800797a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800797e:	b922      	cbnz	r2, 800798a <quorem+0xf2>
 8007980:	3b04      	subs	r3, #4
 8007982:	429d      	cmp	r5, r3
 8007984:	461a      	mov	r2, r3
 8007986:	d30a      	bcc.n	800799e <quorem+0x106>
 8007988:	613c      	str	r4, [r7, #16]
 800798a:	4630      	mov	r0, r6
 800798c:	b003      	add	sp, #12
 800798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	3b04      	subs	r3, #4
 8007996:	2a00      	cmp	r2, #0
 8007998:	d1cc      	bne.n	8007934 <quorem+0x9c>
 800799a:	3c01      	subs	r4, #1
 800799c:	e7c7      	b.n	800792e <quorem+0x96>
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	3b04      	subs	r3, #4
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	d1f0      	bne.n	8007988 <quorem+0xf0>
 80079a6:	3c01      	subs	r4, #1
 80079a8:	e7eb      	b.n	8007982 <quorem+0xea>
 80079aa:	2000      	movs	r0, #0
 80079ac:	e7ee      	b.n	800798c <quorem+0xf4>
	...

080079b0 <_dtoa_r>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	ed2d 8b04 	vpush	{d8-d9}
 80079b8:	ec57 6b10 	vmov	r6, r7, d0
 80079bc:	b093      	sub	sp, #76	; 0x4c
 80079be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80079c4:	9106      	str	r1, [sp, #24]
 80079c6:	ee10 aa10 	vmov	sl, s0
 80079ca:	4604      	mov	r4, r0
 80079cc:	9209      	str	r2, [sp, #36]	; 0x24
 80079ce:	930c      	str	r3, [sp, #48]	; 0x30
 80079d0:	46bb      	mov	fp, r7
 80079d2:	b975      	cbnz	r5, 80079f2 <_dtoa_r+0x42>
 80079d4:	2010      	movs	r0, #16
 80079d6:	f001 fa45 	bl	8008e64 <malloc>
 80079da:	4602      	mov	r2, r0
 80079dc:	6260      	str	r0, [r4, #36]	; 0x24
 80079de:	b920      	cbnz	r0, 80079ea <_dtoa_r+0x3a>
 80079e0:	4ba7      	ldr	r3, [pc, #668]	; (8007c80 <_dtoa_r+0x2d0>)
 80079e2:	21ea      	movs	r1, #234	; 0xea
 80079e4:	48a7      	ldr	r0, [pc, #668]	; (8007c84 <_dtoa_r+0x2d4>)
 80079e6:	f002 fc17 	bl	800a218 <__assert_func>
 80079ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079ee:	6005      	str	r5, [r0, #0]
 80079f0:	60c5      	str	r5, [r0, #12]
 80079f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079f4:	6819      	ldr	r1, [r3, #0]
 80079f6:	b151      	cbz	r1, 8007a0e <_dtoa_r+0x5e>
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	604a      	str	r2, [r1, #4]
 80079fc:	2301      	movs	r3, #1
 80079fe:	4093      	lsls	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]
 8007a02:	4620      	mov	r0, r4
 8007a04:	f001 fa88 	bl	8008f18 <_Bfree>
 8007a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	1e3b      	subs	r3, r7, #0
 8007a10:	bfaa      	itet	ge
 8007a12:	2300      	movge	r3, #0
 8007a14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007a18:	f8c8 3000 	strge.w	r3, [r8]
 8007a1c:	4b9a      	ldr	r3, [pc, #616]	; (8007c88 <_dtoa_r+0x2d8>)
 8007a1e:	bfbc      	itt	lt
 8007a20:	2201      	movlt	r2, #1
 8007a22:	f8c8 2000 	strlt.w	r2, [r8]
 8007a26:	ea33 030b 	bics.w	r3, r3, fp
 8007a2a:	d11b      	bne.n	8007a64 <_dtoa_r+0xb4>
 8007a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a38:	4333      	orrs	r3, r6
 8007a3a:	f000 8592 	beq.w	8008562 <_dtoa_r+0xbb2>
 8007a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a40:	b963      	cbnz	r3, 8007a5c <_dtoa_r+0xac>
 8007a42:	4b92      	ldr	r3, [pc, #584]	; (8007c8c <_dtoa_r+0x2dc>)
 8007a44:	e022      	b.n	8007a8c <_dtoa_r+0xdc>
 8007a46:	4b92      	ldr	r3, [pc, #584]	; (8007c90 <_dtoa_r+0x2e0>)
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	9801      	ldr	r0, [sp, #4]
 8007a52:	b013      	add	sp, #76	; 0x4c
 8007a54:	ecbd 8b04 	vpop	{d8-d9}
 8007a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5c:	4b8b      	ldr	r3, [pc, #556]	; (8007c8c <_dtoa_r+0x2dc>)
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	3303      	adds	r3, #3
 8007a62:	e7f3      	b.n	8007a4c <_dtoa_r+0x9c>
 8007a64:	2200      	movs	r2, #0
 8007a66:	2300      	movs	r3, #0
 8007a68:	4650      	mov	r0, sl
 8007a6a:	4659      	mov	r1, fp
 8007a6c:	f7f9 f834 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a70:	ec4b ab19 	vmov	d9, sl, fp
 8007a74:	4680      	mov	r8, r0
 8007a76:	b158      	cbz	r0, 8007a90 <_dtoa_r+0xe0>
 8007a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 856b 	beq.w	800855c <_dtoa_r+0xbac>
 8007a86:	4883      	ldr	r0, [pc, #524]	; (8007c94 <_dtoa_r+0x2e4>)
 8007a88:	6018      	str	r0, [r3, #0]
 8007a8a:	1e43      	subs	r3, r0, #1
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	e7df      	b.n	8007a50 <_dtoa_r+0xa0>
 8007a90:	ec4b ab10 	vmov	d0, sl, fp
 8007a94:	aa10      	add	r2, sp, #64	; 0x40
 8007a96:	a911      	add	r1, sp, #68	; 0x44
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f001 fdeb 	bl	8009674 <__d2b>
 8007a9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007aa2:	ee08 0a10 	vmov	s16, r0
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	f000 8084 	beq.w	8007bb4 <_dtoa_r+0x204>
 8007aac:	ee19 3a90 	vmov	r3, s19
 8007ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ab8:	4656      	mov	r6, sl
 8007aba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007ac6:	4b74      	ldr	r3, [pc, #464]	; (8007c98 <_dtoa_r+0x2e8>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	4630      	mov	r0, r6
 8007acc:	4639      	mov	r1, r7
 8007ace:	f7f8 fbe3 	bl	8000298 <__aeabi_dsub>
 8007ad2:	a365      	add	r3, pc, #404	; (adr r3, 8007c68 <_dtoa_r+0x2b8>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fd96 	bl	8000608 <__aeabi_dmul>
 8007adc:	a364      	add	r3, pc, #400	; (adr r3, 8007c70 <_dtoa_r+0x2c0>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	f7f8 fbdb 	bl	800029c <__adddf3>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	4628      	mov	r0, r5
 8007aea:	460f      	mov	r7, r1
 8007aec:	f7f8 fd22 	bl	8000534 <__aeabi_i2d>
 8007af0:	a361      	add	r3, pc, #388	; (adr r3, 8007c78 <_dtoa_r+0x2c8>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f7f8 fd87 	bl	8000608 <__aeabi_dmul>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4630      	mov	r0, r6
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f8 fbcb 	bl	800029c <__adddf3>
 8007b06:	4606      	mov	r6, r0
 8007b08:	460f      	mov	r7, r1
 8007b0a:	f7f9 f82d 	bl	8000b68 <__aeabi_d2iz>
 8007b0e:	2200      	movs	r2, #0
 8007b10:	9000      	str	r0, [sp, #0]
 8007b12:	2300      	movs	r3, #0
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 ffe8 	bl	8000aec <__aeabi_dcmplt>
 8007b1c:	b150      	cbz	r0, 8007b34 <_dtoa_r+0x184>
 8007b1e:	9800      	ldr	r0, [sp, #0]
 8007b20:	f7f8 fd08 	bl	8000534 <__aeabi_i2d>
 8007b24:	4632      	mov	r2, r6
 8007b26:	463b      	mov	r3, r7
 8007b28:	f7f8 ffd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b2c:	b910      	cbnz	r0, 8007b34 <_dtoa_r+0x184>
 8007b2e:	9b00      	ldr	r3, [sp, #0]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	9b00      	ldr	r3, [sp, #0]
 8007b36:	2b16      	cmp	r3, #22
 8007b38:	d85a      	bhi.n	8007bf0 <_dtoa_r+0x240>
 8007b3a:	9a00      	ldr	r2, [sp, #0]
 8007b3c:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <_dtoa_r+0x2ec>)
 8007b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	ec51 0b19 	vmov	r0, r1, d9
 8007b4a:	f7f8 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d050      	beq.n	8007bf4 <_dtoa_r+0x244>
 8007b52:	9b00      	ldr	r3, [sp, #0]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b5e:	1b5d      	subs	r5, r3, r5
 8007b60:	1e6b      	subs	r3, r5, #1
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	bf45      	ittet	mi
 8007b66:	f1c5 0301 	rsbmi	r3, r5, #1
 8007b6a:	9304      	strmi	r3, [sp, #16]
 8007b6c:	2300      	movpl	r3, #0
 8007b6e:	2300      	movmi	r3, #0
 8007b70:	bf4c      	ite	mi
 8007b72:	9305      	strmi	r3, [sp, #20]
 8007b74:	9304      	strpl	r3, [sp, #16]
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	db3d      	blt.n	8007bf8 <_dtoa_r+0x248>
 8007b7c:	9b05      	ldr	r3, [sp, #20]
 8007b7e:	9a00      	ldr	r2, [sp, #0]
 8007b80:	920a      	str	r2, [sp, #40]	; 0x28
 8007b82:	4413      	add	r3, r2
 8007b84:	9305      	str	r3, [sp, #20]
 8007b86:	2300      	movs	r3, #0
 8007b88:	9307      	str	r3, [sp, #28]
 8007b8a:	9b06      	ldr	r3, [sp, #24]
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	f200 8089 	bhi.w	8007ca4 <_dtoa_r+0x2f4>
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	bfc4      	itt	gt
 8007b96:	3b04      	subgt	r3, #4
 8007b98:	9306      	strgt	r3, [sp, #24]
 8007b9a:	9b06      	ldr	r3, [sp, #24]
 8007b9c:	f1a3 0302 	sub.w	r3, r3, #2
 8007ba0:	bfcc      	ite	gt
 8007ba2:	2500      	movgt	r5, #0
 8007ba4:	2501      	movle	r5, #1
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	f200 8087 	bhi.w	8007cba <_dtoa_r+0x30a>
 8007bac:	e8df f003 	tbb	[pc, r3]
 8007bb0:	59383a2d 	.word	0x59383a2d
 8007bb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007bb8:	441d      	add	r5, r3
 8007bba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	bfc1      	itttt	gt
 8007bc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007bca:	fa0b f303 	lslgt.w	r3, fp, r3
 8007bce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007bd2:	bfda      	itte	le
 8007bd4:	f1c3 0320 	rsble	r3, r3, #32
 8007bd8:	fa06 f003 	lslle.w	r0, r6, r3
 8007bdc:	4318      	orrgt	r0, r3
 8007bde:	f7f8 fc99 	bl	8000514 <__aeabi_ui2d>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4606      	mov	r6, r0
 8007be6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007bea:	3d01      	subs	r5, #1
 8007bec:	930e      	str	r3, [sp, #56]	; 0x38
 8007bee:	e76a      	b.n	8007ac6 <_dtoa_r+0x116>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e7b2      	b.n	8007b5a <_dtoa_r+0x1aa>
 8007bf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007bf6:	e7b1      	b.n	8007b5c <_dtoa_r+0x1ac>
 8007bf8:	9b04      	ldr	r3, [sp, #16]
 8007bfa:	9a00      	ldr	r2, [sp, #0]
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	9304      	str	r3, [sp, #16]
 8007c00:	4253      	negs	r3, r2
 8007c02:	9307      	str	r3, [sp, #28]
 8007c04:	2300      	movs	r3, #0
 8007c06:	930a      	str	r3, [sp, #40]	; 0x28
 8007c08:	e7bf      	b.n	8007b8a <_dtoa_r+0x1da>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9308      	str	r3, [sp, #32]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dc55      	bgt.n	8007cc0 <_dtoa_r+0x310>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c1e:	e00c      	b.n	8007c3a <_dtoa_r+0x28a>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e7f3      	b.n	8007c0c <_dtoa_r+0x25c>
 8007c24:	2300      	movs	r3, #0
 8007c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c28:	9308      	str	r3, [sp, #32]
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	3301      	adds	r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	bfb8      	it	lt
 8007c38:	2301      	movlt	r3, #1
 8007c3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	6042      	str	r2, [r0, #4]
 8007c40:	2204      	movs	r2, #4
 8007c42:	f102 0614 	add.w	r6, r2, #20
 8007c46:	429e      	cmp	r6, r3
 8007c48:	6841      	ldr	r1, [r0, #4]
 8007c4a:	d93d      	bls.n	8007cc8 <_dtoa_r+0x318>
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f001 f923 	bl	8008e98 <_Balloc>
 8007c52:	9001      	str	r0, [sp, #4]
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d13b      	bne.n	8007cd0 <_dtoa_r+0x320>
 8007c58:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <_dtoa_r+0x2f0>)
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c60:	e6c0      	b.n	80079e4 <_dtoa_r+0x34>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e7df      	b.n	8007c26 <_dtoa_r+0x276>
 8007c66:	bf00      	nop
 8007c68:	636f4361 	.word	0x636f4361
 8007c6c:	3fd287a7 	.word	0x3fd287a7
 8007c70:	8b60c8b3 	.word	0x8b60c8b3
 8007c74:	3fc68a28 	.word	0x3fc68a28
 8007c78:	509f79fb 	.word	0x509f79fb
 8007c7c:	3fd34413 	.word	0x3fd34413
 8007c80:	0800a8de 	.word	0x0800a8de
 8007c84:	0800a8f5 	.word	0x0800a8f5
 8007c88:	7ff00000 	.word	0x7ff00000
 8007c8c:	0800a8da 	.word	0x0800a8da
 8007c90:	0800a8d1 	.word	0x0800a8d1
 8007c94:	0800a751 	.word	0x0800a751
 8007c98:	3ff80000 	.word	0x3ff80000
 8007c9c:	0800aac8 	.word	0x0800aac8
 8007ca0:	0800a950 	.word	0x0800a950
 8007ca4:	2501      	movs	r5, #1
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9306      	str	r3, [sp, #24]
 8007caa:	9508      	str	r5, [sp, #32]
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2312      	movs	r3, #18
 8007cb8:	e7b0      	b.n	8007c1c <_dtoa_r+0x26c>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	9308      	str	r3, [sp, #32]
 8007cbe:	e7f5      	b.n	8007cac <_dtoa_r+0x2fc>
 8007cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007cc6:	e7b8      	b.n	8007c3a <_dtoa_r+0x28a>
 8007cc8:	3101      	adds	r1, #1
 8007cca:	6041      	str	r1, [r0, #4]
 8007ccc:	0052      	lsls	r2, r2, #1
 8007cce:	e7b8      	b.n	8007c42 <_dtoa_r+0x292>
 8007cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd2:	9a01      	ldr	r2, [sp, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	2b0e      	cmp	r3, #14
 8007cda:	f200 809d 	bhi.w	8007e18 <_dtoa_r+0x468>
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	f000 809a 	beq.w	8007e18 <_dtoa_r+0x468>
 8007ce4:	9b00      	ldr	r3, [sp, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dd32      	ble.n	8007d50 <_dtoa_r+0x3a0>
 8007cea:	4ab7      	ldr	r2, [pc, #732]	; (8007fc8 <_dtoa_r+0x618>)
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cf8:	9b00      	ldr	r3, [sp, #0]
 8007cfa:	05d8      	lsls	r0, r3, #23
 8007cfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d00:	d516      	bpl.n	8007d30 <_dtoa_r+0x380>
 8007d02:	4bb2      	ldr	r3, [pc, #712]	; (8007fcc <_dtoa_r+0x61c>)
 8007d04:	ec51 0b19 	vmov	r0, r1, d9
 8007d08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d0c:	f7f8 fda6 	bl	800085c <__aeabi_ddiv>
 8007d10:	f007 070f 	and.w	r7, r7, #15
 8007d14:	4682      	mov	sl, r0
 8007d16:	468b      	mov	fp, r1
 8007d18:	2503      	movs	r5, #3
 8007d1a:	4eac      	ldr	r6, [pc, #688]	; (8007fcc <_dtoa_r+0x61c>)
 8007d1c:	b957      	cbnz	r7, 8007d34 <_dtoa_r+0x384>
 8007d1e:	4642      	mov	r2, r8
 8007d20:	464b      	mov	r3, r9
 8007d22:	4650      	mov	r0, sl
 8007d24:	4659      	mov	r1, fp
 8007d26:	f7f8 fd99 	bl	800085c <__aeabi_ddiv>
 8007d2a:	4682      	mov	sl, r0
 8007d2c:	468b      	mov	fp, r1
 8007d2e:	e028      	b.n	8007d82 <_dtoa_r+0x3d2>
 8007d30:	2502      	movs	r5, #2
 8007d32:	e7f2      	b.n	8007d1a <_dtoa_r+0x36a>
 8007d34:	07f9      	lsls	r1, r7, #31
 8007d36:	d508      	bpl.n	8007d4a <_dtoa_r+0x39a>
 8007d38:	4640      	mov	r0, r8
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d40:	f7f8 fc62 	bl	8000608 <__aeabi_dmul>
 8007d44:	3501      	adds	r5, #1
 8007d46:	4680      	mov	r8, r0
 8007d48:	4689      	mov	r9, r1
 8007d4a:	107f      	asrs	r7, r7, #1
 8007d4c:	3608      	adds	r6, #8
 8007d4e:	e7e5      	b.n	8007d1c <_dtoa_r+0x36c>
 8007d50:	f000 809b 	beq.w	8007e8a <_dtoa_r+0x4da>
 8007d54:	9b00      	ldr	r3, [sp, #0]
 8007d56:	4f9d      	ldr	r7, [pc, #628]	; (8007fcc <_dtoa_r+0x61c>)
 8007d58:	425e      	negs	r6, r3
 8007d5a:	4b9b      	ldr	r3, [pc, #620]	; (8007fc8 <_dtoa_r+0x618>)
 8007d5c:	f006 020f 	and.w	r2, r6, #15
 8007d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	ec51 0b19 	vmov	r0, r1, d9
 8007d6c:	f7f8 fc4c 	bl	8000608 <__aeabi_dmul>
 8007d70:	1136      	asrs	r6, r6, #4
 8007d72:	4682      	mov	sl, r0
 8007d74:	468b      	mov	fp, r1
 8007d76:	2300      	movs	r3, #0
 8007d78:	2502      	movs	r5, #2
 8007d7a:	2e00      	cmp	r6, #0
 8007d7c:	d17a      	bne.n	8007e74 <_dtoa_r+0x4c4>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1d3      	bne.n	8007d2a <_dtoa_r+0x37a>
 8007d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8082 	beq.w	8007e8e <_dtoa_r+0x4de>
 8007d8a:	4b91      	ldr	r3, [pc, #580]	; (8007fd0 <_dtoa_r+0x620>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4650      	mov	r0, sl
 8007d90:	4659      	mov	r1, fp
 8007d92:	f7f8 feab 	bl	8000aec <__aeabi_dcmplt>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d079      	beq.n	8007e8e <_dtoa_r+0x4de>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d076      	beq.n	8007e8e <_dtoa_r+0x4de>
 8007da0:	9b02      	ldr	r3, [sp, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	dd36      	ble.n	8007e14 <_dtoa_r+0x464>
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	4650      	mov	r0, sl
 8007daa:	4659      	mov	r1, fp
 8007dac:	1e5f      	subs	r7, r3, #1
 8007dae:	2200      	movs	r2, #0
 8007db0:	4b88      	ldr	r3, [pc, #544]	; (8007fd4 <_dtoa_r+0x624>)
 8007db2:	f7f8 fc29 	bl	8000608 <__aeabi_dmul>
 8007db6:	9e02      	ldr	r6, [sp, #8]
 8007db8:	4682      	mov	sl, r0
 8007dba:	468b      	mov	fp, r1
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f7f8 fbb8 	bl	8000534 <__aeabi_i2d>
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	465b      	mov	r3, fp
 8007dc8:	f7f8 fc1e 	bl	8000608 <__aeabi_dmul>
 8007dcc:	4b82      	ldr	r3, [pc, #520]	; (8007fd8 <_dtoa_r+0x628>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f7f8 fa64 	bl	800029c <__adddf3>
 8007dd4:	46d0      	mov	r8, sl
 8007dd6:	46d9      	mov	r9, fp
 8007dd8:	4682      	mov	sl, r0
 8007dda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007dde:	2e00      	cmp	r6, #0
 8007de0:	d158      	bne.n	8007e94 <_dtoa_r+0x4e4>
 8007de2:	4b7e      	ldr	r3, [pc, #504]	; (8007fdc <_dtoa_r+0x62c>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	f7f8 fa55 	bl	8000298 <__aeabi_dsub>
 8007dee:	4652      	mov	r2, sl
 8007df0:	465b      	mov	r3, fp
 8007df2:	4680      	mov	r8, r0
 8007df4:	4689      	mov	r9, r1
 8007df6:	f7f8 fe97 	bl	8000b28 <__aeabi_dcmpgt>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f040 8295 	bne.w	800832a <_dtoa_r+0x97a>
 8007e00:	4652      	mov	r2, sl
 8007e02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e06:	4640      	mov	r0, r8
 8007e08:	4649      	mov	r1, r9
 8007e0a:	f7f8 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f040 8289 	bne.w	8008326 <_dtoa_r+0x976>
 8007e14:	ec5b ab19 	vmov	sl, fp, d9
 8007e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f2c0 8148 	blt.w	80080b0 <_dtoa_r+0x700>
 8007e20:	9a00      	ldr	r2, [sp, #0]
 8007e22:	2a0e      	cmp	r2, #14
 8007e24:	f300 8144 	bgt.w	80080b0 <_dtoa_r+0x700>
 8007e28:	4b67      	ldr	r3, [pc, #412]	; (8007fc8 <_dtoa_r+0x618>)
 8007e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f280 80d5 	bge.w	8007fe4 <_dtoa_r+0x634>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f300 80d1 	bgt.w	8007fe4 <_dtoa_r+0x634>
 8007e42:	f040 826f 	bne.w	8008324 <_dtoa_r+0x974>
 8007e46:	4b65      	ldr	r3, [pc, #404]	; (8007fdc <_dtoa_r+0x62c>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fbdb 	bl	8000608 <__aeabi_dmul>
 8007e52:	4652      	mov	r2, sl
 8007e54:	465b      	mov	r3, fp
 8007e56:	f7f8 fe5d 	bl	8000b14 <__aeabi_dcmpge>
 8007e5a:	9e03      	ldr	r6, [sp, #12]
 8007e5c:	4637      	mov	r7, r6
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f040 8245 	bne.w	80082ee <_dtoa_r+0x93e>
 8007e64:	9d01      	ldr	r5, [sp, #4]
 8007e66:	2331      	movs	r3, #49	; 0x31
 8007e68:	f805 3b01 	strb.w	r3, [r5], #1
 8007e6c:	9b00      	ldr	r3, [sp, #0]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	e240      	b.n	80082f6 <_dtoa_r+0x946>
 8007e74:	07f2      	lsls	r2, r6, #31
 8007e76:	d505      	bpl.n	8007e84 <_dtoa_r+0x4d4>
 8007e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e7c:	f7f8 fbc4 	bl	8000608 <__aeabi_dmul>
 8007e80:	3501      	adds	r5, #1
 8007e82:	2301      	movs	r3, #1
 8007e84:	1076      	asrs	r6, r6, #1
 8007e86:	3708      	adds	r7, #8
 8007e88:	e777      	b.n	8007d7a <_dtoa_r+0x3ca>
 8007e8a:	2502      	movs	r5, #2
 8007e8c:	e779      	b.n	8007d82 <_dtoa_r+0x3d2>
 8007e8e:	9f00      	ldr	r7, [sp, #0]
 8007e90:	9e03      	ldr	r6, [sp, #12]
 8007e92:	e794      	b.n	8007dbe <_dtoa_r+0x40e>
 8007e94:	9901      	ldr	r1, [sp, #4]
 8007e96:	4b4c      	ldr	r3, [pc, #304]	; (8007fc8 <_dtoa_r+0x618>)
 8007e98:	4431      	add	r1, r6
 8007e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8007e9c:	9908      	ldr	r1, [sp, #32]
 8007e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d043      	beq.n	8007f32 <_dtoa_r+0x582>
 8007eaa:	494d      	ldr	r1, [pc, #308]	; (8007fe0 <_dtoa_r+0x630>)
 8007eac:	2000      	movs	r0, #0
 8007eae:	f7f8 fcd5 	bl	800085c <__aeabi_ddiv>
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	465b      	mov	r3, fp
 8007eb6:	f7f8 f9ef 	bl	8000298 <__aeabi_dsub>
 8007eba:	9d01      	ldr	r5, [sp, #4]
 8007ebc:	4682      	mov	sl, r0
 8007ebe:	468b      	mov	fp, r1
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	f7f8 fe50 	bl	8000b68 <__aeabi_d2iz>
 8007ec8:	4606      	mov	r6, r0
 8007eca:	f7f8 fb33 	bl	8000534 <__aeabi_i2d>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	f7f8 f9df 	bl	8000298 <__aeabi_dsub>
 8007eda:	3630      	adds	r6, #48	; 0x30
 8007edc:	f805 6b01 	strb.w	r6, [r5], #1
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	4680      	mov	r8, r0
 8007ee6:	4689      	mov	r9, r1
 8007ee8:	f7f8 fe00 	bl	8000aec <__aeabi_dcmplt>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d163      	bne.n	8007fb8 <_dtoa_r+0x608>
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	4936      	ldr	r1, [pc, #216]	; (8007fd0 <_dtoa_r+0x620>)
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f7f8 f9ce 	bl	8000298 <__aeabi_dsub>
 8007efc:	4652      	mov	r2, sl
 8007efe:	465b      	mov	r3, fp
 8007f00:	f7f8 fdf4 	bl	8000aec <__aeabi_dcmplt>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f040 80b5 	bne.w	8008074 <_dtoa_r+0x6c4>
 8007f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0c:	429d      	cmp	r5, r3
 8007f0e:	d081      	beq.n	8007e14 <_dtoa_r+0x464>
 8007f10:	4b30      	ldr	r3, [pc, #192]	; (8007fd4 <_dtoa_r+0x624>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	4650      	mov	r0, sl
 8007f16:	4659      	mov	r1, fp
 8007f18:	f7f8 fb76 	bl	8000608 <__aeabi_dmul>
 8007f1c:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <_dtoa_r+0x624>)
 8007f1e:	4682      	mov	sl, r0
 8007f20:	468b      	mov	fp, r1
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	2200      	movs	r2, #0
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	4689      	mov	r9, r1
 8007f30:	e7c6      	b.n	8007ec0 <_dtoa_r+0x510>
 8007f32:	4650      	mov	r0, sl
 8007f34:	4659      	mov	r1, fp
 8007f36:	f7f8 fb67 	bl	8000608 <__aeabi_dmul>
 8007f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f3c:	9d01      	ldr	r5, [sp, #4]
 8007f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f40:	4682      	mov	sl, r0
 8007f42:	468b      	mov	fp, r1
 8007f44:	4649      	mov	r1, r9
 8007f46:	4640      	mov	r0, r8
 8007f48:	f7f8 fe0e 	bl	8000b68 <__aeabi_d2iz>
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	f7f8 faf1 	bl	8000534 <__aeabi_i2d>
 8007f52:	3630      	adds	r6, #48	; 0x30
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 f99c 	bl	8000298 <__aeabi_dsub>
 8007f60:	f805 6b01 	strb.w	r6, [r5], #1
 8007f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f66:	429d      	cmp	r5, r3
 8007f68:	4680      	mov	r8, r0
 8007f6a:	4689      	mov	r9, r1
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	d124      	bne.n	8007fbc <_dtoa_r+0x60c>
 8007f72:	4b1b      	ldr	r3, [pc, #108]	; (8007fe0 <_dtoa_r+0x630>)
 8007f74:	4650      	mov	r0, sl
 8007f76:	4659      	mov	r1, fp
 8007f78:	f7f8 f990 	bl	800029c <__adddf3>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4640      	mov	r0, r8
 8007f82:	4649      	mov	r1, r9
 8007f84:	f7f8 fdd0 	bl	8000b28 <__aeabi_dcmpgt>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d173      	bne.n	8008074 <_dtoa_r+0x6c4>
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	465b      	mov	r3, fp
 8007f90:	4913      	ldr	r1, [pc, #76]	; (8007fe0 <_dtoa_r+0x630>)
 8007f92:	2000      	movs	r0, #0
 8007f94:	f7f8 f980 	bl	8000298 <__aeabi_dsub>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	f7f8 fda4 	bl	8000aec <__aeabi_dcmplt>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f43f af35 	beq.w	8007e14 <_dtoa_r+0x464>
 8007faa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007fac:	1e6b      	subs	r3, r5, #1
 8007fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fb4:	2b30      	cmp	r3, #48	; 0x30
 8007fb6:	d0f8      	beq.n	8007faa <_dtoa_r+0x5fa>
 8007fb8:	9700      	str	r7, [sp, #0]
 8007fba:	e049      	b.n	8008050 <_dtoa_r+0x6a0>
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <_dtoa_r+0x624>)
 8007fbe:	f7f8 fb23 	bl	8000608 <__aeabi_dmul>
 8007fc2:	4680      	mov	r8, r0
 8007fc4:	4689      	mov	r9, r1
 8007fc6:	e7bd      	b.n	8007f44 <_dtoa_r+0x594>
 8007fc8:	0800aac8 	.word	0x0800aac8
 8007fcc:	0800aaa0 	.word	0x0800aaa0
 8007fd0:	3ff00000 	.word	0x3ff00000
 8007fd4:	40240000 	.word	0x40240000
 8007fd8:	401c0000 	.word	0x401c0000
 8007fdc:	40140000 	.word	0x40140000
 8007fe0:	3fe00000 	.word	0x3fe00000
 8007fe4:	9d01      	ldr	r5, [sp, #4]
 8007fe6:	4656      	mov	r6, sl
 8007fe8:	465f      	mov	r7, fp
 8007fea:	4642      	mov	r2, r8
 8007fec:	464b      	mov	r3, r9
 8007fee:	4630      	mov	r0, r6
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	f7f8 fc33 	bl	800085c <__aeabi_ddiv>
 8007ff6:	f7f8 fdb7 	bl	8000b68 <__aeabi_d2iz>
 8007ffa:	4682      	mov	sl, r0
 8007ffc:	f7f8 fa9a 	bl	8000534 <__aeabi_i2d>
 8008000:	4642      	mov	r2, r8
 8008002:	464b      	mov	r3, r9
 8008004:	f7f8 fb00 	bl	8000608 <__aeabi_dmul>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008014:	f7f8 f940 	bl	8000298 <__aeabi_dsub>
 8008018:	f805 6b01 	strb.w	r6, [r5], #1
 800801c:	9e01      	ldr	r6, [sp, #4]
 800801e:	9f03      	ldr	r7, [sp, #12]
 8008020:	1bae      	subs	r6, r5, r6
 8008022:	42b7      	cmp	r7, r6
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	d135      	bne.n	8008096 <_dtoa_r+0x6e6>
 800802a:	f7f8 f937 	bl	800029c <__adddf3>
 800802e:	4642      	mov	r2, r8
 8008030:	464b      	mov	r3, r9
 8008032:	4606      	mov	r6, r0
 8008034:	460f      	mov	r7, r1
 8008036:	f7f8 fd77 	bl	8000b28 <__aeabi_dcmpgt>
 800803a:	b9d0      	cbnz	r0, 8008072 <_dtoa_r+0x6c2>
 800803c:	4642      	mov	r2, r8
 800803e:	464b      	mov	r3, r9
 8008040:	4630      	mov	r0, r6
 8008042:	4639      	mov	r1, r7
 8008044:	f7f8 fd48 	bl	8000ad8 <__aeabi_dcmpeq>
 8008048:	b110      	cbz	r0, 8008050 <_dtoa_r+0x6a0>
 800804a:	f01a 0f01 	tst.w	sl, #1
 800804e:	d110      	bne.n	8008072 <_dtoa_r+0x6c2>
 8008050:	4620      	mov	r0, r4
 8008052:	ee18 1a10 	vmov	r1, s16
 8008056:	f000 ff5f 	bl	8008f18 <_Bfree>
 800805a:	2300      	movs	r3, #0
 800805c:	9800      	ldr	r0, [sp, #0]
 800805e:	702b      	strb	r3, [r5, #0]
 8008060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008062:	3001      	adds	r0, #1
 8008064:	6018      	str	r0, [r3, #0]
 8008066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008068:	2b00      	cmp	r3, #0
 800806a:	f43f acf1 	beq.w	8007a50 <_dtoa_r+0xa0>
 800806e:	601d      	str	r5, [r3, #0]
 8008070:	e4ee      	b.n	8007a50 <_dtoa_r+0xa0>
 8008072:	9f00      	ldr	r7, [sp, #0]
 8008074:	462b      	mov	r3, r5
 8008076:	461d      	mov	r5, r3
 8008078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800807c:	2a39      	cmp	r2, #57	; 0x39
 800807e:	d106      	bne.n	800808e <_dtoa_r+0x6de>
 8008080:	9a01      	ldr	r2, [sp, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d1f7      	bne.n	8008076 <_dtoa_r+0x6c6>
 8008086:	9901      	ldr	r1, [sp, #4]
 8008088:	2230      	movs	r2, #48	; 0x30
 800808a:	3701      	adds	r7, #1
 800808c:	700a      	strb	r2, [r1, #0]
 800808e:	781a      	ldrb	r2, [r3, #0]
 8008090:	3201      	adds	r2, #1
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e790      	b.n	8007fb8 <_dtoa_r+0x608>
 8008096:	4ba6      	ldr	r3, [pc, #664]	; (8008330 <_dtoa_r+0x980>)
 8008098:	2200      	movs	r2, #0
 800809a:	f7f8 fab5 	bl	8000608 <__aeabi_dmul>
 800809e:	2200      	movs	r2, #0
 80080a0:	2300      	movs	r3, #0
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	f7f8 fd17 	bl	8000ad8 <__aeabi_dcmpeq>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d09d      	beq.n	8007fea <_dtoa_r+0x63a>
 80080ae:	e7cf      	b.n	8008050 <_dtoa_r+0x6a0>
 80080b0:	9a08      	ldr	r2, [sp, #32]
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	f000 80d7 	beq.w	8008266 <_dtoa_r+0x8b6>
 80080b8:	9a06      	ldr	r2, [sp, #24]
 80080ba:	2a01      	cmp	r2, #1
 80080bc:	f300 80ba 	bgt.w	8008234 <_dtoa_r+0x884>
 80080c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080c2:	2a00      	cmp	r2, #0
 80080c4:	f000 80b2 	beq.w	800822c <_dtoa_r+0x87c>
 80080c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080cc:	9e07      	ldr	r6, [sp, #28]
 80080ce:	9d04      	ldr	r5, [sp, #16]
 80080d0:	9a04      	ldr	r2, [sp, #16]
 80080d2:	441a      	add	r2, r3
 80080d4:	9204      	str	r2, [sp, #16]
 80080d6:	9a05      	ldr	r2, [sp, #20]
 80080d8:	2101      	movs	r1, #1
 80080da:	441a      	add	r2, r3
 80080dc:	4620      	mov	r0, r4
 80080de:	9205      	str	r2, [sp, #20]
 80080e0:	f001 f81c 	bl	800911c <__i2b>
 80080e4:	4607      	mov	r7, r0
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	dd0c      	ble.n	8008104 <_dtoa_r+0x754>
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd09      	ble.n	8008104 <_dtoa_r+0x754>
 80080f0:	42ab      	cmp	r3, r5
 80080f2:	9a04      	ldr	r2, [sp, #16]
 80080f4:	bfa8      	it	ge
 80080f6:	462b      	movge	r3, r5
 80080f8:	1ad2      	subs	r2, r2, r3
 80080fa:	9204      	str	r2, [sp, #16]
 80080fc:	9a05      	ldr	r2, [sp, #20]
 80080fe:	1aed      	subs	r5, r5, r3
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	b31b      	cbz	r3, 8008150 <_dtoa_r+0x7a0>
 8008108:	9b08      	ldr	r3, [sp, #32]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80af 	beq.w	800826e <_dtoa_r+0x8be>
 8008110:	2e00      	cmp	r6, #0
 8008112:	dd13      	ble.n	800813c <_dtoa_r+0x78c>
 8008114:	4639      	mov	r1, r7
 8008116:	4632      	mov	r2, r6
 8008118:	4620      	mov	r0, r4
 800811a:	f001 f8bf 	bl	800929c <__pow5mult>
 800811e:	ee18 2a10 	vmov	r2, s16
 8008122:	4601      	mov	r1, r0
 8008124:	4607      	mov	r7, r0
 8008126:	4620      	mov	r0, r4
 8008128:	f001 f80e 	bl	8009148 <__multiply>
 800812c:	ee18 1a10 	vmov	r1, s16
 8008130:	4680      	mov	r8, r0
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fef0 	bl	8008f18 <_Bfree>
 8008138:	ee08 8a10 	vmov	s16, r8
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	1b9a      	subs	r2, r3, r6
 8008140:	d006      	beq.n	8008150 <_dtoa_r+0x7a0>
 8008142:	ee18 1a10 	vmov	r1, s16
 8008146:	4620      	mov	r0, r4
 8008148:	f001 f8a8 	bl	800929c <__pow5mult>
 800814c:	ee08 0a10 	vmov	s16, r0
 8008150:	2101      	movs	r1, #1
 8008152:	4620      	mov	r0, r4
 8008154:	f000 ffe2 	bl	800911c <__i2b>
 8008158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815a:	2b00      	cmp	r3, #0
 800815c:	4606      	mov	r6, r0
 800815e:	f340 8088 	ble.w	8008272 <_dtoa_r+0x8c2>
 8008162:	461a      	mov	r2, r3
 8008164:	4601      	mov	r1, r0
 8008166:	4620      	mov	r0, r4
 8008168:	f001 f898 	bl	800929c <__pow5mult>
 800816c:	9b06      	ldr	r3, [sp, #24]
 800816e:	2b01      	cmp	r3, #1
 8008170:	4606      	mov	r6, r0
 8008172:	f340 8081 	ble.w	8008278 <_dtoa_r+0x8c8>
 8008176:	f04f 0800 	mov.w	r8, #0
 800817a:	6933      	ldr	r3, [r6, #16]
 800817c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008180:	6918      	ldr	r0, [r3, #16]
 8008182:	f000 ff7b 	bl	800907c <__hi0bits>
 8008186:	f1c0 0020 	rsb	r0, r0, #32
 800818a:	9b05      	ldr	r3, [sp, #20]
 800818c:	4418      	add	r0, r3
 800818e:	f010 001f 	ands.w	r0, r0, #31
 8008192:	f000 8092 	beq.w	80082ba <_dtoa_r+0x90a>
 8008196:	f1c0 0320 	rsb	r3, r0, #32
 800819a:	2b04      	cmp	r3, #4
 800819c:	f340 808a 	ble.w	80082b4 <_dtoa_r+0x904>
 80081a0:	f1c0 001c 	rsb	r0, r0, #28
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	4403      	add	r3, r0
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	9b05      	ldr	r3, [sp, #20]
 80081ac:	4403      	add	r3, r0
 80081ae:	4405      	add	r5, r0
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd07      	ble.n	80081c8 <_dtoa_r+0x818>
 80081b8:	ee18 1a10 	vmov	r1, s16
 80081bc:	461a      	mov	r2, r3
 80081be:	4620      	mov	r0, r4
 80081c0:	f001 f8c6 	bl	8009350 <__lshift>
 80081c4:	ee08 0a10 	vmov	s16, r0
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dd05      	ble.n	80081da <_dtoa_r+0x82a>
 80081ce:	4631      	mov	r1, r6
 80081d0:	461a      	mov	r2, r3
 80081d2:	4620      	mov	r0, r4
 80081d4:	f001 f8bc 	bl	8009350 <__lshift>
 80081d8:	4606      	mov	r6, r0
 80081da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d06e      	beq.n	80082be <_dtoa_r+0x90e>
 80081e0:	ee18 0a10 	vmov	r0, s16
 80081e4:	4631      	mov	r1, r6
 80081e6:	f001 f923 	bl	8009430 <__mcmp>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	da67      	bge.n	80082be <_dtoa_r+0x90e>
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	ee18 1a10 	vmov	r1, s16
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	220a      	movs	r2, #10
 80081fa:	2300      	movs	r3, #0
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fead 	bl	8008f5c <__multadd>
 8008202:	9b08      	ldr	r3, [sp, #32]
 8008204:	ee08 0a10 	vmov	s16, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 81b1 	beq.w	8008570 <_dtoa_r+0xbc0>
 800820e:	2300      	movs	r3, #0
 8008210:	4639      	mov	r1, r7
 8008212:	220a      	movs	r2, #10
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fea1 	bl	8008f5c <__multadd>
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	4607      	mov	r7, r0
 8008220:	f300 808e 	bgt.w	8008340 <_dtoa_r+0x990>
 8008224:	9b06      	ldr	r3, [sp, #24]
 8008226:	2b02      	cmp	r3, #2
 8008228:	dc51      	bgt.n	80082ce <_dtoa_r+0x91e>
 800822a:	e089      	b.n	8008340 <_dtoa_r+0x990>
 800822c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800822e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008232:	e74b      	b.n	80080cc <_dtoa_r+0x71c>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	1e5e      	subs	r6, r3, #1
 8008238:	9b07      	ldr	r3, [sp, #28]
 800823a:	42b3      	cmp	r3, r6
 800823c:	bfbf      	itttt	lt
 800823e:	9b07      	ldrlt	r3, [sp, #28]
 8008240:	9607      	strlt	r6, [sp, #28]
 8008242:	1af2      	sublt	r2, r6, r3
 8008244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008246:	bfb6      	itet	lt
 8008248:	189b      	addlt	r3, r3, r2
 800824a:	1b9e      	subge	r6, r3, r6
 800824c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	bfb8      	it	lt
 8008252:	2600      	movlt	r6, #0
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfb7      	itett	lt
 8008258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800825c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008260:	1a9d      	sublt	r5, r3, r2
 8008262:	2300      	movlt	r3, #0
 8008264:	e734      	b.n	80080d0 <_dtoa_r+0x720>
 8008266:	9e07      	ldr	r6, [sp, #28]
 8008268:	9d04      	ldr	r5, [sp, #16]
 800826a:	9f08      	ldr	r7, [sp, #32]
 800826c:	e73b      	b.n	80080e6 <_dtoa_r+0x736>
 800826e:	9a07      	ldr	r2, [sp, #28]
 8008270:	e767      	b.n	8008142 <_dtoa_r+0x792>
 8008272:	9b06      	ldr	r3, [sp, #24]
 8008274:	2b01      	cmp	r3, #1
 8008276:	dc18      	bgt.n	80082aa <_dtoa_r+0x8fa>
 8008278:	f1ba 0f00 	cmp.w	sl, #0
 800827c:	d115      	bne.n	80082aa <_dtoa_r+0x8fa>
 800827e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008282:	b993      	cbnz	r3, 80082aa <_dtoa_r+0x8fa>
 8008284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008288:	0d1b      	lsrs	r3, r3, #20
 800828a:	051b      	lsls	r3, r3, #20
 800828c:	b183      	cbz	r3, 80082b0 <_dtoa_r+0x900>
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	3301      	adds	r3, #1
 8008292:	9304      	str	r3, [sp, #16]
 8008294:	9b05      	ldr	r3, [sp, #20]
 8008296:	3301      	adds	r3, #1
 8008298:	9305      	str	r3, [sp, #20]
 800829a:	f04f 0801 	mov.w	r8, #1
 800829e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f47f af6a 	bne.w	800817a <_dtoa_r+0x7ca>
 80082a6:	2001      	movs	r0, #1
 80082a8:	e76f      	b.n	800818a <_dtoa_r+0x7da>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	e7f6      	b.n	800829e <_dtoa_r+0x8ee>
 80082b0:	4698      	mov	r8, r3
 80082b2:	e7f4      	b.n	800829e <_dtoa_r+0x8ee>
 80082b4:	f43f af7d 	beq.w	80081b2 <_dtoa_r+0x802>
 80082b8:	4618      	mov	r0, r3
 80082ba:	301c      	adds	r0, #28
 80082bc:	e772      	b.n	80081a4 <_dtoa_r+0x7f4>
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc37      	bgt.n	8008334 <_dtoa_r+0x984>
 80082c4:	9b06      	ldr	r3, [sp, #24]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	dd34      	ble.n	8008334 <_dtoa_r+0x984>
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	9302      	str	r3, [sp, #8]
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	b96b      	cbnz	r3, 80082ee <_dtoa_r+0x93e>
 80082d2:	4631      	mov	r1, r6
 80082d4:	2205      	movs	r2, #5
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fe40 	bl	8008f5c <__multadd>
 80082dc:	4601      	mov	r1, r0
 80082de:	4606      	mov	r6, r0
 80082e0:	ee18 0a10 	vmov	r0, s16
 80082e4:	f001 f8a4 	bl	8009430 <__mcmp>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	f73f adbb 	bgt.w	8007e64 <_dtoa_r+0x4b4>
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	9d01      	ldr	r5, [sp, #4]
 80082f2:	43db      	mvns	r3, r3
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	f04f 0800 	mov.w	r8, #0
 80082fa:	4631      	mov	r1, r6
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fe0b 	bl	8008f18 <_Bfree>
 8008302:	2f00      	cmp	r7, #0
 8008304:	f43f aea4 	beq.w	8008050 <_dtoa_r+0x6a0>
 8008308:	f1b8 0f00 	cmp.w	r8, #0
 800830c:	d005      	beq.n	800831a <_dtoa_r+0x96a>
 800830e:	45b8      	cmp	r8, r7
 8008310:	d003      	beq.n	800831a <_dtoa_r+0x96a>
 8008312:	4641      	mov	r1, r8
 8008314:	4620      	mov	r0, r4
 8008316:	f000 fdff 	bl	8008f18 <_Bfree>
 800831a:	4639      	mov	r1, r7
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fdfb 	bl	8008f18 <_Bfree>
 8008322:	e695      	b.n	8008050 <_dtoa_r+0x6a0>
 8008324:	2600      	movs	r6, #0
 8008326:	4637      	mov	r7, r6
 8008328:	e7e1      	b.n	80082ee <_dtoa_r+0x93e>
 800832a:	9700      	str	r7, [sp, #0]
 800832c:	4637      	mov	r7, r6
 800832e:	e599      	b.n	8007e64 <_dtoa_r+0x4b4>
 8008330:	40240000 	.word	0x40240000
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80ca 	beq.w	80084d0 <_dtoa_r+0xb20>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	9302      	str	r3, [sp, #8]
 8008340:	2d00      	cmp	r5, #0
 8008342:	dd05      	ble.n	8008350 <_dtoa_r+0x9a0>
 8008344:	4639      	mov	r1, r7
 8008346:	462a      	mov	r2, r5
 8008348:	4620      	mov	r0, r4
 800834a:	f001 f801 	bl	8009350 <__lshift>
 800834e:	4607      	mov	r7, r0
 8008350:	f1b8 0f00 	cmp.w	r8, #0
 8008354:	d05b      	beq.n	800840e <_dtoa_r+0xa5e>
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fd9d 	bl	8008e98 <_Balloc>
 800835e:	4605      	mov	r5, r0
 8008360:	b928      	cbnz	r0, 800836e <_dtoa_r+0x9be>
 8008362:	4b87      	ldr	r3, [pc, #540]	; (8008580 <_dtoa_r+0xbd0>)
 8008364:	4602      	mov	r2, r0
 8008366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800836a:	f7ff bb3b 	b.w	80079e4 <_dtoa_r+0x34>
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	3202      	adds	r2, #2
 8008372:	0092      	lsls	r2, r2, #2
 8008374:	f107 010c 	add.w	r1, r7, #12
 8008378:	300c      	adds	r0, #12
 800837a:	f7fd fd11 	bl	8005da0 <memcpy>
 800837e:	2201      	movs	r2, #1
 8008380:	4629      	mov	r1, r5
 8008382:	4620      	mov	r0, r4
 8008384:	f000 ffe4 	bl	8009350 <__lshift>
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	f103 0901 	add.w	r9, r3, #1
 800838e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008392:	4413      	add	r3, r2
 8008394:	9305      	str	r3, [sp, #20]
 8008396:	f00a 0301 	and.w	r3, sl, #1
 800839a:	46b8      	mov	r8, r7
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	4607      	mov	r7, r0
 80083a0:	4631      	mov	r1, r6
 80083a2:	ee18 0a10 	vmov	r0, s16
 80083a6:	f7ff fa77 	bl	8007898 <quorem>
 80083aa:	4641      	mov	r1, r8
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80083b2:	ee18 0a10 	vmov	r0, s16
 80083b6:	f001 f83b 	bl	8009430 <__mcmp>
 80083ba:	463a      	mov	r2, r7
 80083bc:	9003      	str	r0, [sp, #12]
 80083be:	4631      	mov	r1, r6
 80083c0:	4620      	mov	r0, r4
 80083c2:	f001 f851 	bl	8009468 <__mdiff>
 80083c6:	68c2      	ldr	r2, [r0, #12]
 80083c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80083cc:	4605      	mov	r5, r0
 80083ce:	bb02      	cbnz	r2, 8008412 <_dtoa_r+0xa62>
 80083d0:	4601      	mov	r1, r0
 80083d2:	ee18 0a10 	vmov	r0, s16
 80083d6:	f001 f82b 	bl	8009430 <__mcmp>
 80083da:	4602      	mov	r2, r0
 80083dc:	4629      	mov	r1, r5
 80083de:	4620      	mov	r0, r4
 80083e0:	9207      	str	r2, [sp, #28]
 80083e2:	f000 fd99 	bl	8008f18 <_Bfree>
 80083e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80083ea:	ea43 0102 	orr.w	r1, r3, r2
 80083ee:	9b04      	ldr	r3, [sp, #16]
 80083f0:	430b      	orrs	r3, r1
 80083f2:	464d      	mov	r5, r9
 80083f4:	d10f      	bne.n	8008416 <_dtoa_r+0xa66>
 80083f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083fa:	d02a      	beq.n	8008452 <_dtoa_r+0xaa2>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dd02      	ble.n	8008408 <_dtoa_r+0xa58>
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008408:	f88b a000 	strb.w	sl, [fp]
 800840c:	e775      	b.n	80082fa <_dtoa_r+0x94a>
 800840e:	4638      	mov	r0, r7
 8008410:	e7ba      	b.n	8008388 <_dtoa_r+0x9d8>
 8008412:	2201      	movs	r2, #1
 8008414:	e7e2      	b.n	80083dc <_dtoa_r+0xa2c>
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	db04      	blt.n	8008426 <_dtoa_r+0xa76>
 800841c:	9906      	ldr	r1, [sp, #24]
 800841e:	430b      	orrs	r3, r1
 8008420:	9904      	ldr	r1, [sp, #16]
 8008422:	430b      	orrs	r3, r1
 8008424:	d122      	bne.n	800846c <_dtoa_r+0xabc>
 8008426:	2a00      	cmp	r2, #0
 8008428:	ddee      	ble.n	8008408 <_dtoa_r+0xa58>
 800842a:	ee18 1a10 	vmov	r1, s16
 800842e:	2201      	movs	r2, #1
 8008430:	4620      	mov	r0, r4
 8008432:	f000 ff8d 	bl	8009350 <__lshift>
 8008436:	4631      	mov	r1, r6
 8008438:	ee08 0a10 	vmov	s16, r0
 800843c:	f000 fff8 	bl	8009430 <__mcmp>
 8008440:	2800      	cmp	r0, #0
 8008442:	dc03      	bgt.n	800844c <_dtoa_r+0xa9c>
 8008444:	d1e0      	bne.n	8008408 <_dtoa_r+0xa58>
 8008446:	f01a 0f01 	tst.w	sl, #1
 800844a:	d0dd      	beq.n	8008408 <_dtoa_r+0xa58>
 800844c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008450:	d1d7      	bne.n	8008402 <_dtoa_r+0xa52>
 8008452:	2339      	movs	r3, #57	; 0x39
 8008454:	f88b 3000 	strb.w	r3, [fp]
 8008458:	462b      	mov	r3, r5
 800845a:	461d      	mov	r5, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008462:	2a39      	cmp	r2, #57	; 0x39
 8008464:	d071      	beq.n	800854a <_dtoa_r+0xb9a>
 8008466:	3201      	adds	r2, #1
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e746      	b.n	80082fa <_dtoa_r+0x94a>
 800846c:	2a00      	cmp	r2, #0
 800846e:	dd07      	ble.n	8008480 <_dtoa_r+0xad0>
 8008470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008474:	d0ed      	beq.n	8008452 <_dtoa_r+0xaa2>
 8008476:	f10a 0301 	add.w	r3, sl, #1
 800847a:	f88b 3000 	strb.w	r3, [fp]
 800847e:	e73c      	b.n	80082fa <_dtoa_r+0x94a>
 8008480:	9b05      	ldr	r3, [sp, #20]
 8008482:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008486:	4599      	cmp	r9, r3
 8008488:	d047      	beq.n	800851a <_dtoa_r+0xb6a>
 800848a:	ee18 1a10 	vmov	r1, s16
 800848e:	2300      	movs	r3, #0
 8008490:	220a      	movs	r2, #10
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fd62 	bl	8008f5c <__multadd>
 8008498:	45b8      	cmp	r8, r7
 800849a:	ee08 0a10 	vmov	s16, r0
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	f04f 020a 	mov.w	r2, #10
 80084a6:	4641      	mov	r1, r8
 80084a8:	4620      	mov	r0, r4
 80084aa:	d106      	bne.n	80084ba <_dtoa_r+0xb0a>
 80084ac:	f000 fd56 	bl	8008f5c <__multadd>
 80084b0:	4680      	mov	r8, r0
 80084b2:	4607      	mov	r7, r0
 80084b4:	f109 0901 	add.w	r9, r9, #1
 80084b8:	e772      	b.n	80083a0 <_dtoa_r+0x9f0>
 80084ba:	f000 fd4f 	bl	8008f5c <__multadd>
 80084be:	4639      	mov	r1, r7
 80084c0:	4680      	mov	r8, r0
 80084c2:	2300      	movs	r3, #0
 80084c4:	220a      	movs	r2, #10
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 fd48 	bl	8008f5c <__multadd>
 80084cc:	4607      	mov	r7, r0
 80084ce:	e7f1      	b.n	80084b4 <_dtoa_r+0xb04>
 80084d0:	9b03      	ldr	r3, [sp, #12]
 80084d2:	9302      	str	r3, [sp, #8]
 80084d4:	9d01      	ldr	r5, [sp, #4]
 80084d6:	ee18 0a10 	vmov	r0, s16
 80084da:	4631      	mov	r1, r6
 80084dc:	f7ff f9dc 	bl	8007898 <quorem>
 80084e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	f805 ab01 	strb.w	sl, [r5], #1
 80084ea:	1aea      	subs	r2, r5, r3
 80084ec:	9b02      	ldr	r3, [sp, #8]
 80084ee:	4293      	cmp	r3, r2
 80084f0:	dd09      	ble.n	8008506 <_dtoa_r+0xb56>
 80084f2:	ee18 1a10 	vmov	r1, s16
 80084f6:	2300      	movs	r3, #0
 80084f8:	220a      	movs	r2, #10
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 fd2e 	bl	8008f5c <__multadd>
 8008500:	ee08 0a10 	vmov	s16, r0
 8008504:	e7e7      	b.n	80084d6 <_dtoa_r+0xb26>
 8008506:	9b02      	ldr	r3, [sp, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfc8      	it	gt
 800850c:	461d      	movgt	r5, r3
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	bfd8      	it	le
 8008512:	2501      	movle	r5, #1
 8008514:	441d      	add	r5, r3
 8008516:	f04f 0800 	mov.w	r8, #0
 800851a:	ee18 1a10 	vmov	r1, s16
 800851e:	2201      	movs	r2, #1
 8008520:	4620      	mov	r0, r4
 8008522:	f000 ff15 	bl	8009350 <__lshift>
 8008526:	4631      	mov	r1, r6
 8008528:	ee08 0a10 	vmov	s16, r0
 800852c:	f000 ff80 	bl	8009430 <__mcmp>
 8008530:	2800      	cmp	r0, #0
 8008532:	dc91      	bgt.n	8008458 <_dtoa_r+0xaa8>
 8008534:	d102      	bne.n	800853c <_dtoa_r+0xb8c>
 8008536:	f01a 0f01 	tst.w	sl, #1
 800853a:	d18d      	bne.n	8008458 <_dtoa_r+0xaa8>
 800853c:	462b      	mov	r3, r5
 800853e:	461d      	mov	r5, r3
 8008540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008544:	2a30      	cmp	r2, #48	; 0x30
 8008546:	d0fa      	beq.n	800853e <_dtoa_r+0xb8e>
 8008548:	e6d7      	b.n	80082fa <_dtoa_r+0x94a>
 800854a:	9a01      	ldr	r2, [sp, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d184      	bne.n	800845a <_dtoa_r+0xaaa>
 8008550:	9b00      	ldr	r3, [sp, #0]
 8008552:	3301      	adds	r3, #1
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	2331      	movs	r3, #49	; 0x31
 8008558:	7013      	strb	r3, [r2, #0]
 800855a:	e6ce      	b.n	80082fa <_dtoa_r+0x94a>
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <_dtoa_r+0xbd4>)
 800855e:	f7ff ba95 	b.w	8007a8c <_dtoa_r+0xdc>
 8008562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008564:	2b00      	cmp	r3, #0
 8008566:	f47f aa6e 	bne.w	8007a46 <_dtoa_r+0x96>
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <_dtoa_r+0xbd8>)
 800856c:	f7ff ba8e 	b.w	8007a8c <_dtoa_r+0xdc>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dcae      	bgt.n	80084d4 <_dtoa_r+0xb24>
 8008576:	9b06      	ldr	r3, [sp, #24]
 8008578:	2b02      	cmp	r3, #2
 800857a:	f73f aea8 	bgt.w	80082ce <_dtoa_r+0x91e>
 800857e:	e7a9      	b.n	80084d4 <_dtoa_r+0xb24>
 8008580:	0800a950 	.word	0x0800a950
 8008584:	0800a750 	.word	0x0800a750
 8008588:	0800a8d1 	.word	0x0800a8d1

0800858c <std>:
 800858c:	2300      	movs	r3, #0
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	e9c0 3300 	strd	r3, r3, [r0]
 8008596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800859a:	6083      	str	r3, [r0, #8]
 800859c:	8181      	strh	r1, [r0, #12]
 800859e:	6643      	str	r3, [r0, #100]	; 0x64
 80085a0:	81c2      	strh	r2, [r0, #14]
 80085a2:	6183      	str	r3, [r0, #24]
 80085a4:	4619      	mov	r1, r3
 80085a6:	2208      	movs	r2, #8
 80085a8:	305c      	adds	r0, #92	; 0x5c
 80085aa:	f7fd fc07 	bl	8005dbc <memset>
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x38>)
 80085b0:	6263      	str	r3, [r4, #36]	; 0x24
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x3c>)
 80085b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x40>)
 80085b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <std+0x44>)
 80085bc:	6224      	str	r4, [r4, #32]
 80085be:	6323      	str	r3, [r4, #48]	; 0x30
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	bf00      	nop
 80085c4:	08009fa9 	.word	0x08009fa9
 80085c8:	08009fcb 	.word	0x08009fcb
 80085cc:	0800a003 	.word	0x0800a003
 80085d0:	0800a027 	.word	0x0800a027

080085d4 <_cleanup_r>:
 80085d4:	4901      	ldr	r1, [pc, #4]	; (80085dc <_cleanup_r+0x8>)
 80085d6:	f000 b8af 	b.w	8008738 <_fwalk_reent>
 80085da:	bf00      	nop
 80085dc:	0800a381 	.word	0x0800a381

080085e0 <__sfmoreglue>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	2268      	movs	r2, #104	; 0x68
 80085e4:	1e4d      	subs	r5, r1, #1
 80085e6:	4355      	muls	r5, r2
 80085e8:	460e      	mov	r6, r1
 80085ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ee:	f001 f997 	bl	8009920 <_malloc_r>
 80085f2:	4604      	mov	r4, r0
 80085f4:	b140      	cbz	r0, 8008608 <__sfmoreglue+0x28>
 80085f6:	2100      	movs	r1, #0
 80085f8:	e9c0 1600 	strd	r1, r6, [r0]
 80085fc:	300c      	adds	r0, #12
 80085fe:	60a0      	str	r0, [r4, #8]
 8008600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008604:	f7fd fbda 	bl	8005dbc <memset>
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <__sfp_lock_acquire>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__sfp_lock_acquire+0x8>)
 800860e:	f000 bc26 	b.w	8008e5e <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	2000424d 	.word	0x2000424d

08008618 <__sfp_lock_release>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__sfp_lock_release+0x8>)
 800861a:	f000 bc21 	b.w	8008e60 <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	2000424d 	.word	0x2000424d

08008624 <__sinit_lock_acquire>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sinit_lock_acquire+0x8>)
 8008626:	f000 bc1a 	b.w	8008e5e <__retarget_lock_acquire_recursive>
 800862a:	bf00      	nop
 800862c:	2000424e 	.word	0x2000424e

08008630 <__sinit_lock_release>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sinit_lock_release+0x8>)
 8008632:	f000 bc15 	b.w	8008e60 <__retarget_lock_release_recursive>
 8008636:	bf00      	nop
 8008638:	2000424e 	.word	0x2000424e

0800863c <__sinit>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	f7ff fff0 	bl	8008624 <__sinit_lock_acquire>
 8008644:	69a3      	ldr	r3, [r4, #24]
 8008646:	b11b      	cbz	r3, 8008650 <__sinit+0x14>
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	f7ff bff0 	b.w	8008630 <__sinit_lock_release>
 8008650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008654:	6523      	str	r3, [r4, #80]	; 0x50
 8008656:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <__sinit+0x68>)
 8008658:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <__sinit+0x6c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	62a2      	str	r2, [r4, #40]	; 0x28
 800865e:	42a3      	cmp	r3, r4
 8008660:	bf04      	itt	eq
 8008662:	2301      	moveq	r3, #1
 8008664:	61a3      	streq	r3, [r4, #24]
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f820 	bl	80086ac <__sfp>
 800866c:	6060      	str	r0, [r4, #4]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f81c 	bl	80086ac <__sfp>
 8008674:	60a0      	str	r0, [r4, #8]
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f818 	bl	80086ac <__sfp>
 800867c:	2200      	movs	r2, #0
 800867e:	60e0      	str	r0, [r4, #12]
 8008680:	2104      	movs	r1, #4
 8008682:	6860      	ldr	r0, [r4, #4]
 8008684:	f7ff ff82 	bl	800858c <std>
 8008688:	68a0      	ldr	r0, [r4, #8]
 800868a:	2201      	movs	r2, #1
 800868c:	2109      	movs	r1, #9
 800868e:	f7ff ff7d 	bl	800858c <std>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	2202      	movs	r2, #2
 8008696:	2112      	movs	r1, #18
 8008698:	f7ff ff78 	bl	800858c <std>
 800869c:	2301      	movs	r3, #1
 800869e:	61a3      	str	r3, [r4, #24]
 80086a0:	e7d2      	b.n	8008648 <__sinit+0xc>
 80086a2:	bf00      	nop
 80086a4:	0800a73c 	.word	0x0800a73c
 80086a8:	080085d5 	.word	0x080085d5

080086ac <__sfp>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	4607      	mov	r7, r0
 80086b0:	f7ff ffac 	bl	800860c <__sfp_lock_acquire>
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <__sfp+0x84>)
 80086b6:	681e      	ldr	r6, [r3, #0]
 80086b8:	69b3      	ldr	r3, [r6, #24]
 80086ba:	b913      	cbnz	r3, 80086c2 <__sfp+0x16>
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ffbd 	bl	800863c <__sinit>
 80086c2:	3648      	adds	r6, #72	; 0x48
 80086c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	d503      	bpl.n	80086d4 <__sfp+0x28>
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	b30b      	cbz	r3, 8008714 <__sfp+0x68>
 80086d0:	6836      	ldr	r6, [r6, #0]
 80086d2:	e7f7      	b.n	80086c4 <__sfp+0x18>
 80086d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d8:	b9d5      	cbnz	r5, 8008710 <__sfp+0x64>
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <__sfp+0x88>)
 80086dc:	60e3      	str	r3, [r4, #12]
 80086de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086e2:	6665      	str	r5, [r4, #100]	; 0x64
 80086e4:	f000 fbba 	bl	8008e5c <__retarget_lock_init_recursive>
 80086e8:	f7ff ff96 	bl	8008618 <__sfp_lock_release>
 80086ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	61a5      	str	r5, [r4, #24]
 80086f8:	2208      	movs	r2, #8
 80086fa:	4629      	mov	r1, r5
 80086fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008700:	f7fd fb5c 	bl	8005dbc <memset>
 8008704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800870c:	4620      	mov	r0, r4
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008710:	3468      	adds	r4, #104	; 0x68
 8008712:	e7d9      	b.n	80086c8 <__sfp+0x1c>
 8008714:	2104      	movs	r1, #4
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ff62 	bl	80085e0 <__sfmoreglue>
 800871c:	4604      	mov	r4, r0
 800871e:	6030      	str	r0, [r6, #0]
 8008720:	2800      	cmp	r0, #0
 8008722:	d1d5      	bne.n	80086d0 <__sfp+0x24>
 8008724:	f7ff ff78 	bl	8008618 <__sfp_lock_release>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	e7ee      	b.n	800870c <__sfp+0x60>
 800872e:	bf00      	nop
 8008730:	0800a73c 	.word	0x0800a73c
 8008734:	ffff0001 	.word	0xffff0001

08008738 <_fwalk_reent>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	4606      	mov	r6, r0
 800873e:	4688      	mov	r8, r1
 8008740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008744:	2700      	movs	r7, #0
 8008746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800874a:	f1b9 0901 	subs.w	r9, r9, #1
 800874e:	d505      	bpl.n	800875c <_fwalk_reent+0x24>
 8008750:	6824      	ldr	r4, [r4, #0]
 8008752:	2c00      	cmp	r4, #0
 8008754:	d1f7      	bne.n	8008746 <_fwalk_reent+0xe>
 8008756:	4638      	mov	r0, r7
 8008758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d907      	bls.n	8008772 <_fwalk_reent+0x3a>
 8008762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008766:	3301      	adds	r3, #1
 8008768:	d003      	beq.n	8008772 <_fwalk_reent+0x3a>
 800876a:	4629      	mov	r1, r5
 800876c:	4630      	mov	r0, r6
 800876e:	47c0      	blx	r8
 8008770:	4307      	orrs	r7, r0
 8008772:	3568      	adds	r5, #104	; 0x68
 8008774:	e7e9      	b.n	800874a <_fwalk_reent+0x12>

08008776 <rshift>:
 8008776:	6903      	ldr	r3, [r0, #16]
 8008778:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800877c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008780:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008784:	f100 0414 	add.w	r4, r0, #20
 8008788:	dd45      	ble.n	8008816 <rshift+0xa0>
 800878a:	f011 011f 	ands.w	r1, r1, #31
 800878e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008792:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008796:	d10c      	bne.n	80087b2 <rshift+0x3c>
 8008798:	f100 0710 	add.w	r7, r0, #16
 800879c:	4629      	mov	r1, r5
 800879e:	42b1      	cmp	r1, r6
 80087a0:	d334      	bcc.n	800880c <rshift+0x96>
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	1eea      	subs	r2, r5, #3
 80087a8:	4296      	cmp	r6, r2
 80087aa:	bf38      	it	cc
 80087ac:	2300      	movcc	r3, #0
 80087ae:	4423      	add	r3, r4
 80087b0:	e015      	b.n	80087de <rshift+0x68>
 80087b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087b6:	f1c1 0820 	rsb	r8, r1, #32
 80087ba:	40cf      	lsrs	r7, r1
 80087bc:	f105 0e04 	add.w	lr, r5, #4
 80087c0:	46a1      	mov	r9, r4
 80087c2:	4576      	cmp	r6, lr
 80087c4:	46f4      	mov	ip, lr
 80087c6:	d815      	bhi.n	80087f4 <rshift+0x7e>
 80087c8:	1a9a      	subs	r2, r3, r2
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	3a04      	subs	r2, #4
 80087ce:	3501      	adds	r5, #1
 80087d0:	42ae      	cmp	r6, r5
 80087d2:	bf38      	it	cc
 80087d4:	2200      	movcc	r2, #0
 80087d6:	18a3      	adds	r3, r4, r2
 80087d8:	50a7      	str	r7, [r4, r2]
 80087da:	b107      	cbz	r7, 80087de <rshift+0x68>
 80087dc:	3304      	adds	r3, #4
 80087de:	1b1a      	subs	r2, r3, r4
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087e6:	bf08      	it	eq
 80087e8:	2300      	moveq	r3, #0
 80087ea:	6102      	str	r2, [r0, #16]
 80087ec:	bf08      	it	eq
 80087ee:	6143      	streq	r3, [r0, #20]
 80087f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f4:	f8dc c000 	ldr.w	ip, [ip]
 80087f8:	fa0c fc08 	lsl.w	ip, ip, r8
 80087fc:	ea4c 0707 	orr.w	r7, ip, r7
 8008800:	f849 7b04 	str.w	r7, [r9], #4
 8008804:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008808:	40cf      	lsrs	r7, r1
 800880a:	e7da      	b.n	80087c2 <rshift+0x4c>
 800880c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008810:	f847 cf04 	str.w	ip, [r7, #4]!
 8008814:	e7c3      	b.n	800879e <rshift+0x28>
 8008816:	4623      	mov	r3, r4
 8008818:	e7e1      	b.n	80087de <rshift+0x68>

0800881a <__hexdig_fun>:
 800881a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800881e:	2b09      	cmp	r3, #9
 8008820:	d802      	bhi.n	8008828 <__hexdig_fun+0xe>
 8008822:	3820      	subs	r0, #32
 8008824:	b2c0      	uxtb	r0, r0
 8008826:	4770      	bx	lr
 8008828:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800882c:	2b05      	cmp	r3, #5
 800882e:	d801      	bhi.n	8008834 <__hexdig_fun+0x1a>
 8008830:	3847      	subs	r0, #71	; 0x47
 8008832:	e7f7      	b.n	8008824 <__hexdig_fun+0xa>
 8008834:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008838:	2b05      	cmp	r3, #5
 800883a:	d801      	bhi.n	8008840 <__hexdig_fun+0x26>
 800883c:	3827      	subs	r0, #39	; 0x27
 800883e:	e7f1      	b.n	8008824 <__hexdig_fun+0xa>
 8008840:	2000      	movs	r0, #0
 8008842:	4770      	bx	lr

08008844 <__gethex>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	ed2d 8b02 	vpush	{d8}
 800884c:	b089      	sub	sp, #36	; 0x24
 800884e:	ee08 0a10 	vmov	s16, r0
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	4bb4      	ldr	r3, [pc, #720]	; (8008b28 <__gethex+0x2e4>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	468b      	mov	fp, r1
 800885e:	4690      	mov	r8, r2
 8008860:	f7f7 fcbe 	bl	80001e0 <strlen>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	f8db 2000 	ldr.w	r2, [fp]
 800886a:	4403      	add	r3, r0
 800886c:	4682      	mov	sl, r0
 800886e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	1c93      	adds	r3, r2, #2
 8008876:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800887a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800887e:	32fe      	adds	r2, #254	; 0xfe
 8008880:	18d1      	adds	r1, r2, r3
 8008882:	461f      	mov	r7, r3
 8008884:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008888:	9100      	str	r1, [sp, #0]
 800888a:	2830      	cmp	r0, #48	; 0x30
 800888c:	d0f8      	beq.n	8008880 <__gethex+0x3c>
 800888e:	f7ff ffc4 	bl	800881a <__hexdig_fun>
 8008892:	4604      	mov	r4, r0
 8008894:	2800      	cmp	r0, #0
 8008896:	d13a      	bne.n	800890e <__gethex+0xca>
 8008898:	9901      	ldr	r1, [sp, #4]
 800889a:	4652      	mov	r2, sl
 800889c:	4638      	mov	r0, r7
 800889e:	f001 fbc6 	bl	800a02e <strncmp>
 80088a2:	4605      	mov	r5, r0
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d168      	bne.n	800897a <__gethex+0x136>
 80088a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80088ac:	eb07 060a 	add.w	r6, r7, sl
 80088b0:	f7ff ffb3 	bl	800881a <__hexdig_fun>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d062      	beq.n	800897e <__gethex+0x13a>
 80088b8:	4633      	mov	r3, r6
 80088ba:	7818      	ldrb	r0, [r3, #0]
 80088bc:	2830      	cmp	r0, #48	; 0x30
 80088be:	461f      	mov	r7, r3
 80088c0:	f103 0301 	add.w	r3, r3, #1
 80088c4:	d0f9      	beq.n	80088ba <__gethex+0x76>
 80088c6:	f7ff ffa8 	bl	800881a <__hexdig_fun>
 80088ca:	2301      	movs	r3, #1
 80088cc:	fab0 f480 	clz	r4, r0
 80088d0:	0964      	lsrs	r4, r4, #5
 80088d2:	4635      	mov	r5, r6
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	463a      	mov	r2, r7
 80088d8:	4616      	mov	r6, r2
 80088da:	3201      	adds	r2, #1
 80088dc:	7830      	ldrb	r0, [r6, #0]
 80088de:	f7ff ff9c 	bl	800881a <__hexdig_fun>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d1f8      	bne.n	80088d8 <__gethex+0x94>
 80088e6:	9901      	ldr	r1, [sp, #4]
 80088e8:	4652      	mov	r2, sl
 80088ea:	4630      	mov	r0, r6
 80088ec:	f001 fb9f 	bl	800a02e <strncmp>
 80088f0:	b980      	cbnz	r0, 8008914 <__gethex+0xd0>
 80088f2:	b94d      	cbnz	r5, 8008908 <__gethex+0xc4>
 80088f4:	eb06 050a 	add.w	r5, r6, sl
 80088f8:	462a      	mov	r2, r5
 80088fa:	4616      	mov	r6, r2
 80088fc:	3201      	adds	r2, #1
 80088fe:	7830      	ldrb	r0, [r6, #0]
 8008900:	f7ff ff8b 	bl	800881a <__hexdig_fun>
 8008904:	2800      	cmp	r0, #0
 8008906:	d1f8      	bne.n	80088fa <__gethex+0xb6>
 8008908:	1bad      	subs	r5, r5, r6
 800890a:	00ad      	lsls	r5, r5, #2
 800890c:	e004      	b.n	8008918 <__gethex+0xd4>
 800890e:	2400      	movs	r4, #0
 8008910:	4625      	mov	r5, r4
 8008912:	e7e0      	b.n	80088d6 <__gethex+0x92>
 8008914:	2d00      	cmp	r5, #0
 8008916:	d1f7      	bne.n	8008908 <__gethex+0xc4>
 8008918:	7833      	ldrb	r3, [r6, #0]
 800891a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800891e:	2b50      	cmp	r3, #80	; 0x50
 8008920:	d13b      	bne.n	800899a <__gethex+0x156>
 8008922:	7873      	ldrb	r3, [r6, #1]
 8008924:	2b2b      	cmp	r3, #43	; 0x2b
 8008926:	d02c      	beq.n	8008982 <__gethex+0x13e>
 8008928:	2b2d      	cmp	r3, #45	; 0x2d
 800892a:	d02e      	beq.n	800898a <__gethex+0x146>
 800892c:	1c71      	adds	r1, r6, #1
 800892e:	f04f 0900 	mov.w	r9, #0
 8008932:	7808      	ldrb	r0, [r1, #0]
 8008934:	f7ff ff71 	bl	800881a <__hexdig_fun>
 8008938:	1e43      	subs	r3, r0, #1
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b18      	cmp	r3, #24
 800893e:	d82c      	bhi.n	800899a <__gethex+0x156>
 8008940:	f1a0 0210 	sub.w	r2, r0, #16
 8008944:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008948:	f7ff ff67 	bl	800881a <__hexdig_fun>
 800894c:	1e43      	subs	r3, r0, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b18      	cmp	r3, #24
 8008952:	d91d      	bls.n	8008990 <__gethex+0x14c>
 8008954:	f1b9 0f00 	cmp.w	r9, #0
 8008958:	d000      	beq.n	800895c <__gethex+0x118>
 800895a:	4252      	negs	r2, r2
 800895c:	4415      	add	r5, r2
 800895e:	f8cb 1000 	str.w	r1, [fp]
 8008962:	b1e4      	cbz	r4, 800899e <__gethex+0x15a>
 8008964:	9b00      	ldr	r3, [sp, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	bf14      	ite	ne
 800896a:	2700      	movne	r7, #0
 800896c:	2706      	moveq	r7, #6
 800896e:	4638      	mov	r0, r7
 8008970:	b009      	add	sp, #36	; 0x24
 8008972:	ecbd 8b02 	vpop	{d8}
 8008976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897a:	463e      	mov	r6, r7
 800897c:	4625      	mov	r5, r4
 800897e:	2401      	movs	r4, #1
 8008980:	e7ca      	b.n	8008918 <__gethex+0xd4>
 8008982:	f04f 0900 	mov.w	r9, #0
 8008986:	1cb1      	adds	r1, r6, #2
 8008988:	e7d3      	b.n	8008932 <__gethex+0xee>
 800898a:	f04f 0901 	mov.w	r9, #1
 800898e:	e7fa      	b.n	8008986 <__gethex+0x142>
 8008990:	230a      	movs	r3, #10
 8008992:	fb03 0202 	mla	r2, r3, r2, r0
 8008996:	3a10      	subs	r2, #16
 8008998:	e7d4      	b.n	8008944 <__gethex+0x100>
 800899a:	4631      	mov	r1, r6
 800899c:	e7df      	b.n	800895e <__gethex+0x11a>
 800899e:	1bf3      	subs	r3, r6, r7
 80089a0:	3b01      	subs	r3, #1
 80089a2:	4621      	mov	r1, r4
 80089a4:	2b07      	cmp	r3, #7
 80089a6:	dc0b      	bgt.n	80089c0 <__gethex+0x17c>
 80089a8:	ee18 0a10 	vmov	r0, s16
 80089ac:	f000 fa74 	bl	8008e98 <_Balloc>
 80089b0:	4604      	mov	r4, r0
 80089b2:	b940      	cbnz	r0, 80089c6 <__gethex+0x182>
 80089b4:	4b5d      	ldr	r3, [pc, #372]	; (8008b2c <__gethex+0x2e8>)
 80089b6:	4602      	mov	r2, r0
 80089b8:	21de      	movs	r1, #222	; 0xde
 80089ba:	485d      	ldr	r0, [pc, #372]	; (8008b30 <__gethex+0x2ec>)
 80089bc:	f001 fc2c 	bl	800a218 <__assert_func>
 80089c0:	3101      	adds	r1, #1
 80089c2:	105b      	asrs	r3, r3, #1
 80089c4:	e7ee      	b.n	80089a4 <__gethex+0x160>
 80089c6:	f100 0914 	add.w	r9, r0, #20
 80089ca:	f04f 0b00 	mov.w	fp, #0
 80089ce:	f1ca 0301 	rsb	r3, sl, #1
 80089d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80089d6:	f8cd b000 	str.w	fp, [sp]
 80089da:	9306      	str	r3, [sp, #24]
 80089dc:	42b7      	cmp	r7, r6
 80089de:	d340      	bcc.n	8008a62 <__gethex+0x21e>
 80089e0:	9802      	ldr	r0, [sp, #8]
 80089e2:	9b00      	ldr	r3, [sp, #0]
 80089e4:	f840 3b04 	str.w	r3, [r0], #4
 80089e8:	eba0 0009 	sub.w	r0, r0, r9
 80089ec:	1080      	asrs	r0, r0, #2
 80089ee:	0146      	lsls	r6, r0, #5
 80089f0:	6120      	str	r0, [r4, #16]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fb42 	bl	800907c <__hi0bits>
 80089f8:	1a30      	subs	r0, r6, r0
 80089fa:	f8d8 6000 	ldr.w	r6, [r8]
 80089fe:	42b0      	cmp	r0, r6
 8008a00:	dd63      	ble.n	8008aca <__gethex+0x286>
 8008a02:	1b87      	subs	r7, r0, r6
 8008a04:	4639      	mov	r1, r7
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 fee6 	bl	80097d8 <__any_on>
 8008a0c:	4682      	mov	sl, r0
 8008a0e:	b1a8      	cbz	r0, 8008a3c <__gethex+0x1f8>
 8008a10:	1e7b      	subs	r3, r7, #1
 8008a12:	1159      	asrs	r1, r3, #5
 8008a14:	f003 021f 	and.w	r2, r3, #31
 8008a18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a1c:	f04f 0a01 	mov.w	sl, #1
 8008a20:	fa0a f202 	lsl.w	r2, sl, r2
 8008a24:	420a      	tst	r2, r1
 8008a26:	d009      	beq.n	8008a3c <__gethex+0x1f8>
 8008a28:	4553      	cmp	r3, sl
 8008a2a:	dd05      	ble.n	8008a38 <__gethex+0x1f4>
 8008a2c:	1eb9      	subs	r1, r7, #2
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 fed2 	bl	80097d8 <__any_on>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d145      	bne.n	8008ac4 <__gethex+0x280>
 8008a38:	f04f 0a02 	mov.w	sl, #2
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f7ff fe99 	bl	8008776 <rshift>
 8008a44:	443d      	add	r5, r7
 8008a46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a4a:	42ab      	cmp	r3, r5
 8008a4c:	da4c      	bge.n	8008ae8 <__gethex+0x2a4>
 8008a4e:	ee18 0a10 	vmov	r0, s16
 8008a52:	4621      	mov	r1, r4
 8008a54:	f000 fa60 	bl	8008f18 <_Bfree>
 8008a58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	27a3      	movs	r7, #163	; 0xa3
 8008a60:	e785      	b.n	800896e <__gethex+0x12a>
 8008a62:	1e73      	subs	r3, r6, #1
 8008a64:	9a05      	ldr	r2, [sp, #20]
 8008a66:	9303      	str	r3, [sp, #12]
 8008a68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d019      	beq.n	8008aa4 <__gethex+0x260>
 8008a70:	f1bb 0f20 	cmp.w	fp, #32
 8008a74:	d107      	bne.n	8008a86 <__gethex+0x242>
 8008a76:	9b02      	ldr	r3, [sp, #8]
 8008a78:	9a00      	ldr	r2, [sp, #0]
 8008a7a:	f843 2b04 	str.w	r2, [r3], #4
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	2300      	movs	r3, #0
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	469b      	mov	fp, r3
 8008a86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a8a:	f7ff fec6 	bl	800881a <__hexdig_fun>
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	f000 000f 	and.w	r0, r0, #15
 8008a94:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a98:	4303      	orrs	r3, r0
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	f10b 0b04 	add.w	fp, fp, #4
 8008aa0:	9b03      	ldr	r3, [sp, #12]
 8008aa2:	e00d      	b.n	8008ac0 <__gethex+0x27c>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	9a06      	ldr	r2, [sp, #24]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	42bb      	cmp	r3, r7
 8008aac:	d3e0      	bcc.n	8008a70 <__gethex+0x22c>
 8008aae:	4618      	mov	r0, r3
 8008ab0:	9901      	ldr	r1, [sp, #4]
 8008ab2:	9307      	str	r3, [sp, #28]
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	f001 faba 	bl	800a02e <strncmp>
 8008aba:	9b07      	ldr	r3, [sp, #28]
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1d7      	bne.n	8008a70 <__gethex+0x22c>
 8008ac0:	461e      	mov	r6, r3
 8008ac2:	e78b      	b.n	80089dc <__gethex+0x198>
 8008ac4:	f04f 0a03 	mov.w	sl, #3
 8008ac8:	e7b8      	b.n	8008a3c <__gethex+0x1f8>
 8008aca:	da0a      	bge.n	8008ae2 <__gethex+0x29e>
 8008acc:	1a37      	subs	r7, r6, r0
 8008ace:	4621      	mov	r1, r4
 8008ad0:	ee18 0a10 	vmov	r0, s16
 8008ad4:	463a      	mov	r2, r7
 8008ad6:	f000 fc3b 	bl	8009350 <__lshift>
 8008ada:	1bed      	subs	r5, r5, r7
 8008adc:	4604      	mov	r4, r0
 8008ade:	f100 0914 	add.w	r9, r0, #20
 8008ae2:	f04f 0a00 	mov.w	sl, #0
 8008ae6:	e7ae      	b.n	8008a46 <__gethex+0x202>
 8008ae8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008aec:	42a8      	cmp	r0, r5
 8008aee:	dd72      	ble.n	8008bd6 <__gethex+0x392>
 8008af0:	1b45      	subs	r5, r0, r5
 8008af2:	42ae      	cmp	r6, r5
 8008af4:	dc36      	bgt.n	8008b64 <__gethex+0x320>
 8008af6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d02a      	beq.n	8008b54 <__gethex+0x310>
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d02c      	beq.n	8008b5c <__gethex+0x318>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d11c      	bne.n	8008b40 <__gethex+0x2fc>
 8008b06:	42ae      	cmp	r6, r5
 8008b08:	d11a      	bne.n	8008b40 <__gethex+0x2fc>
 8008b0a:	2e01      	cmp	r6, #1
 8008b0c:	d112      	bne.n	8008b34 <__gethex+0x2f0>
 8008b0e:	9a04      	ldr	r2, [sp, #16]
 8008b10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	2301      	movs	r3, #1
 8008b18:	6123      	str	r3, [r4, #16]
 8008b1a:	f8c9 3000 	str.w	r3, [r9]
 8008b1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b20:	2762      	movs	r7, #98	; 0x62
 8008b22:	601c      	str	r4, [r3, #0]
 8008b24:	e723      	b.n	800896e <__gethex+0x12a>
 8008b26:	bf00      	nop
 8008b28:	0800aa2c 	.word	0x0800aa2c
 8008b2c:	0800a950 	.word	0x0800a950
 8008b30:	0800a9c4 	.word	0x0800a9c4
 8008b34:	1e71      	subs	r1, r6, #1
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fe4e 	bl	80097d8 <__any_on>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d1e6      	bne.n	8008b0e <__gethex+0x2ca>
 8008b40:	ee18 0a10 	vmov	r0, s16
 8008b44:	4621      	mov	r1, r4
 8008b46:	f000 f9e7 	bl	8008f18 <_Bfree>
 8008b4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	2750      	movs	r7, #80	; 0x50
 8008b52:	e70c      	b.n	800896e <__gethex+0x12a>
 8008b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f2      	bne.n	8008b40 <__gethex+0x2fc>
 8008b5a:	e7d8      	b.n	8008b0e <__gethex+0x2ca>
 8008b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1d5      	bne.n	8008b0e <__gethex+0x2ca>
 8008b62:	e7ed      	b.n	8008b40 <__gethex+0x2fc>
 8008b64:	1e6f      	subs	r7, r5, #1
 8008b66:	f1ba 0f00 	cmp.w	sl, #0
 8008b6a:	d131      	bne.n	8008bd0 <__gethex+0x38c>
 8008b6c:	b127      	cbz	r7, 8008b78 <__gethex+0x334>
 8008b6e:	4639      	mov	r1, r7
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fe31 	bl	80097d8 <__any_on>
 8008b76:	4682      	mov	sl, r0
 8008b78:	117b      	asrs	r3, r7, #5
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b80:	f007 071f 	and.w	r7, r7, #31
 8008b84:	fa01 f707 	lsl.w	r7, r1, r7
 8008b88:	421f      	tst	r7, r3
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	bf18      	it	ne
 8008b90:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b94:	1b76      	subs	r6, r6, r5
 8008b96:	f7ff fdee 	bl	8008776 <rshift>
 8008b9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b9e:	2702      	movs	r7, #2
 8008ba0:	f1ba 0f00 	cmp.w	sl, #0
 8008ba4:	d048      	beq.n	8008c38 <__gethex+0x3f4>
 8008ba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d015      	beq.n	8008bda <__gethex+0x396>
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d017      	beq.n	8008be2 <__gethex+0x39e>
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d109      	bne.n	8008bca <__gethex+0x386>
 8008bb6:	f01a 0f02 	tst.w	sl, #2
 8008bba:	d006      	beq.n	8008bca <__gethex+0x386>
 8008bbc:	f8d9 0000 	ldr.w	r0, [r9]
 8008bc0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008bc4:	f01a 0f01 	tst.w	sl, #1
 8008bc8:	d10e      	bne.n	8008be8 <__gethex+0x3a4>
 8008bca:	f047 0710 	orr.w	r7, r7, #16
 8008bce:	e033      	b.n	8008c38 <__gethex+0x3f4>
 8008bd0:	f04f 0a01 	mov.w	sl, #1
 8008bd4:	e7d0      	b.n	8008b78 <__gethex+0x334>
 8008bd6:	2701      	movs	r7, #1
 8008bd8:	e7e2      	b.n	8008ba0 <__gethex+0x35c>
 8008bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bdc:	f1c3 0301 	rsb	r3, r3, #1
 8008be0:	9315      	str	r3, [sp, #84]	; 0x54
 8008be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0f0      	beq.n	8008bca <__gethex+0x386>
 8008be8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008bec:	f104 0314 	add.w	r3, r4, #20
 8008bf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008bf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008bf8:	f04f 0c00 	mov.w	ip, #0
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c02:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c06:	d01c      	beq.n	8008c42 <__gethex+0x3fe>
 8008c08:	3201      	adds	r2, #1
 8008c0a:	6002      	str	r2, [r0, #0]
 8008c0c:	2f02      	cmp	r7, #2
 8008c0e:	f104 0314 	add.w	r3, r4, #20
 8008c12:	d13f      	bne.n	8008c94 <__gethex+0x450>
 8008c14:	f8d8 2000 	ldr.w	r2, [r8]
 8008c18:	3a01      	subs	r2, #1
 8008c1a:	42b2      	cmp	r2, r6
 8008c1c:	d10a      	bne.n	8008c34 <__gethex+0x3f0>
 8008c1e:	1171      	asrs	r1, r6, #5
 8008c20:	2201      	movs	r2, #1
 8008c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c26:	f006 061f 	and.w	r6, r6, #31
 8008c2a:	fa02 f606 	lsl.w	r6, r2, r6
 8008c2e:	421e      	tst	r6, r3
 8008c30:	bf18      	it	ne
 8008c32:	4617      	movne	r7, r2
 8008c34:	f047 0720 	orr.w	r7, r7, #32
 8008c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c3a:	601c      	str	r4, [r3, #0]
 8008c3c:	9b04      	ldr	r3, [sp, #16]
 8008c3e:	601d      	str	r5, [r3, #0]
 8008c40:	e695      	b.n	800896e <__gethex+0x12a>
 8008c42:	4299      	cmp	r1, r3
 8008c44:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c48:	d8d8      	bhi.n	8008bfc <__gethex+0x3b8>
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	459b      	cmp	fp, r3
 8008c4e:	db19      	blt.n	8008c84 <__gethex+0x440>
 8008c50:	6861      	ldr	r1, [r4, #4]
 8008c52:	ee18 0a10 	vmov	r0, s16
 8008c56:	3101      	adds	r1, #1
 8008c58:	f000 f91e 	bl	8008e98 <_Balloc>
 8008c5c:	4681      	mov	r9, r0
 8008c5e:	b918      	cbnz	r0, 8008c68 <__gethex+0x424>
 8008c60:	4b1a      	ldr	r3, [pc, #104]	; (8008ccc <__gethex+0x488>)
 8008c62:	4602      	mov	r2, r0
 8008c64:	2184      	movs	r1, #132	; 0x84
 8008c66:	e6a8      	b.n	80089ba <__gethex+0x176>
 8008c68:	6922      	ldr	r2, [r4, #16]
 8008c6a:	3202      	adds	r2, #2
 8008c6c:	f104 010c 	add.w	r1, r4, #12
 8008c70:	0092      	lsls	r2, r2, #2
 8008c72:	300c      	adds	r0, #12
 8008c74:	f7fd f894 	bl	8005da0 <memcpy>
 8008c78:	4621      	mov	r1, r4
 8008c7a:	ee18 0a10 	vmov	r0, s16
 8008c7e:	f000 f94b 	bl	8008f18 <_Bfree>
 8008c82:	464c      	mov	r4, r9
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c8c:	6122      	str	r2, [r4, #16]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	615a      	str	r2, [r3, #20]
 8008c92:	e7bb      	b.n	8008c0c <__gethex+0x3c8>
 8008c94:	6922      	ldr	r2, [r4, #16]
 8008c96:	455a      	cmp	r2, fp
 8008c98:	dd0b      	ble.n	8008cb2 <__gethex+0x46e>
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7ff fd6a 	bl	8008776 <rshift>
 8008ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ca6:	3501      	adds	r5, #1
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	f6ff aed0 	blt.w	8008a4e <__gethex+0x20a>
 8008cae:	2701      	movs	r7, #1
 8008cb0:	e7c0      	b.n	8008c34 <__gethex+0x3f0>
 8008cb2:	f016 061f 	ands.w	r6, r6, #31
 8008cb6:	d0fa      	beq.n	8008cae <__gethex+0x46a>
 8008cb8:	4453      	add	r3, sl
 8008cba:	f1c6 0620 	rsb	r6, r6, #32
 8008cbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008cc2:	f000 f9db 	bl	800907c <__hi0bits>
 8008cc6:	42b0      	cmp	r0, r6
 8008cc8:	dbe7      	blt.n	8008c9a <__gethex+0x456>
 8008cca:	e7f0      	b.n	8008cae <__gethex+0x46a>
 8008ccc:	0800a950 	.word	0x0800a950

08008cd0 <L_shift>:
 8008cd0:	f1c2 0208 	rsb	r2, r2, #8
 8008cd4:	0092      	lsls	r2, r2, #2
 8008cd6:	b570      	push	{r4, r5, r6, lr}
 8008cd8:	f1c2 0620 	rsb	r6, r2, #32
 8008cdc:	6843      	ldr	r3, [r0, #4]
 8008cde:	6804      	ldr	r4, [r0, #0]
 8008ce0:	fa03 f506 	lsl.w	r5, r3, r6
 8008ce4:	432c      	orrs	r4, r5
 8008ce6:	40d3      	lsrs	r3, r2
 8008ce8:	6004      	str	r4, [r0, #0]
 8008cea:	f840 3f04 	str.w	r3, [r0, #4]!
 8008cee:	4288      	cmp	r0, r1
 8008cf0:	d3f4      	bcc.n	8008cdc <L_shift+0xc>
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}

08008cf4 <__match>:
 8008cf4:	b530      	push	{r4, r5, lr}
 8008cf6:	6803      	ldr	r3, [r0, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfe:	b914      	cbnz	r4, 8008d06 <__match+0x12>
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	2001      	movs	r0, #1
 8008d04:	bd30      	pop	{r4, r5, pc}
 8008d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d0e:	2d19      	cmp	r5, #25
 8008d10:	bf98      	it	ls
 8008d12:	3220      	addls	r2, #32
 8008d14:	42a2      	cmp	r2, r4
 8008d16:	d0f0      	beq.n	8008cfa <__match+0x6>
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e7f3      	b.n	8008d04 <__match+0x10>

08008d1c <__hexnan>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	680b      	ldr	r3, [r1, #0]
 8008d22:	115e      	asrs	r6, r3, #5
 8008d24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d28:	f013 031f 	ands.w	r3, r3, #31
 8008d2c:	b087      	sub	sp, #28
 8008d2e:	bf18      	it	ne
 8008d30:	3604      	addne	r6, #4
 8008d32:	2500      	movs	r5, #0
 8008d34:	1f37      	subs	r7, r6, #4
 8008d36:	4690      	mov	r8, r2
 8008d38:	6802      	ldr	r2, [r0, #0]
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	4682      	mov	sl, r0
 8008d3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d42:	46b9      	mov	r9, r7
 8008d44:	463c      	mov	r4, r7
 8008d46:	9502      	str	r5, [sp, #8]
 8008d48:	46ab      	mov	fp, r5
 8008d4a:	7851      	ldrb	r1, [r2, #1]
 8008d4c:	1c53      	adds	r3, r2, #1
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	b341      	cbz	r1, 8008da4 <__hexnan+0x88>
 8008d52:	4608      	mov	r0, r1
 8008d54:	9205      	str	r2, [sp, #20]
 8008d56:	9104      	str	r1, [sp, #16]
 8008d58:	f7ff fd5f 	bl	800881a <__hexdig_fun>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d14f      	bne.n	8008e00 <__hexnan+0xe4>
 8008d60:	9904      	ldr	r1, [sp, #16]
 8008d62:	9a05      	ldr	r2, [sp, #20]
 8008d64:	2920      	cmp	r1, #32
 8008d66:	d818      	bhi.n	8008d9a <__hexnan+0x7e>
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	459b      	cmp	fp, r3
 8008d6c:	dd13      	ble.n	8008d96 <__hexnan+0x7a>
 8008d6e:	454c      	cmp	r4, r9
 8008d70:	d206      	bcs.n	8008d80 <__hexnan+0x64>
 8008d72:	2d07      	cmp	r5, #7
 8008d74:	dc04      	bgt.n	8008d80 <__hexnan+0x64>
 8008d76:	462a      	mov	r2, r5
 8008d78:	4649      	mov	r1, r9
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff ffa8 	bl	8008cd0 <L_shift>
 8008d80:	4544      	cmp	r4, r8
 8008d82:	d950      	bls.n	8008e26 <__hexnan+0x10a>
 8008d84:	2300      	movs	r3, #0
 8008d86:	f1a4 0904 	sub.w	r9, r4, #4
 8008d8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d8e:	f8cd b008 	str.w	fp, [sp, #8]
 8008d92:	464c      	mov	r4, r9
 8008d94:	461d      	mov	r5, r3
 8008d96:	9a03      	ldr	r2, [sp, #12]
 8008d98:	e7d7      	b.n	8008d4a <__hexnan+0x2e>
 8008d9a:	2929      	cmp	r1, #41	; 0x29
 8008d9c:	d156      	bne.n	8008e4c <__hexnan+0x130>
 8008d9e:	3202      	adds	r2, #2
 8008da0:	f8ca 2000 	str.w	r2, [sl]
 8008da4:	f1bb 0f00 	cmp.w	fp, #0
 8008da8:	d050      	beq.n	8008e4c <__hexnan+0x130>
 8008daa:	454c      	cmp	r4, r9
 8008dac:	d206      	bcs.n	8008dbc <__hexnan+0xa0>
 8008dae:	2d07      	cmp	r5, #7
 8008db0:	dc04      	bgt.n	8008dbc <__hexnan+0xa0>
 8008db2:	462a      	mov	r2, r5
 8008db4:	4649      	mov	r1, r9
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7ff ff8a 	bl	8008cd0 <L_shift>
 8008dbc:	4544      	cmp	r4, r8
 8008dbe:	d934      	bls.n	8008e2a <__hexnan+0x10e>
 8008dc0:	f1a8 0204 	sub.w	r2, r8, #4
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008dca:	f842 1f04 	str.w	r1, [r2, #4]!
 8008dce:	429f      	cmp	r7, r3
 8008dd0:	d2f9      	bcs.n	8008dc6 <__hexnan+0xaa>
 8008dd2:	1b3b      	subs	r3, r7, r4
 8008dd4:	f023 0303 	bic.w	r3, r3, #3
 8008dd8:	3304      	adds	r3, #4
 8008dda:	3401      	adds	r4, #1
 8008ddc:	3e03      	subs	r6, #3
 8008dde:	42b4      	cmp	r4, r6
 8008de0:	bf88      	it	hi
 8008de2:	2304      	movhi	r3, #4
 8008de4:	4443      	add	r3, r8
 8008de6:	2200      	movs	r2, #0
 8008de8:	f843 2b04 	str.w	r2, [r3], #4
 8008dec:	429f      	cmp	r7, r3
 8008dee:	d2fb      	bcs.n	8008de8 <__hexnan+0xcc>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	b91b      	cbnz	r3, 8008dfc <__hexnan+0xe0>
 8008df4:	4547      	cmp	r7, r8
 8008df6:	d127      	bne.n	8008e48 <__hexnan+0x12c>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	2005      	movs	r0, #5
 8008dfe:	e026      	b.n	8008e4e <__hexnan+0x132>
 8008e00:	3501      	adds	r5, #1
 8008e02:	2d08      	cmp	r5, #8
 8008e04:	f10b 0b01 	add.w	fp, fp, #1
 8008e08:	dd06      	ble.n	8008e18 <__hexnan+0xfc>
 8008e0a:	4544      	cmp	r4, r8
 8008e0c:	d9c3      	bls.n	8008d96 <__hexnan+0x7a>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e14:	2501      	movs	r5, #1
 8008e16:	3c04      	subs	r4, #4
 8008e18:	6822      	ldr	r2, [r4, #0]
 8008e1a:	f000 000f 	and.w	r0, r0, #15
 8008e1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e22:	6022      	str	r2, [r4, #0]
 8008e24:	e7b7      	b.n	8008d96 <__hexnan+0x7a>
 8008e26:	2508      	movs	r5, #8
 8008e28:	e7b5      	b.n	8008d96 <__hexnan+0x7a>
 8008e2a:	9b01      	ldr	r3, [sp, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0df      	beq.n	8008df0 <__hexnan+0xd4>
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295
 8008e34:	f1c3 0320 	rsb	r3, r3, #32
 8008e38:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e40:	401a      	ands	r2, r3
 8008e42:	f846 2c04 	str.w	r2, [r6, #-4]
 8008e46:	e7d3      	b.n	8008df0 <__hexnan+0xd4>
 8008e48:	3f04      	subs	r7, #4
 8008e4a:	e7d1      	b.n	8008df0 <__hexnan+0xd4>
 8008e4c:	2004      	movs	r0, #4
 8008e4e:	b007      	add	sp, #28
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e54 <_localeconv_r>:
 8008e54:	4800      	ldr	r0, [pc, #0]	; (8008e58 <_localeconv_r+0x4>)
 8008e56:	4770      	bx	lr
 8008e58:	20000168 	.word	0x20000168

08008e5c <__retarget_lock_init_recursive>:
 8008e5c:	4770      	bx	lr

08008e5e <__retarget_lock_acquire_recursive>:
 8008e5e:	4770      	bx	lr

08008e60 <__retarget_lock_release_recursive>:
 8008e60:	4770      	bx	lr
	...

08008e64 <malloc>:
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <malloc+0xc>)
 8008e66:	4601      	mov	r1, r0
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f000 bd59 	b.w	8009920 <_malloc_r>
 8008e6e:	bf00      	nop
 8008e70:	20000010 	.word	0x20000010

08008e74 <__ascii_mbtowc>:
 8008e74:	b082      	sub	sp, #8
 8008e76:	b901      	cbnz	r1, 8008e7a <__ascii_mbtowc+0x6>
 8008e78:	a901      	add	r1, sp, #4
 8008e7a:	b142      	cbz	r2, 8008e8e <__ascii_mbtowc+0x1a>
 8008e7c:	b14b      	cbz	r3, 8008e92 <__ascii_mbtowc+0x1e>
 8008e7e:	7813      	ldrb	r3, [r2, #0]
 8008e80:	600b      	str	r3, [r1, #0]
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	1e10      	subs	r0, r2, #0
 8008e86:	bf18      	it	ne
 8008e88:	2001      	movne	r0, #1
 8008e8a:	b002      	add	sp, #8
 8008e8c:	4770      	bx	lr
 8008e8e:	4610      	mov	r0, r2
 8008e90:	e7fb      	b.n	8008e8a <__ascii_mbtowc+0x16>
 8008e92:	f06f 0001 	mvn.w	r0, #1
 8008e96:	e7f8      	b.n	8008e8a <__ascii_mbtowc+0x16>

08008e98 <_Balloc>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	b976      	cbnz	r6, 8008ec0 <_Balloc+0x28>
 8008ea2:	2010      	movs	r0, #16
 8008ea4:	f7ff ffde 	bl	8008e64 <malloc>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8008eac:	b920      	cbnz	r0, 8008eb8 <_Balloc+0x20>
 8008eae:	4b18      	ldr	r3, [pc, #96]	; (8008f10 <_Balloc+0x78>)
 8008eb0:	4818      	ldr	r0, [pc, #96]	; (8008f14 <_Balloc+0x7c>)
 8008eb2:	2166      	movs	r1, #102	; 0x66
 8008eb4:	f001 f9b0 	bl	800a218 <__assert_func>
 8008eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ebc:	6006      	str	r6, [r0, #0]
 8008ebe:	60c6      	str	r6, [r0, #12]
 8008ec0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ec2:	68f3      	ldr	r3, [r6, #12]
 8008ec4:	b183      	cbz	r3, 8008ee8 <_Balloc+0x50>
 8008ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ece:	b9b8      	cbnz	r0, 8008f00 <_Balloc+0x68>
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ed6:	1d72      	adds	r2, r6, #5
 8008ed8:	0092      	lsls	r2, r2, #2
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 fc9d 	bl	800981a <_calloc_r>
 8008ee0:	b160      	cbz	r0, 8008efc <_Balloc+0x64>
 8008ee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ee6:	e00e      	b.n	8008f06 <_Balloc+0x6e>
 8008ee8:	2221      	movs	r2, #33	; 0x21
 8008eea:	2104      	movs	r1, #4
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 fc94 	bl	800981a <_calloc_r>
 8008ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef4:	60f0      	str	r0, [r6, #12]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e4      	bne.n	8008ec6 <_Balloc+0x2e>
 8008efc:	2000      	movs	r0, #0
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	6802      	ldr	r2, [r0, #0]
 8008f02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f06:	2300      	movs	r3, #0
 8008f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f0c:	e7f7      	b.n	8008efe <_Balloc+0x66>
 8008f0e:	bf00      	nop
 8008f10:	0800a8de 	.word	0x0800a8de
 8008f14:	0800aa40 	.word	0x0800aa40

08008f18 <_Bfree>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	b976      	cbnz	r6, 8008f40 <_Bfree+0x28>
 8008f22:	2010      	movs	r0, #16
 8008f24:	f7ff ff9e 	bl	8008e64 <malloc>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	6268      	str	r0, [r5, #36]	; 0x24
 8008f2c:	b920      	cbnz	r0, 8008f38 <_Bfree+0x20>
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <_Bfree+0x3c>)
 8008f30:	4809      	ldr	r0, [pc, #36]	; (8008f58 <_Bfree+0x40>)
 8008f32:	218a      	movs	r1, #138	; 0x8a
 8008f34:	f001 f970 	bl	800a218 <__assert_func>
 8008f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f3c:	6006      	str	r6, [r0, #0]
 8008f3e:	60c6      	str	r6, [r0, #12]
 8008f40:	b13c      	cbz	r4, 8008f52 <_Bfree+0x3a>
 8008f42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f44:	6862      	ldr	r2, [r4, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f4c:	6021      	str	r1, [r4, #0]
 8008f4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	0800a8de 	.word	0x0800a8de
 8008f58:	0800aa40 	.word	0x0800aa40

08008f5c <__multadd>:
 8008f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f60:	690d      	ldr	r5, [r1, #16]
 8008f62:	4607      	mov	r7, r0
 8008f64:	460c      	mov	r4, r1
 8008f66:	461e      	mov	r6, r3
 8008f68:	f101 0c14 	add.w	ip, r1, #20
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f8dc 3000 	ldr.w	r3, [ip]
 8008f72:	b299      	uxth	r1, r3
 8008f74:	fb02 6101 	mla	r1, r2, r1, r6
 8008f78:	0c1e      	lsrs	r6, r3, #16
 8008f7a:	0c0b      	lsrs	r3, r1, #16
 8008f7c:	fb02 3306 	mla	r3, r2, r6, r3
 8008f80:	b289      	uxth	r1, r1
 8008f82:	3001      	adds	r0, #1
 8008f84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f88:	4285      	cmp	r5, r0
 8008f8a:	f84c 1b04 	str.w	r1, [ip], #4
 8008f8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f92:	dcec      	bgt.n	8008f6e <__multadd+0x12>
 8008f94:	b30e      	cbz	r6, 8008fda <__multadd+0x7e>
 8008f96:	68a3      	ldr	r3, [r4, #8]
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	dc19      	bgt.n	8008fd0 <__multadd+0x74>
 8008f9c:	6861      	ldr	r1, [r4, #4]
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	3101      	adds	r1, #1
 8008fa2:	f7ff ff79 	bl	8008e98 <_Balloc>
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	b928      	cbnz	r0, 8008fb6 <__multadd+0x5a>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <__multadd+0x84>)
 8008fae:	480d      	ldr	r0, [pc, #52]	; (8008fe4 <__multadd+0x88>)
 8008fb0:	21b5      	movs	r1, #181	; 0xb5
 8008fb2:	f001 f931 	bl	800a218 <__assert_func>
 8008fb6:	6922      	ldr	r2, [r4, #16]
 8008fb8:	3202      	adds	r2, #2
 8008fba:	f104 010c 	add.w	r1, r4, #12
 8008fbe:	0092      	lsls	r2, r2, #2
 8008fc0:	300c      	adds	r0, #12
 8008fc2:	f7fc feed 	bl	8005da0 <memcpy>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ffa5 	bl	8008f18 <_Bfree>
 8008fce:	4644      	mov	r4, r8
 8008fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	615e      	str	r6, [r3, #20]
 8008fd8:	6125      	str	r5, [r4, #16]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe0:	0800a950 	.word	0x0800a950
 8008fe4:	0800aa40 	.word	0x0800aa40

08008fe8 <__s2b>:
 8008fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fec:	460c      	mov	r4, r1
 8008fee:	4615      	mov	r5, r2
 8008ff0:	461f      	mov	r7, r3
 8008ff2:	2209      	movs	r2, #9
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	2201      	movs	r2, #1
 8009000:	429a      	cmp	r2, r3
 8009002:	db09      	blt.n	8009018 <__s2b+0x30>
 8009004:	4630      	mov	r0, r6
 8009006:	f7ff ff47 	bl	8008e98 <_Balloc>
 800900a:	b940      	cbnz	r0, 800901e <__s2b+0x36>
 800900c:	4602      	mov	r2, r0
 800900e:	4b19      	ldr	r3, [pc, #100]	; (8009074 <__s2b+0x8c>)
 8009010:	4819      	ldr	r0, [pc, #100]	; (8009078 <__s2b+0x90>)
 8009012:	21ce      	movs	r1, #206	; 0xce
 8009014:	f001 f900 	bl	800a218 <__assert_func>
 8009018:	0052      	lsls	r2, r2, #1
 800901a:	3101      	adds	r1, #1
 800901c:	e7f0      	b.n	8009000 <__s2b+0x18>
 800901e:	9b08      	ldr	r3, [sp, #32]
 8009020:	6143      	str	r3, [r0, #20]
 8009022:	2d09      	cmp	r5, #9
 8009024:	f04f 0301 	mov.w	r3, #1
 8009028:	6103      	str	r3, [r0, #16]
 800902a:	dd16      	ble.n	800905a <__s2b+0x72>
 800902c:	f104 0909 	add.w	r9, r4, #9
 8009030:	46c8      	mov	r8, r9
 8009032:	442c      	add	r4, r5
 8009034:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009038:	4601      	mov	r1, r0
 800903a:	3b30      	subs	r3, #48	; 0x30
 800903c:	220a      	movs	r2, #10
 800903e:	4630      	mov	r0, r6
 8009040:	f7ff ff8c 	bl	8008f5c <__multadd>
 8009044:	45a0      	cmp	r8, r4
 8009046:	d1f5      	bne.n	8009034 <__s2b+0x4c>
 8009048:	f1a5 0408 	sub.w	r4, r5, #8
 800904c:	444c      	add	r4, r9
 800904e:	1b2d      	subs	r5, r5, r4
 8009050:	1963      	adds	r3, r4, r5
 8009052:	42bb      	cmp	r3, r7
 8009054:	db04      	blt.n	8009060 <__s2b+0x78>
 8009056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905a:	340a      	adds	r4, #10
 800905c:	2509      	movs	r5, #9
 800905e:	e7f6      	b.n	800904e <__s2b+0x66>
 8009060:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009064:	4601      	mov	r1, r0
 8009066:	3b30      	subs	r3, #48	; 0x30
 8009068:	220a      	movs	r2, #10
 800906a:	4630      	mov	r0, r6
 800906c:	f7ff ff76 	bl	8008f5c <__multadd>
 8009070:	e7ee      	b.n	8009050 <__s2b+0x68>
 8009072:	bf00      	nop
 8009074:	0800a950 	.word	0x0800a950
 8009078:	0800aa40 	.word	0x0800aa40

0800907c <__hi0bits>:
 800907c:	0c03      	lsrs	r3, r0, #16
 800907e:	041b      	lsls	r3, r3, #16
 8009080:	b9d3      	cbnz	r3, 80090b8 <__hi0bits+0x3c>
 8009082:	0400      	lsls	r0, r0, #16
 8009084:	2310      	movs	r3, #16
 8009086:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800908a:	bf04      	itt	eq
 800908c:	0200      	lsleq	r0, r0, #8
 800908e:	3308      	addeq	r3, #8
 8009090:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009094:	bf04      	itt	eq
 8009096:	0100      	lsleq	r0, r0, #4
 8009098:	3304      	addeq	r3, #4
 800909a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800909e:	bf04      	itt	eq
 80090a0:	0080      	lsleq	r0, r0, #2
 80090a2:	3302      	addeq	r3, #2
 80090a4:	2800      	cmp	r0, #0
 80090a6:	db05      	blt.n	80090b4 <__hi0bits+0x38>
 80090a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090ac:	f103 0301 	add.w	r3, r3, #1
 80090b0:	bf08      	it	eq
 80090b2:	2320      	moveq	r3, #32
 80090b4:	4618      	mov	r0, r3
 80090b6:	4770      	bx	lr
 80090b8:	2300      	movs	r3, #0
 80090ba:	e7e4      	b.n	8009086 <__hi0bits+0xa>

080090bc <__lo0bits>:
 80090bc:	6803      	ldr	r3, [r0, #0]
 80090be:	f013 0207 	ands.w	r2, r3, #7
 80090c2:	4601      	mov	r1, r0
 80090c4:	d00b      	beq.n	80090de <__lo0bits+0x22>
 80090c6:	07da      	lsls	r2, r3, #31
 80090c8:	d423      	bmi.n	8009112 <__lo0bits+0x56>
 80090ca:	0798      	lsls	r0, r3, #30
 80090cc:	bf49      	itett	mi
 80090ce:	085b      	lsrmi	r3, r3, #1
 80090d0:	089b      	lsrpl	r3, r3, #2
 80090d2:	2001      	movmi	r0, #1
 80090d4:	600b      	strmi	r3, [r1, #0]
 80090d6:	bf5c      	itt	pl
 80090d8:	600b      	strpl	r3, [r1, #0]
 80090da:	2002      	movpl	r0, #2
 80090dc:	4770      	bx	lr
 80090de:	b298      	uxth	r0, r3
 80090e0:	b9a8      	cbnz	r0, 800910e <__lo0bits+0x52>
 80090e2:	0c1b      	lsrs	r3, r3, #16
 80090e4:	2010      	movs	r0, #16
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	b90a      	cbnz	r2, 80090ee <__lo0bits+0x32>
 80090ea:	3008      	adds	r0, #8
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	071a      	lsls	r2, r3, #28
 80090f0:	bf04      	itt	eq
 80090f2:	091b      	lsreq	r3, r3, #4
 80090f4:	3004      	addeq	r0, #4
 80090f6:	079a      	lsls	r2, r3, #30
 80090f8:	bf04      	itt	eq
 80090fa:	089b      	lsreq	r3, r3, #2
 80090fc:	3002      	addeq	r0, #2
 80090fe:	07da      	lsls	r2, r3, #31
 8009100:	d403      	bmi.n	800910a <__lo0bits+0x4e>
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	f100 0001 	add.w	r0, r0, #1
 8009108:	d005      	beq.n	8009116 <__lo0bits+0x5a>
 800910a:	600b      	str	r3, [r1, #0]
 800910c:	4770      	bx	lr
 800910e:	4610      	mov	r0, r2
 8009110:	e7e9      	b.n	80090e6 <__lo0bits+0x2a>
 8009112:	2000      	movs	r0, #0
 8009114:	4770      	bx	lr
 8009116:	2020      	movs	r0, #32
 8009118:	4770      	bx	lr
	...

0800911c <__i2b>:
 800911c:	b510      	push	{r4, lr}
 800911e:	460c      	mov	r4, r1
 8009120:	2101      	movs	r1, #1
 8009122:	f7ff feb9 	bl	8008e98 <_Balloc>
 8009126:	4602      	mov	r2, r0
 8009128:	b928      	cbnz	r0, 8009136 <__i2b+0x1a>
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <__i2b+0x24>)
 800912c:	4805      	ldr	r0, [pc, #20]	; (8009144 <__i2b+0x28>)
 800912e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009132:	f001 f871 	bl	800a218 <__assert_func>
 8009136:	2301      	movs	r3, #1
 8009138:	6144      	str	r4, [r0, #20]
 800913a:	6103      	str	r3, [r0, #16]
 800913c:	bd10      	pop	{r4, pc}
 800913e:	bf00      	nop
 8009140:	0800a950 	.word	0x0800a950
 8009144:	0800aa40 	.word	0x0800aa40

08009148 <__multiply>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	4691      	mov	r9, r2
 800914e:	690a      	ldr	r2, [r1, #16]
 8009150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009154:	429a      	cmp	r2, r3
 8009156:	bfb8      	it	lt
 8009158:	460b      	movlt	r3, r1
 800915a:	460c      	mov	r4, r1
 800915c:	bfbc      	itt	lt
 800915e:	464c      	movlt	r4, r9
 8009160:	4699      	movlt	r9, r3
 8009162:	6927      	ldr	r7, [r4, #16]
 8009164:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009168:	68a3      	ldr	r3, [r4, #8]
 800916a:	6861      	ldr	r1, [r4, #4]
 800916c:	eb07 060a 	add.w	r6, r7, sl
 8009170:	42b3      	cmp	r3, r6
 8009172:	b085      	sub	sp, #20
 8009174:	bfb8      	it	lt
 8009176:	3101      	addlt	r1, #1
 8009178:	f7ff fe8e 	bl	8008e98 <_Balloc>
 800917c:	b930      	cbnz	r0, 800918c <__multiply+0x44>
 800917e:	4602      	mov	r2, r0
 8009180:	4b44      	ldr	r3, [pc, #272]	; (8009294 <__multiply+0x14c>)
 8009182:	4845      	ldr	r0, [pc, #276]	; (8009298 <__multiply+0x150>)
 8009184:	f240 115d 	movw	r1, #349	; 0x15d
 8009188:	f001 f846 	bl	800a218 <__assert_func>
 800918c:	f100 0514 	add.w	r5, r0, #20
 8009190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009194:	462b      	mov	r3, r5
 8009196:	2200      	movs	r2, #0
 8009198:	4543      	cmp	r3, r8
 800919a:	d321      	bcc.n	80091e0 <__multiply+0x98>
 800919c:	f104 0314 	add.w	r3, r4, #20
 80091a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091a4:	f109 0314 	add.w	r3, r9, #20
 80091a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091ac:	9202      	str	r2, [sp, #8]
 80091ae:	1b3a      	subs	r2, r7, r4
 80091b0:	3a15      	subs	r2, #21
 80091b2:	f022 0203 	bic.w	r2, r2, #3
 80091b6:	3204      	adds	r2, #4
 80091b8:	f104 0115 	add.w	r1, r4, #21
 80091bc:	428f      	cmp	r7, r1
 80091be:	bf38      	it	cc
 80091c0:	2204      	movcc	r2, #4
 80091c2:	9201      	str	r2, [sp, #4]
 80091c4:	9a02      	ldr	r2, [sp, #8]
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d80c      	bhi.n	80091e6 <__multiply+0x9e>
 80091cc:	2e00      	cmp	r6, #0
 80091ce:	dd03      	ble.n	80091d8 <__multiply+0x90>
 80091d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d05a      	beq.n	800928e <__multiply+0x146>
 80091d8:	6106      	str	r6, [r0, #16]
 80091da:	b005      	add	sp, #20
 80091dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e0:	f843 2b04 	str.w	r2, [r3], #4
 80091e4:	e7d8      	b.n	8009198 <__multiply+0x50>
 80091e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80091ea:	f1ba 0f00 	cmp.w	sl, #0
 80091ee:	d024      	beq.n	800923a <__multiply+0xf2>
 80091f0:	f104 0e14 	add.w	lr, r4, #20
 80091f4:	46a9      	mov	r9, r5
 80091f6:	f04f 0c00 	mov.w	ip, #0
 80091fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091fe:	f8d9 1000 	ldr.w	r1, [r9]
 8009202:	fa1f fb82 	uxth.w	fp, r2
 8009206:	b289      	uxth	r1, r1
 8009208:	fb0a 110b 	mla	r1, sl, fp, r1
 800920c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009210:	f8d9 2000 	ldr.w	r2, [r9]
 8009214:	4461      	add	r1, ip
 8009216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800921a:	fb0a c20b 	mla	r2, sl, fp, ip
 800921e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009222:	b289      	uxth	r1, r1
 8009224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009228:	4577      	cmp	r7, lr
 800922a:	f849 1b04 	str.w	r1, [r9], #4
 800922e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009232:	d8e2      	bhi.n	80091fa <__multiply+0xb2>
 8009234:	9a01      	ldr	r2, [sp, #4]
 8009236:	f845 c002 	str.w	ip, [r5, r2]
 800923a:	9a03      	ldr	r2, [sp, #12]
 800923c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009240:	3304      	adds	r3, #4
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d020      	beq.n	800928a <__multiply+0x142>
 8009248:	6829      	ldr	r1, [r5, #0]
 800924a:	f104 0c14 	add.w	ip, r4, #20
 800924e:	46ae      	mov	lr, r5
 8009250:	f04f 0a00 	mov.w	sl, #0
 8009254:	f8bc b000 	ldrh.w	fp, [ip]
 8009258:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800925c:	fb09 220b 	mla	r2, r9, fp, r2
 8009260:	4492      	add	sl, r2
 8009262:	b289      	uxth	r1, r1
 8009264:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009268:	f84e 1b04 	str.w	r1, [lr], #4
 800926c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009270:	f8be 1000 	ldrh.w	r1, [lr]
 8009274:	0c12      	lsrs	r2, r2, #16
 8009276:	fb09 1102 	mla	r1, r9, r2, r1
 800927a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800927e:	4567      	cmp	r7, ip
 8009280:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009284:	d8e6      	bhi.n	8009254 <__multiply+0x10c>
 8009286:	9a01      	ldr	r2, [sp, #4]
 8009288:	50a9      	str	r1, [r5, r2]
 800928a:	3504      	adds	r5, #4
 800928c:	e79a      	b.n	80091c4 <__multiply+0x7c>
 800928e:	3e01      	subs	r6, #1
 8009290:	e79c      	b.n	80091cc <__multiply+0x84>
 8009292:	bf00      	nop
 8009294:	0800a950 	.word	0x0800a950
 8009298:	0800aa40 	.word	0x0800aa40

0800929c <__pow5mult>:
 800929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	4615      	mov	r5, r2
 80092a2:	f012 0203 	ands.w	r2, r2, #3
 80092a6:	4606      	mov	r6, r0
 80092a8:	460f      	mov	r7, r1
 80092aa:	d007      	beq.n	80092bc <__pow5mult+0x20>
 80092ac:	4c25      	ldr	r4, [pc, #148]	; (8009344 <__pow5mult+0xa8>)
 80092ae:	3a01      	subs	r2, #1
 80092b0:	2300      	movs	r3, #0
 80092b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092b6:	f7ff fe51 	bl	8008f5c <__multadd>
 80092ba:	4607      	mov	r7, r0
 80092bc:	10ad      	asrs	r5, r5, #2
 80092be:	d03d      	beq.n	800933c <__pow5mult+0xa0>
 80092c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092c2:	b97c      	cbnz	r4, 80092e4 <__pow5mult+0x48>
 80092c4:	2010      	movs	r0, #16
 80092c6:	f7ff fdcd 	bl	8008e64 <malloc>
 80092ca:	4602      	mov	r2, r0
 80092cc:	6270      	str	r0, [r6, #36]	; 0x24
 80092ce:	b928      	cbnz	r0, 80092dc <__pow5mult+0x40>
 80092d0:	4b1d      	ldr	r3, [pc, #116]	; (8009348 <__pow5mult+0xac>)
 80092d2:	481e      	ldr	r0, [pc, #120]	; (800934c <__pow5mult+0xb0>)
 80092d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092d8:	f000 ff9e 	bl	800a218 <__assert_func>
 80092dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092e0:	6004      	str	r4, [r0, #0]
 80092e2:	60c4      	str	r4, [r0, #12]
 80092e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092ec:	b94c      	cbnz	r4, 8009302 <__pow5mult+0x66>
 80092ee:	f240 2171 	movw	r1, #625	; 0x271
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7ff ff12 	bl	800911c <__i2b>
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80092fe:	4604      	mov	r4, r0
 8009300:	6003      	str	r3, [r0, #0]
 8009302:	f04f 0900 	mov.w	r9, #0
 8009306:	07eb      	lsls	r3, r5, #31
 8009308:	d50a      	bpl.n	8009320 <__pow5mult+0x84>
 800930a:	4639      	mov	r1, r7
 800930c:	4622      	mov	r2, r4
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ff1a 	bl	8009148 <__multiply>
 8009314:	4639      	mov	r1, r7
 8009316:	4680      	mov	r8, r0
 8009318:	4630      	mov	r0, r6
 800931a:	f7ff fdfd 	bl	8008f18 <_Bfree>
 800931e:	4647      	mov	r7, r8
 8009320:	106d      	asrs	r5, r5, #1
 8009322:	d00b      	beq.n	800933c <__pow5mult+0xa0>
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	b938      	cbnz	r0, 8009338 <__pow5mult+0x9c>
 8009328:	4622      	mov	r2, r4
 800932a:	4621      	mov	r1, r4
 800932c:	4630      	mov	r0, r6
 800932e:	f7ff ff0b 	bl	8009148 <__multiply>
 8009332:	6020      	str	r0, [r4, #0]
 8009334:	f8c0 9000 	str.w	r9, [r0]
 8009338:	4604      	mov	r4, r0
 800933a:	e7e4      	b.n	8009306 <__pow5mult+0x6a>
 800933c:	4638      	mov	r0, r7
 800933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009342:	bf00      	nop
 8009344:	0800ab90 	.word	0x0800ab90
 8009348:	0800a8de 	.word	0x0800a8de
 800934c:	0800aa40 	.word	0x0800aa40

08009350 <__lshift>:
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	460c      	mov	r4, r1
 8009356:	6849      	ldr	r1, [r1, #4]
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800935e:	68a3      	ldr	r3, [r4, #8]
 8009360:	4607      	mov	r7, r0
 8009362:	4691      	mov	r9, r2
 8009364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009368:	f108 0601 	add.w	r6, r8, #1
 800936c:	42b3      	cmp	r3, r6
 800936e:	db0b      	blt.n	8009388 <__lshift+0x38>
 8009370:	4638      	mov	r0, r7
 8009372:	f7ff fd91 	bl	8008e98 <_Balloc>
 8009376:	4605      	mov	r5, r0
 8009378:	b948      	cbnz	r0, 800938e <__lshift+0x3e>
 800937a:	4602      	mov	r2, r0
 800937c:	4b2a      	ldr	r3, [pc, #168]	; (8009428 <__lshift+0xd8>)
 800937e:	482b      	ldr	r0, [pc, #172]	; (800942c <__lshift+0xdc>)
 8009380:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009384:	f000 ff48 	bl	800a218 <__assert_func>
 8009388:	3101      	adds	r1, #1
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	e7ee      	b.n	800936c <__lshift+0x1c>
 800938e:	2300      	movs	r3, #0
 8009390:	f100 0114 	add.w	r1, r0, #20
 8009394:	f100 0210 	add.w	r2, r0, #16
 8009398:	4618      	mov	r0, r3
 800939a:	4553      	cmp	r3, sl
 800939c:	db37      	blt.n	800940e <__lshift+0xbe>
 800939e:	6920      	ldr	r0, [r4, #16]
 80093a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093a4:	f104 0314 	add.w	r3, r4, #20
 80093a8:	f019 091f 	ands.w	r9, r9, #31
 80093ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093b4:	d02f      	beq.n	8009416 <__lshift+0xc6>
 80093b6:	f1c9 0e20 	rsb	lr, r9, #32
 80093ba:	468a      	mov	sl, r1
 80093bc:	f04f 0c00 	mov.w	ip, #0
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	fa02 f209 	lsl.w	r2, r2, r9
 80093c6:	ea42 020c 	orr.w	r2, r2, ip
 80093ca:	f84a 2b04 	str.w	r2, [sl], #4
 80093ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d2:	4298      	cmp	r0, r3
 80093d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80093d8:	d8f2      	bhi.n	80093c0 <__lshift+0x70>
 80093da:	1b03      	subs	r3, r0, r4
 80093dc:	3b15      	subs	r3, #21
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	3304      	adds	r3, #4
 80093e4:	f104 0215 	add.w	r2, r4, #21
 80093e8:	4290      	cmp	r0, r2
 80093ea:	bf38      	it	cc
 80093ec:	2304      	movcc	r3, #4
 80093ee:	f841 c003 	str.w	ip, [r1, r3]
 80093f2:	f1bc 0f00 	cmp.w	ip, #0
 80093f6:	d001      	beq.n	80093fc <__lshift+0xac>
 80093f8:	f108 0602 	add.w	r6, r8, #2
 80093fc:	3e01      	subs	r6, #1
 80093fe:	4638      	mov	r0, r7
 8009400:	612e      	str	r6, [r5, #16]
 8009402:	4621      	mov	r1, r4
 8009404:	f7ff fd88 	bl	8008f18 <_Bfree>
 8009408:	4628      	mov	r0, r5
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009412:	3301      	adds	r3, #1
 8009414:	e7c1      	b.n	800939a <__lshift+0x4a>
 8009416:	3904      	subs	r1, #4
 8009418:	f853 2b04 	ldr.w	r2, [r3], #4
 800941c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009420:	4298      	cmp	r0, r3
 8009422:	d8f9      	bhi.n	8009418 <__lshift+0xc8>
 8009424:	e7ea      	b.n	80093fc <__lshift+0xac>
 8009426:	bf00      	nop
 8009428:	0800a950 	.word	0x0800a950
 800942c:	0800aa40 	.word	0x0800aa40

08009430 <__mcmp>:
 8009430:	b530      	push	{r4, r5, lr}
 8009432:	6902      	ldr	r2, [r0, #16]
 8009434:	690c      	ldr	r4, [r1, #16]
 8009436:	1b12      	subs	r2, r2, r4
 8009438:	d10e      	bne.n	8009458 <__mcmp+0x28>
 800943a:	f100 0314 	add.w	r3, r0, #20
 800943e:	3114      	adds	r1, #20
 8009440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800944c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009450:	42a5      	cmp	r5, r4
 8009452:	d003      	beq.n	800945c <__mcmp+0x2c>
 8009454:	d305      	bcc.n	8009462 <__mcmp+0x32>
 8009456:	2201      	movs	r2, #1
 8009458:	4610      	mov	r0, r2
 800945a:	bd30      	pop	{r4, r5, pc}
 800945c:	4283      	cmp	r3, r0
 800945e:	d3f3      	bcc.n	8009448 <__mcmp+0x18>
 8009460:	e7fa      	b.n	8009458 <__mcmp+0x28>
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	e7f7      	b.n	8009458 <__mcmp+0x28>

08009468 <__mdiff>:
 8009468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	460c      	mov	r4, r1
 800946e:	4606      	mov	r6, r0
 8009470:	4611      	mov	r1, r2
 8009472:	4620      	mov	r0, r4
 8009474:	4690      	mov	r8, r2
 8009476:	f7ff ffdb 	bl	8009430 <__mcmp>
 800947a:	1e05      	subs	r5, r0, #0
 800947c:	d110      	bne.n	80094a0 <__mdiff+0x38>
 800947e:	4629      	mov	r1, r5
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff fd09 	bl	8008e98 <_Balloc>
 8009486:	b930      	cbnz	r0, 8009496 <__mdiff+0x2e>
 8009488:	4b3a      	ldr	r3, [pc, #232]	; (8009574 <__mdiff+0x10c>)
 800948a:	4602      	mov	r2, r0
 800948c:	f240 2132 	movw	r1, #562	; 0x232
 8009490:	4839      	ldr	r0, [pc, #228]	; (8009578 <__mdiff+0x110>)
 8009492:	f000 fec1 	bl	800a218 <__assert_func>
 8009496:	2301      	movs	r3, #1
 8009498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800949c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	bfa4      	itt	ge
 80094a2:	4643      	movge	r3, r8
 80094a4:	46a0      	movge	r8, r4
 80094a6:	4630      	mov	r0, r6
 80094a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094ac:	bfa6      	itte	ge
 80094ae:	461c      	movge	r4, r3
 80094b0:	2500      	movge	r5, #0
 80094b2:	2501      	movlt	r5, #1
 80094b4:	f7ff fcf0 	bl	8008e98 <_Balloc>
 80094b8:	b920      	cbnz	r0, 80094c4 <__mdiff+0x5c>
 80094ba:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <__mdiff+0x10c>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094c2:	e7e5      	b.n	8009490 <__mdiff+0x28>
 80094c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094c8:	6926      	ldr	r6, [r4, #16]
 80094ca:	60c5      	str	r5, [r0, #12]
 80094cc:	f104 0914 	add.w	r9, r4, #20
 80094d0:	f108 0514 	add.w	r5, r8, #20
 80094d4:	f100 0e14 	add.w	lr, r0, #20
 80094d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094e0:	f108 0210 	add.w	r2, r8, #16
 80094e4:	46f2      	mov	sl, lr
 80094e6:	2100      	movs	r1, #0
 80094e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80094ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094f0:	fa1f f883 	uxth.w	r8, r3
 80094f4:	fa11 f18b 	uxtah	r1, r1, fp
 80094f8:	0c1b      	lsrs	r3, r3, #16
 80094fa:	eba1 0808 	sub.w	r8, r1, r8
 80094fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009502:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009506:	fa1f f888 	uxth.w	r8, r8
 800950a:	1419      	asrs	r1, r3, #16
 800950c:	454e      	cmp	r6, r9
 800950e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009512:	f84a 3b04 	str.w	r3, [sl], #4
 8009516:	d8e7      	bhi.n	80094e8 <__mdiff+0x80>
 8009518:	1b33      	subs	r3, r6, r4
 800951a:	3b15      	subs	r3, #21
 800951c:	f023 0303 	bic.w	r3, r3, #3
 8009520:	3304      	adds	r3, #4
 8009522:	3415      	adds	r4, #21
 8009524:	42a6      	cmp	r6, r4
 8009526:	bf38      	it	cc
 8009528:	2304      	movcc	r3, #4
 800952a:	441d      	add	r5, r3
 800952c:	4473      	add	r3, lr
 800952e:	469e      	mov	lr, r3
 8009530:	462e      	mov	r6, r5
 8009532:	4566      	cmp	r6, ip
 8009534:	d30e      	bcc.n	8009554 <__mdiff+0xec>
 8009536:	f10c 0203 	add.w	r2, ip, #3
 800953a:	1b52      	subs	r2, r2, r5
 800953c:	f022 0203 	bic.w	r2, r2, #3
 8009540:	3d03      	subs	r5, #3
 8009542:	45ac      	cmp	ip, r5
 8009544:	bf38      	it	cc
 8009546:	2200      	movcc	r2, #0
 8009548:	441a      	add	r2, r3
 800954a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800954e:	b17b      	cbz	r3, 8009570 <__mdiff+0x108>
 8009550:	6107      	str	r7, [r0, #16]
 8009552:	e7a3      	b.n	800949c <__mdiff+0x34>
 8009554:	f856 8b04 	ldr.w	r8, [r6], #4
 8009558:	fa11 f288 	uxtah	r2, r1, r8
 800955c:	1414      	asrs	r4, r2, #16
 800955e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009562:	b292      	uxth	r2, r2
 8009564:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009568:	f84e 2b04 	str.w	r2, [lr], #4
 800956c:	1421      	asrs	r1, r4, #16
 800956e:	e7e0      	b.n	8009532 <__mdiff+0xca>
 8009570:	3f01      	subs	r7, #1
 8009572:	e7ea      	b.n	800954a <__mdiff+0xe2>
 8009574:	0800a950 	.word	0x0800a950
 8009578:	0800aa40 	.word	0x0800aa40

0800957c <__ulp>:
 800957c:	b082      	sub	sp, #8
 800957e:	ed8d 0b00 	vstr	d0, [sp]
 8009582:	9b01      	ldr	r3, [sp, #4]
 8009584:	4912      	ldr	r1, [pc, #72]	; (80095d0 <__ulp+0x54>)
 8009586:	4019      	ands	r1, r3
 8009588:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800958c:	2900      	cmp	r1, #0
 800958e:	dd05      	ble.n	800959c <__ulp+0x20>
 8009590:	2200      	movs	r2, #0
 8009592:	460b      	mov	r3, r1
 8009594:	ec43 2b10 	vmov	d0, r2, r3
 8009598:	b002      	add	sp, #8
 800959a:	4770      	bx	lr
 800959c:	4249      	negs	r1, r1
 800959e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80095a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	f04f 0300 	mov.w	r3, #0
 80095ae:	da04      	bge.n	80095ba <__ulp+0x3e>
 80095b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80095b4:	fa41 f300 	asr.w	r3, r1, r0
 80095b8:	e7ec      	b.n	8009594 <__ulp+0x18>
 80095ba:	f1a0 0114 	sub.w	r1, r0, #20
 80095be:	291e      	cmp	r1, #30
 80095c0:	bfda      	itte	le
 80095c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80095c6:	fa20 f101 	lsrle.w	r1, r0, r1
 80095ca:	2101      	movgt	r1, #1
 80095cc:	460a      	mov	r2, r1
 80095ce:	e7e1      	b.n	8009594 <__ulp+0x18>
 80095d0:	7ff00000 	.word	0x7ff00000

080095d4 <__b2d>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	6905      	ldr	r5, [r0, #16]
 80095d8:	f100 0714 	add.w	r7, r0, #20
 80095dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80095e0:	1f2e      	subs	r6, r5, #4
 80095e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80095e6:	4620      	mov	r0, r4
 80095e8:	f7ff fd48 	bl	800907c <__hi0bits>
 80095ec:	f1c0 0320 	rsb	r3, r0, #32
 80095f0:	280a      	cmp	r0, #10
 80095f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009670 <__b2d+0x9c>
 80095f6:	600b      	str	r3, [r1, #0]
 80095f8:	dc14      	bgt.n	8009624 <__b2d+0x50>
 80095fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80095fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8009602:	42b7      	cmp	r7, r6
 8009604:	ea41 030c 	orr.w	r3, r1, ip
 8009608:	bf34      	ite	cc
 800960a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800960e:	2100      	movcs	r1, #0
 8009610:	3015      	adds	r0, #21
 8009612:	fa04 f000 	lsl.w	r0, r4, r0
 8009616:	fa21 f10e 	lsr.w	r1, r1, lr
 800961a:	ea40 0201 	orr.w	r2, r0, r1
 800961e:	ec43 2b10 	vmov	d0, r2, r3
 8009622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009624:	42b7      	cmp	r7, r6
 8009626:	bf3a      	itte	cc
 8009628:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800962c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009630:	2100      	movcs	r1, #0
 8009632:	380b      	subs	r0, #11
 8009634:	d017      	beq.n	8009666 <__b2d+0x92>
 8009636:	f1c0 0c20 	rsb	ip, r0, #32
 800963a:	fa04 f500 	lsl.w	r5, r4, r0
 800963e:	42be      	cmp	r6, r7
 8009640:	fa21 f40c 	lsr.w	r4, r1, ip
 8009644:	ea45 0504 	orr.w	r5, r5, r4
 8009648:	bf8c      	ite	hi
 800964a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800964e:	2400      	movls	r4, #0
 8009650:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009654:	fa01 f000 	lsl.w	r0, r1, r0
 8009658:	fa24 f40c 	lsr.w	r4, r4, ip
 800965c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009660:	ea40 0204 	orr.w	r2, r0, r4
 8009664:	e7db      	b.n	800961e <__b2d+0x4a>
 8009666:	ea44 030c 	orr.w	r3, r4, ip
 800966a:	460a      	mov	r2, r1
 800966c:	e7d7      	b.n	800961e <__b2d+0x4a>
 800966e:	bf00      	nop
 8009670:	3ff00000 	.word	0x3ff00000

08009674 <__d2b>:
 8009674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009678:	4689      	mov	r9, r1
 800967a:	2101      	movs	r1, #1
 800967c:	ec57 6b10 	vmov	r6, r7, d0
 8009680:	4690      	mov	r8, r2
 8009682:	f7ff fc09 	bl	8008e98 <_Balloc>
 8009686:	4604      	mov	r4, r0
 8009688:	b930      	cbnz	r0, 8009698 <__d2b+0x24>
 800968a:	4602      	mov	r2, r0
 800968c:	4b25      	ldr	r3, [pc, #148]	; (8009724 <__d2b+0xb0>)
 800968e:	4826      	ldr	r0, [pc, #152]	; (8009728 <__d2b+0xb4>)
 8009690:	f240 310a 	movw	r1, #778	; 0x30a
 8009694:	f000 fdc0 	bl	800a218 <__assert_func>
 8009698:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800969c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096a0:	bb35      	cbnz	r5, 80096f0 <__d2b+0x7c>
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	d028      	beq.n	80096fa <__d2b+0x86>
 80096a8:	4668      	mov	r0, sp
 80096aa:	9600      	str	r6, [sp, #0]
 80096ac:	f7ff fd06 	bl	80090bc <__lo0bits>
 80096b0:	9900      	ldr	r1, [sp, #0]
 80096b2:	b300      	cbz	r0, 80096f6 <__d2b+0x82>
 80096b4:	9a01      	ldr	r2, [sp, #4]
 80096b6:	f1c0 0320 	rsb	r3, r0, #32
 80096ba:	fa02 f303 	lsl.w	r3, r2, r3
 80096be:	430b      	orrs	r3, r1
 80096c0:	40c2      	lsrs	r2, r0
 80096c2:	6163      	str	r3, [r4, #20]
 80096c4:	9201      	str	r2, [sp, #4]
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	61a3      	str	r3, [r4, #24]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bf14      	ite	ne
 80096ce:	2202      	movne	r2, #2
 80096d0:	2201      	moveq	r2, #1
 80096d2:	6122      	str	r2, [r4, #16]
 80096d4:	b1d5      	cbz	r5, 800970c <__d2b+0x98>
 80096d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096da:	4405      	add	r5, r0
 80096dc:	f8c9 5000 	str.w	r5, [r9]
 80096e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096e4:	f8c8 0000 	str.w	r0, [r8]
 80096e8:	4620      	mov	r0, r4
 80096ea:	b003      	add	sp, #12
 80096ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f4:	e7d5      	b.n	80096a2 <__d2b+0x2e>
 80096f6:	6161      	str	r1, [r4, #20]
 80096f8:	e7e5      	b.n	80096c6 <__d2b+0x52>
 80096fa:	a801      	add	r0, sp, #4
 80096fc:	f7ff fcde 	bl	80090bc <__lo0bits>
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	6163      	str	r3, [r4, #20]
 8009704:	2201      	movs	r2, #1
 8009706:	6122      	str	r2, [r4, #16]
 8009708:	3020      	adds	r0, #32
 800970a:	e7e3      	b.n	80096d4 <__d2b+0x60>
 800970c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009710:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009714:	f8c9 0000 	str.w	r0, [r9]
 8009718:	6918      	ldr	r0, [r3, #16]
 800971a:	f7ff fcaf 	bl	800907c <__hi0bits>
 800971e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009722:	e7df      	b.n	80096e4 <__d2b+0x70>
 8009724:	0800a950 	.word	0x0800a950
 8009728:	0800aa40 	.word	0x0800aa40

0800972c <__ratio>:
 800972c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	4688      	mov	r8, r1
 8009732:	4669      	mov	r1, sp
 8009734:	4681      	mov	r9, r0
 8009736:	f7ff ff4d 	bl	80095d4 <__b2d>
 800973a:	a901      	add	r1, sp, #4
 800973c:	4640      	mov	r0, r8
 800973e:	ec55 4b10 	vmov	r4, r5, d0
 8009742:	f7ff ff47 	bl	80095d4 <__b2d>
 8009746:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800974a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800974e:	eba3 0c02 	sub.w	ip, r3, r2
 8009752:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009756:	1a9b      	subs	r3, r3, r2
 8009758:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800975c:	ec51 0b10 	vmov	r0, r1, d0
 8009760:	2b00      	cmp	r3, #0
 8009762:	bfd6      	itet	le
 8009764:	460a      	movle	r2, r1
 8009766:	462a      	movgt	r2, r5
 8009768:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800976c:	468b      	mov	fp, r1
 800976e:	462f      	mov	r7, r5
 8009770:	bfd4      	ite	le
 8009772:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009776:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800977a:	4620      	mov	r0, r4
 800977c:	ee10 2a10 	vmov	r2, s0
 8009780:	465b      	mov	r3, fp
 8009782:	4639      	mov	r1, r7
 8009784:	f7f7 f86a 	bl	800085c <__aeabi_ddiv>
 8009788:	ec41 0b10 	vmov	d0, r0, r1
 800978c:	b003      	add	sp, #12
 800978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009792 <__copybits>:
 8009792:	3901      	subs	r1, #1
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	1149      	asrs	r1, r1, #5
 8009798:	6914      	ldr	r4, [r2, #16]
 800979a:	3101      	adds	r1, #1
 800979c:	f102 0314 	add.w	r3, r2, #20
 80097a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097a8:	1f05      	subs	r5, r0, #4
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	d30c      	bcc.n	80097c8 <__copybits+0x36>
 80097ae:	1aa3      	subs	r3, r4, r2
 80097b0:	3b11      	subs	r3, #17
 80097b2:	f023 0303 	bic.w	r3, r3, #3
 80097b6:	3211      	adds	r2, #17
 80097b8:	42a2      	cmp	r2, r4
 80097ba:	bf88      	it	hi
 80097bc:	2300      	movhi	r3, #0
 80097be:	4418      	add	r0, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	4288      	cmp	r0, r1
 80097c4:	d305      	bcc.n	80097d2 <__copybits+0x40>
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80097cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80097d0:	e7eb      	b.n	80097aa <__copybits+0x18>
 80097d2:	f840 3b04 	str.w	r3, [r0], #4
 80097d6:	e7f4      	b.n	80097c2 <__copybits+0x30>

080097d8 <__any_on>:
 80097d8:	f100 0214 	add.w	r2, r0, #20
 80097dc:	6900      	ldr	r0, [r0, #16]
 80097de:	114b      	asrs	r3, r1, #5
 80097e0:	4298      	cmp	r0, r3
 80097e2:	b510      	push	{r4, lr}
 80097e4:	db11      	blt.n	800980a <__any_on+0x32>
 80097e6:	dd0a      	ble.n	80097fe <__any_on+0x26>
 80097e8:	f011 011f 	ands.w	r1, r1, #31
 80097ec:	d007      	beq.n	80097fe <__any_on+0x26>
 80097ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097f2:	fa24 f001 	lsr.w	r0, r4, r1
 80097f6:	fa00 f101 	lsl.w	r1, r0, r1
 80097fa:	428c      	cmp	r4, r1
 80097fc:	d10b      	bne.n	8009816 <__any_on+0x3e>
 80097fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009802:	4293      	cmp	r3, r2
 8009804:	d803      	bhi.n	800980e <__any_on+0x36>
 8009806:	2000      	movs	r0, #0
 8009808:	bd10      	pop	{r4, pc}
 800980a:	4603      	mov	r3, r0
 800980c:	e7f7      	b.n	80097fe <__any_on+0x26>
 800980e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009812:	2900      	cmp	r1, #0
 8009814:	d0f5      	beq.n	8009802 <__any_on+0x2a>
 8009816:	2001      	movs	r0, #1
 8009818:	e7f6      	b.n	8009808 <__any_on+0x30>

0800981a <_calloc_r>:
 800981a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800981c:	fba1 2402 	umull	r2, r4, r1, r2
 8009820:	b94c      	cbnz	r4, 8009836 <_calloc_r+0x1c>
 8009822:	4611      	mov	r1, r2
 8009824:	9201      	str	r2, [sp, #4]
 8009826:	f000 f87b 	bl	8009920 <_malloc_r>
 800982a:	9a01      	ldr	r2, [sp, #4]
 800982c:	4605      	mov	r5, r0
 800982e:	b930      	cbnz	r0, 800983e <_calloc_r+0x24>
 8009830:	4628      	mov	r0, r5
 8009832:	b003      	add	sp, #12
 8009834:	bd30      	pop	{r4, r5, pc}
 8009836:	220c      	movs	r2, #12
 8009838:	6002      	str	r2, [r0, #0]
 800983a:	2500      	movs	r5, #0
 800983c:	e7f8      	b.n	8009830 <_calloc_r+0x16>
 800983e:	4621      	mov	r1, r4
 8009840:	f7fc fabc 	bl	8005dbc <memset>
 8009844:	e7f4      	b.n	8009830 <_calloc_r+0x16>
	...

08009848 <_free_r>:
 8009848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800984a:	2900      	cmp	r1, #0
 800984c:	d044      	beq.n	80098d8 <_free_r+0x90>
 800984e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009852:	9001      	str	r0, [sp, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f1a1 0404 	sub.w	r4, r1, #4
 800985a:	bfb8      	it	lt
 800985c:	18e4      	addlt	r4, r4, r3
 800985e:	f000 fe6f 	bl	800a540 <__malloc_lock>
 8009862:	4a1e      	ldr	r2, [pc, #120]	; (80098dc <_free_r+0x94>)
 8009864:	9801      	ldr	r0, [sp, #4]
 8009866:	6813      	ldr	r3, [r2, #0]
 8009868:	b933      	cbnz	r3, 8009878 <_free_r+0x30>
 800986a:	6063      	str	r3, [r4, #4]
 800986c:	6014      	str	r4, [r2, #0]
 800986e:	b003      	add	sp, #12
 8009870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009874:	f000 be6a 	b.w	800a54c <__malloc_unlock>
 8009878:	42a3      	cmp	r3, r4
 800987a:	d908      	bls.n	800988e <_free_r+0x46>
 800987c:	6825      	ldr	r5, [r4, #0]
 800987e:	1961      	adds	r1, r4, r5
 8009880:	428b      	cmp	r3, r1
 8009882:	bf01      	itttt	eq
 8009884:	6819      	ldreq	r1, [r3, #0]
 8009886:	685b      	ldreq	r3, [r3, #4]
 8009888:	1949      	addeq	r1, r1, r5
 800988a:	6021      	streq	r1, [r4, #0]
 800988c:	e7ed      	b.n	800986a <_free_r+0x22>
 800988e:	461a      	mov	r2, r3
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	b10b      	cbz	r3, 8009898 <_free_r+0x50>
 8009894:	42a3      	cmp	r3, r4
 8009896:	d9fa      	bls.n	800988e <_free_r+0x46>
 8009898:	6811      	ldr	r1, [r2, #0]
 800989a:	1855      	adds	r5, r2, r1
 800989c:	42a5      	cmp	r5, r4
 800989e:	d10b      	bne.n	80098b8 <_free_r+0x70>
 80098a0:	6824      	ldr	r4, [r4, #0]
 80098a2:	4421      	add	r1, r4
 80098a4:	1854      	adds	r4, r2, r1
 80098a6:	42a3      	cmp	r3, r4
 80098a8:	6011      	str	r1, [r2, #0]
 80098aa:	d1e0      	bne.n	800986e <_free_r+0x26>
 80098ac:	681c      	ldr	r4, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	6053      	str	r3, [r2, #4]
 80098b2:	4421      	add	r1, r4
 80098b4:	6011      	str	r1, [r2, #0]
 80098b6:	e7da      	b.n	800986e <_free_r+0x26>
 80098b8:	d902      	bls.n	80098c0 <_free_r+0x78>
 80098ba:	230c      	movs	r3, #12
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	e7d6      	b.n	800986e <_free_r+0x26>
 80098c0:	6825      	ldr	r5, [r4, #0]
 80098c2:	1961      	adds	r1, r4, r5
 80098c4:	428b      	cmp	r3, r1
 80098c6:	bf04      	itt	eq
 80098c8:	6819      	ldreq	r1, [r3, #0]
 80098ca:	685b      	ldreq	r3, [r3, #4]
 80098cc:	6063      	str	r3, [r4, #4]
 80098ce:	bf04      	itt	eq
 80098d0:	1949      	addeq	r1, r1, r5
 80098d2:	6021      	streq	r1, [r4, #0]
 80098d4:	6054      	str	r4, [r2, #4]
 80098d6:	e7ca      	b.n	800986e <_free_r+0x26>
 80098d8:	b003      	add	sp, #12
 80098da:	bd30      	pop	{r4, r5, pc}
 80098dc:	20004250 	.word	0x20004250

080098e0 <sbrk_aligned>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	4e0e      	ldr	r6, [pc, #56]	; (800991c <sbrk_aligned+0x3c>)
 80098e4:	460c      	mov	r4, r1
 80098e6:	6831      	ldr	r1, [r6, #0]
 80098e8:	4605      	mov	r5, r0
 80098ea:	b911      	cbnz	r1, 80098f2 <sbrk_aligned+0x12>
 80098ec:	f000 fb4c 	bl	8009f88 <_sbrk_r>
 80098f0:	6030      	str	r0, [r6, #0]
 80098f2:	4621      	mov	r1, r4
 80098f4:	4628      	mov	r0, r5
 80098f6:	f000 fb47 	bl	8009f88 <_sbrk_r>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	d00a      	beq.n	8009914 <sbrk_aligned+0x34>
 80098fe:	1cc4      	adds	r4, r0, #3
 8009900:	f024 0403 	bic.w	r4, r4, #3
 8009904:	42a0      	cmp	r0, r4
 8009906:	d007      	beq.n	8009918 <sbrk_aligned+0x38>
 8009908:	1a21      	subs	r1, r4, r0
 800990a:	4628      	mov	r0, r5
 800990c:	f000 fb3c 	bl	8009f88 <_sbrk_r>
 8009910:	3001      	adds	r0, #1
 8009912:	d101      	bne.n	8009918 <sbrk_aligned+0x38>
 8009914:	f04f 34ff 	mov.w	r4, #4294967295
 8009918:	4620      	mov	r0, r4
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	20004254 	.word	0x20004254

08009920 <_malloc_r>:
 8009920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009924:	1ccd      	adds	r5, r1, #3
 8009926:	f025 0503 	bic.w	r5, r5, #3
 800992a:	3508      	adds	r5, #8
 800992c:	2d0c      	cmp	r5, #12
 800992e:	bf38      	it	cc
 8009930:	250c      	movcc	r5, #12
 8009932:	2d00      	cmp	r5, #0
 8009934:	4607      	mov	r7, r0
 8009936:	db01      	blt.n	800993c <_malloc_r+0x1c>
 8009938:	42a9      	cmp	r1, r5
 800993a:	d905      	bls.n	8009948 <_malloc_r+0x28>
 800993c:	230c      	movs	r3, #12
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	2600      	movs	r6, #0
 8009942:	4630      	mov	r0, r6
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	4e2e      	ldr	r6, [pc, #184]	; (8009a04 <_malloc_r+0xe4>)
 800994a:	f000 fdf9 	bl	800a540 <__malloc_lock>
 800994e:	6833      	ldr	r3, [r6, #0]
 8009950:	461c      	mov	r4, r3
 8009952:	bb34      	cbnz	r4, 80099a2 <_malloc_r+0x82>
 8009954:	4629      	mov	r1, r5
 8009956:	4638      	mov	r0, r7
 8009958:	f7ff ffc2 	bl	80098e0 <sbrk_aligned>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	4604      	mov	r4, r0
 8009960:	d14d      	bne.n	80099fe <_malloc_r+0xde>
 8009962:	6834      	ldr	r4, [r6, #0]
 8009964:	4626      	mov	r6, r4
 8009966:	2e00      	cmp	r6, #0
 8009968:	d140      	bne.n	80099ec <_malloc_r+0xcc>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	4631      	mov	r1, r6
 800996e:	4638      	mov	r0, r7
 8009970:	eb04 0803 	add.w	r8, r4, r3
 8009974:	f000 fb08 	bl	8009f88 <_sbrk_r>
 8009978:	4580      	cmp	r8, r0
 800997a:	d13a      	bne.n	80099f2 <_malloc_r+0xd2>
 800997c:	6821      	ldr	r1, [r4, #0]
 800997e:	3503      	adds	r5, #3
 8009980:	1a6d      	subs	r5, r5, r1
 8009982:	f025 0503 	bic.w	r5, r5, #3
 8009986:	3508      	adds	r5, #8
 8009988:	2d0c      	cmp	r5, #12
 800998a:	bf38      	it	cc
 800998c:	250c      	movcc	r5, #12
 800998e:	4629      	mov	r1, r5
 8009990:	4638      	mov	r0, r7
 8009992:	f7ff ffa5 	bl	80098e0 <sbrk_aligned>
 8009996:	3001      	adds	r0, #1
 8009998:	d02b      	beq.n	80099f2 <_malloc_r+0xd2>
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	442b      	add	r3, r5
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	e00e      	b.n	80099c0 <_malloc_r+0xa0>
 80099a2:	6822      	ldr	r2, [r4, #0]
 80099a4:	1b52      	subs	r2, r2, r5
 80099a6:	d41e      	bmi.n	80099e6 <_malloc_r+0xc6>
 80099a8:	2a0b      	cmp	r2, #11
 80099aa:	d916      	bls.n	80099da <_malloc_r+0xba>
 80099ac:	1961      	adds	r1, r4, r5
 80099ae:	42a3      	cmp	r3, r4
 80099b0:	6025      	str	r5, [r4, #0]
 80099b2:	bf18      	it	ne
 80099b4:	6059      	strne	r1, [r3, #4]
 80099b6:	6863      	ldr	r3, [r4, #4]
 80099b8:	bf08      	it	eq
 80099ba:	6031      	streq	r1, [r6, #0]
 80099bc:	5162      	str	r2, [r4, r5]
 80099be:	604b      	str	r3, [r1, #4]
 80099c0:	4638      	mov	r0, r7
 80099c2:	f104 060b 	add.w	r6, r4, #11
 80099c6:	f000 fdc1 	bl	800a54c <__malloc_unlock>
 80099ca:	f026 0607 	bic.w	r6, r6, #7
 80099ce:	1d23      	adds	r3, r4, #4
 80099d0:	1af2      	subs	r2, r6, r3
 80099d2:	d0b6      	beq.n	8009942 <_malloc_r+0x22>
 80099d4:	1b9b      	subs	r3, r3, r6
 80099d6:	50a3      	str	r3, [r4, r2]
 80099d8:	e7b3      	b.n	8009942 <_malloc_r+0x22>
 80099da:	6862      	ldr	r2, [r4, #4]
 80099dc:	42a3      	cmp	r3, r4
 80099de:	bf0c      	ite	eq
 80099e0:	6032      	streq	r2, [r6, #0]
 80099e2:	605a      	strne	r2, [r3, #4]
 80099e4:	e7ec      	b.n	80099c0 <_malloc_r+0xa0>
 80099e6:	4623      	mov	r3, r4
 80099e8:	6864      	ldr	r4, [r4, #4]
 80099ea:	e7b2      	b.n	8009952 <_malloc_r+0x32>
 80099ec:	4634      	mov	r4, r6
 80099ee:	6876      	ldr	r6, [r6, #4]
 80099f0:	e7b9      	b.n	8009966 <_malloc_r+0x46>
 80099f2:	230c      	movs	r3, #12
 80099f4:	603b      	str	r3, [r7, #0]
 80099f6:	4638      	mov	r0, r7
 80099f8:	f000 fda8 	bl	800a54c <__malloc_unlock>
 80099fc:	e7a1      	b.n	8009942 <_malloc_r+0x22>
 80099fe:	6025      	str	r5, [r4, #0]
 8009a00:	e7de      	b.n	80099c0 <_malloc_r+0xa0>
 8009a02:	bf00      	nop
 8009a04:	20004250 	.word	0x20004250

08009a08 <__ssputs_r>:
 8009a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	688e      	ldr	r6, [r1, #8]
 8009a0e:	429e      	cmp	r6, r3
 8009a10:	4682      	mov	sl, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	4690      	mov	r8, r2
 8009a16:	461f      	mov	r7, r3
 8009a18:	d838      	bhi.n	8009a8c <__ssputs_r+0x84>
 8009a1a:	898a      	ldrh	r2, [r1, #12]
 8009a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a20:	d032      	beq.n	8009a88 <__ssputs_r+0x80>
 8009a22:	6825      	ldr	r5, [r4, #0]
 8009a24:	6909      	ldr	r1, [r1, #16]
 8009a26:	eba5 0901 	sub.w	r9, r5, r1
 8009a2a:	6965      	ldr	r5, [r4, #20]
 8009a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a34:	3301      	adds	r3, #1
 8009a36:	444b      	add	r3, r9
 8009a38:	106d      	asrs	r5, r5, #1
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	bf38      	it	cc
 8009a3e:	461d      	movcc	r5, r3
 8009a40:	0553      	lsls	r3, r2, #21
 8009a42:	d531      	bpl.n	8009aa8 <__ssputs_r+0xa0>
 8009a44:	4629      	mov	r1, r5
 8009a46:	f7ff ff6b 	bl	8009920 <_malloc_r>
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	b950      	cbnz	r0, 8009a64 <__ssputs_r+0x5c>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	f8ca 3000 	str.w	r3, [sl]
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a64:	6921      	ldr	r1, [r4, #16]
 8009a66:	464a      	mov	r2, r9
 8009a68:	f7fc f99a 	bl	8005da0 <memcpy>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	6126      	str	r6, [r4, #16]
 8009a7a:	6165      	str	r5, [r4, #20]
 8009a7c:	444e      	add	r6, r9
 8009a7e:	eba5 0509 	sub.w	r5, r5, r9
 8009a82:	6026      	str	r6, [r4, #0]
 8009a84:	60a5      	str	r5, [r4, #8]
 8009a86:	463e      	mov	r6, r7
 8009a88:	42be      	cmp	r6, r7
 8009a8a:	d900      	bls.n	8009a8e <__ssputs_r+0x86>
 8009a8c:	463e      	mov	r6, r7
 8009a8e:	6820      	ldr	r0, [r4, #0]
 8009a90:	4632      	mov	r2, r6
 8009a92:	4641      	mov	r1, r8
 8009a94:	f000 fd3a 	bl	800a50c <memmove>
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	1b9b      	subs	r3, r3, r6
 8009a9c:	60a3      	str	r3, [r4, #8]
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	4433      	add	r3, r6
 8009aa2:	6023      	str	r3, [r4, #0]
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e7db      	b.n	8009a60 <__ssputs_r+0x58>
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	f000 fd55 	bl	800a558 <_realloc_r>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d1e1      	bne.n	8009a78 <__ssputs_r+0x70>
 8009ab4:	6921      	ldr	r1, [r4, #16]
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	f7ff fec6 	bl	8009848 <_free_r>
 8009abc:	e7c7      	b.n	8009a4e <__ssputs_r+0x46>
	...

08009ac0 <_svfiprintf_r>:
 8009ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	4698      	mov	r8, r3
 8009ac6:	898b      	ldrh	r3, [r1, #12]
 8009ac8:	061b      	lsls	r3, r3, #24
 8009aca:	b09d      	sub	sp, #116	; 0x74
 8009acc:	4607      	mov	r7, r0
 8009ace:	460d      	mov	r5, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	d50e      	bpl.n	8009af2 <_svfiprintf_r+0x32>
 8009ad4:	690b      	ldr	r3, [r1, #16]
 8009ad6:	b963      	cbnz	r3, 8009af2 <_svfiprintf_r+0x32>
 8009ad8:	2140      	movs	r1, #64	; 0x40
 8009ada:	f7ff ff21 	bl	8009920 <_malloc_r>
 8009ade:	6028      	str	r0, [r5, #0]
 8009ae0:	6128      	str	r0, [r5, #16]
 8009ae2:	b920      	cbnz	r0, 8009aee <_svfiprintf_r+0x2e>
 8009ae4:	230c      	movs	r3, #12
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	e0d1      	b.n	8009c92 <_svfiprintf_r+0x1d2>
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	616b      	str	r3, [r5, #20]
 8009af2:	2300      	movs	r3, #0
 8009af4:	9309      	str	r3, [sp, #36]	; 0x24
 8009af6:	2320      	movs	r3, #32
 8009af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b00:	2330      	movs	r3, #48	; 0x30
 8009b02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cac <_svfiprintf_r+0x1ec>
 8009b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b0a:	f04f 0901 	mov.w	r9, #1
 8009b0e:	4623      	mov	r3, r4
 8009b10:	469a      	mov	sl, r3
 8009b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b16:	b10a      	cbz	r2, 8009b1c <_svfiprintf_r+0x5c>
 8009b18:	2a25      	cmp	r2, #37	; 0x25
 8009b1a:	d1f9      	bne.n	8009b10 <_svfiprintf_r+0x50>
 8009b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b20:	d00b      	beq.n	8009b3a <_svfiprintf_r+0x7a>
 8009b22:	465b      	mov	r3, fp
 8009b24:	4622      	mov	r2, r4
 8009b26:	4629      	mov	r1, r5
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7ff ff6d 	bl	8009a08 <__ssputs_r>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f000 80aa 	beq.w	8009c88 <_svfiprintf_r+0x1c8>
 8009b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b36:	445a      	add	r2, fp
 8009b38:	9209      	str	r2, [sp, #36]	; 0x24
 8009b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 80a2 	beq.w	8009c88 <_svfiprintf_r+0x1c8>
 8009b44:	2300      	movs	r3, #0
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b4e:	f10a 0a01 	add.w	sl, sl, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b5c:	4654      	mov	r4, sl
 8009b5e:	2205      	movs	r2, #5
 8009b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b64:	4851      	ldr	r0, [pc, #324]	; (8009cac <_svfiprintf_r+0x1ec>)
 8009b66:	f7f6 fb43 	bl	80001f0 <memchr>
 8009b6a:	9a04      	ldr	r2, [sp, #16]
 8009b6c:	b9d8      	cbnz	r0, 8009ba6 <_svfiprintf_r+0xe6>
 8009b6e:	06d0      	lsls	r0, r2, #27
 8009b70:	bf44      	itt	mi
 8009b72:	2320      	movmi	r3, #32
 8009b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b78:	0711      	lsls	r1, r2, #28
 8009b7a:	bf44      	itt	mi
 8009b7c:	232b      	movmi	r3, #43	; 0x2b
 8009b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b82:	f89a 3000 	ldrb.w	r3, [sl]
 8009b86:	2b2a      	cmp	r3, #42	; 0x2a
 8009b88:	d015      	beq.n	8009bb6 <_svfiprintf_r+0xf6>
 8009b8a:	9a07      	ldr	r2, [sp, #28]
 8009b8c:	4654      	mov	r4, sl
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f04f 0c0a 	mov.w	ip, #10
 8009b94:	4621      	mov	r1, r4
 8009b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b9a:	3b30      	subs	r3, #48	; 0x30
 8009b9c:	2b09      	cmp	r3, #9
 8009b9e:	d94e      	bls.n	8009c3e <_svfiprintf_r+0x17e>
 8009ba0:	b1b0      	cbz	r0, 8009bd0 <_svfiprintf_r+0x110>
 8009ba2:	9207      	str	r2, [sp, #28]
 8009ba4:	e014      	b.n	8009bd0 <_svfiprintf_r+0x110>
 8009ba6:	eba0 0308 	sub.w	r3, r0, r8
 8009baa:	fa09 f303 	lsl.w	r3, r9, r3
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	9304      	str	r3, [sp, #16]
 8009bb2:	46a2      	mov	sl, r4
 8009bb4:	e7d2      	b.n	8009b5c <_svfiprintf_r+0x9c>
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	1d19      	adds	r1, r3, #4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	9103      	str	r1, [sp, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bfbb      	ittet	lt
 8009bc2:	425b      	neglt	r3, r3
 8009bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8009bc8:	9307      	strge	r3, [sp, #28]
 8009bca:	9307      	strlt	r3, [sp, #28]
 8009bcc:	bfb8      	it	lt
 8009bce:	9204      	strlt	r2, [sp, #16]
 8009bd0:	7823      	ldrb	r3, [r4, #0]
 8009bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8009bd4:	d10c      	bne.n	8009bf0 <_svfiprintf_r+0x130>
 8009bd6:	7863      	ldrb	r3, [r4, #1]
 8009bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bda:	d135      	bne.n	8009c48 <_svfiprintf_r+0x188>
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	1d1a      	adds	r2, r3, #4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	9203      	str	r2, [sp, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bfb8      	it	lt
 8009be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bec:	3402      	adds	r4, #2
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009cbc <_svfiprintf_r+0x1fc>
 8009bf4:	7821      	ldrb	r1, [r4, #0]
 8009bf6:	2203      	movs	r2, #3
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	f7f6 faf9 	bl	80001f0 <memchr>
 8009bfe:	b140      	cbz	r0, 8009c12 <_svfiprintf_r+0x152>
 8009c00:	2340      	movs	r3, #64	; 0x40
 8009c02:	eba0 000a 	sub.w	r0, r0, sl
 8009c06:	fa03 f000 	lsl.w	r0, r3, r0
 8009c0a:	9b04      	ldr	r3, [sp, #16]
 8009c0c:	4303      	orrs	r3, r0
 8009c0e:	3401      	adds	r4, #1
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c16:	4826      	ldr	r0, [pc, #152]	; (8009cb0 <_svfiprintf_r+0x1f0>)
 8009c18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c1c:	2206      	movs	r2, #6
 8009c1e:	f7f6 fae7 	bl	80001f0 <memchr>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d038      	beq.n	8009c98 <_svfiprintf_r+0x1d8>
 8009c26:	4b23      	ldr	r3, [pc, #140]	; (8009cb4 <_svfiprintf_r+0x1f4>)
 8009c28:	bb1b      	cbnz	r3, 8009c72 <_svfiprintf_r+0x1b2>
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	3307      	adds	r3, #7
 8009c2e:	f023 0307 	bic.w	r3, r3, #7
 8009c32:	3308      	adds	r3, #8
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c38:	4433      	add	r3, r6
 8009c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3c:	e767      	b.n	8009b0e <_svfiprintf_r+0x4e>
 8009c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c42:	460c      	mov	r4, r1
 8009c44:	2001      	movs	r0, #1
 8009c46:	e7a5      	b.n	8009b94 <_svfiprintf_r+0xd4>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	3401      	adds	r4, #1
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f04f 0c0a 	mov.w	ip, #10
 8009c54:	4620      	mov	r0, r4
 8009c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c5a:	3a30      	subs	r2, #48	; 0x30
 8009c5c:	2a09      	cmp	r2, #9
 8009c5e:	d903      	bls.n	8009c68 <_svfiprintf_r+0x1a8>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0c5      	beq.n	8009bf0 <_svfiprintf_r+0x130>
 8009c64:	9105      	str	r1, [sp, #20]
 8009c66:	e7c3      	b.n	8009bf0 <_svfiprintf_r+0x130>
 8009c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e7f0      	b.n	8009c54 <_svfiprintf_r+0x194>
 8009c72:	ab03      	add	r3, sp, #12
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	462a      	mov	r2, r5
 8009c78:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <_svfiprintf_r+0x1f8>)
 8009c7a:	a904      	add	r1, sp, #16
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f7fc f945 	bl	8005f0c <_printf_float>
 8009c82:	1c42      	adds	r2, r0, #1
 8009c84:	4606      	mov	r6, r0
 8009c86:	d1d6      	bne.n	8009c36 <_svfiprintf_r+0x176>
 8009c88:	89ab      	ldrh	r3, [r5, #12]
 8009c8a:	065b      	lsls	r3, r3, #25
 8009c8c:	f53f af2c 	bmi.w	8009ae8 <_svfiprintf_r+0x28>
 8009c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c92:	b01d      	add	sp, #116	; 0x74
 8009c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c98:	ab03      	add	r3, sp, #12
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	462a      	mov	r2, r5
 8009c9e:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <_svfiprintf_r+0x1f8>)
 8009ca0:	a904      	add	r1, sp, #16
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	f7fc fbd6 	bl	8006454 <_printf_i>
 8009ca8:	e7eb      	b.n	8009c82 <_svfiprintf_r+0x1c2>
 8009caa:	bf00      	nop
 8009cac:	0800ab9c 	.word	0x0800ab9c
 8009cb0:	0800aba6 	.word	0x0800aba6
 8009cb4:	08005f0d 	.word	0x08005f0d
 8009cb8:	08009a09 	.word	0x08009a09
 8009cbc:	0800aba2 	.word	0x0800aba2

08009cc0 <__sfputc_r>:
 8009cc0:	6893      	ldr	r3, [r2, #8]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	b410      	push	{r4}
 8009cc8:	6093      	str	r3, [r2, #8]
 8009cca:	da08      	bge.n	8009cde <__sfputc_r+0x1e>
 8009ccc:	6994      	ldr	r4, [r2, #24]
 8009cce:	42a3      	cmp	r3, r4
 8009cd0:	db01      	blt.n	8009cd6 <__sfputc_r+0x16>
 8009cd2:	290a      	cmp	r1, #10
 8009cd4:	d103      	bne.n	8009cde <__sfputc_r+0x1e>
 8009cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cda:	f000 b9bd 	b.w	800a058 <__swbuf_r>
 8009cde:	6813      	ldr	r3, [r2, #0]
 8009ce0:	1c58      	adds	r0, r3, #1
 8009ce2:	6010      	str	r0, [r2, #0]
 8009ce4:	7019      	strb	r1, [r3, #0]
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <__sfputs_r>:
 8009cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	460f      	mov	r7, r1
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	18d5      	adds	r5, r2, r3
 8009cf8:	42ac      	cmp	r4, r5
 8009cfa:	d101      	bne.n	8009d00 <__sfputs_r+0x12>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e007      	b.n	8009d10 <__sfputs_r+0x22>
 8009d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d04:	463a      	mov	r2, r7
 8009d06:	4630      	mov	r0, r6
 8009d08:	f7ff ffda 	bl	8009cc0 <__sfputc_r>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d1f3      	bne.n	8009cf8 <__sfputs_r+0xa>
 8009d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d14 <_vfiprintf_r>:
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	460d      	mov	r5, r1
 8009d1a:	b09d      	sub	sp, #116	; 0x74
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	4698      	mov	r8, r3
 8009d20:	4606      	mov	r6, r0
 8009d22:	b118      	cbz	r0, 8009d2c <_vfiprintf_r+0x18>
 8009d24:	6983      	ldr	r3, [r0, #24]
 8009d26:	b90b      	cbnz	r3, 8009d2c <_vfiprintf_r+0x18>
 8009d28:	f7fe fc88 	bl	800863c <__sinit>
 8009d2c:	4b89      	ldr	r3, [pc, #548]	; (8009f54 <_vfiprintf_r+0x240>)
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	d11b      	bne.n	8009d6a <_vfiprintf_r+0x56>
 8009d32:	6875      	ldr	r5, [r6, #4]
 8009d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d36:	07d9      	lsls	r1, r3, #31
 8009d38:	d405      	bmi.n	8009d46 <_vfiprintf_r+0x32>
 8009d3a:	89ab      	ldrh	r3, [r5, #12]
 8009d3c:	059a      	lsls	r2, r3, #22
 8009d3e:	d402      	bmi.n	8009d46 <_vfiprintf_r+0x32>
 8009d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d42:	f7ff f88c 	bl	8008e5e <__retarget_lock_acquire_recursive>
 8009d46:	89ab      	ldrh	r3, [r5, #12]
 8009d48:	071b      	lsls	r3, r3, #28
 8009d4a:	d501      	bpl.n	8009d50 <_vfiprintf_r+0x3c>
 8009d4c:	692b      	ldr	r3, [r5, #16]
 8009d4e:	b9eb      	cbnz	r3, 8009d8c <_vfiprintf_r+0x78>
 8009d50:	4629      	mov	r1, r5
 8009d52:	4630      	mov	r0, r6
 8009d54:	f000 f9f2 	bl	800a13c <__swsetup_r>
 8009d58:	b1c0      	cbz	r0, 8009d8c <_vfiprintf_r+0x78>
 8009d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d5c:	07dc      	lsls	r4, r3, #31
 8009d5e:	d50e      	bpl.n	8009d7e <_vfiprintf_r+0x6a>
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	b01d      	add	sp, #116	; 0x74
 8009d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6a:	4b7b      	ldr	r3, [pc, #492]	; (8009f58 <_vfiprintf_r+0x244>)
 8009d6c:	429d      	cmp	r5, r3
 8009d6e:	d101      	bne.n	8009d74 <_vfiprintf_r+0x60>
 8009d70:	68b5      	ldr	r5, [r6, #8]
 8009d72:	e7df      	b.n	8009d34 <_vfiprintf_r+0x20>
 8009d74:	4b79      	ldr	r3, [pc, #484]	; (8009f5c <_vfiprintf_r+0x248>)
 8009d76:	429d      	cmp	r5, r3
 8009d78:	bf08      	it	eq
 8009d7a:	68f5      	ldreq	r5, [r6, #12]
 8009d7c:	e7da      	b.n	8009d34 <_vfiprintf_r+0x20>
 8009d7e:	89ab      	ldrh	r3, [r5, #12]
 8009d80:	0598      	lsls	r0, r3, #22
 8009d82:	d4ed      	bmi.n	8009d60 <_vfiprintf_r+0x4c>
 8009d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d86:	f7ff f86b 	bl	8008e60 <__retarget_lock_release_recursive>
 8009d8a:	e7e9      	b.n	8009d60 <_vfiprintf_r+0x4c>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d90:	2320      	movs	r3, #32
 8009d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d9a:	2330      	movs	r3, #48	; 0x30
 8009d9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f60 <_vfiprintf_r+0x24c>
 8009da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009da4:	f04f 0901 	mov.w	r9, #1
 8009da8:	4623      	mov	r3, r4
 8009daa:	469a      	mov	sl, r3
 8009dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db0:	b10a      	cbz	r2, 8009db6 <_vfiprintf_r+0xa2>
 8009db2:	2a25      	cmp	r2, #37	; 0x25
 8009db4:	d1f9      	bne.n	8009daa <_vfiprintf_r+0x96>
 8009db6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dba:	d00b      	beq.n	8009dd4 <_vfiprintf_r+0xc0>
 8009dbc:	465b      	mov	r3, fp
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ff93 	bl	8009cee <__sfputs_r>
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f000 80aa 	beq.w	8009f22 <_vfiprintf_r+0x20e>
 8009dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dd0:	445a      	add	r2, fp
 8009dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 80a2 	beq.w	8009f22 <_vfiprintf_r+0x20e>
 8009dde:	2300      	movs	r3, #0
 8009de0:	f04f 32ff 	mov.w	r2, #4294967295
 8009de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009de8:	f10a 0a01 	add.w	sl, sl, #1
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009df4:	931a      	str	r3, [sp, #104]	; 0x68
 8009df6:	4654      	mov	r4, sl
 8009df8:	2205      	movs	r2, #5
 8009dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfe:	4858      	ldr	r0, [pc, #352]	; (8009f60 <_vfiprintf_r+0x24c>)
 8009e00:	f7f6 f9f6 	bl	80001f0 <memchr>
 8009e04:	9a04      	ldr	r2, [sp, #16]
 8009e06:	b9d8      	cbnz	r0, 8009e40 <_vfiprintf_r+0x12c>
 8009e08:	06d1      	lsls	r1, r2, #27
 8009e0a:	bf44      	itt	mi
 8009e0c:	2320      	movmi	r3, #32
 8009e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e12:	0713      	lsls	r3, r2, #28
 8009e14:	bf44      	itt	mi
 8009e16:	232b      	movmi	r3, #43	; 0x2b
 8009e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e20:	2b2a      	cmp	r3, #42	; 0x2a
 8009e22:	d015      	beq.n	8009e50 <_vfiprintf_r+0x13c>
 8009e24:	9a07      	ldr	r2, [sp, #28]
 8009e26:	4654      	mov	r4, sl
 8009e28:	2000      	movs	r0, #0
 8009e2a:	f04f 0c0a 	mov.w	ip, #10
 8009e2e:	4621      	mov	r1, r4
 8009e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e34:	3b30      	subs	r3, #48	; 0x30
 8009e36:	2b09      	cmp	r3, #9
 8009e38:	d94e      	bls.n	8009ed8 <_vfiprintf_r+0x1c4>
 8009e3a:	b1b0      	cbz	r0, 8009e6a <_vfiprintf_r+0x156>
 8009e3c:	9207      	str	r2, [sp, #28]
 8009e3e:	e014      	b.n	8009e6a <_vfiprintf_r+0x156>
 8009e40:	eba0 0308 	sub.w	r3, r0, r8
 8009e44:	fa09 f303 	lsl.w	r3, r9, r3
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	46a2      	mov	sl, r4
 8009e4e:	e7d2      	b.n	8009df6 <_vfiprintf_r+0xe2>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	1d19      	adds	r1, r3, #4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	9103      	str	r1, [sp, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bfbb      	ittet	lt
 8009e5c:	425b      	neglt	r3, r3
 8009e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e62:	9307      	strge	r3, [sp, #28]
 8009e64:	9307      	strlt	r3, [sp, #28]
 8009e66:	bfb8      	it	lt
 8009e68:	9204      	strlt	r2, [sp, #16]
 8009e6a:	7823      	ldrb	r3, [r4, #0]
 8009e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e6e:	d10c      	bne.n	8009e8a <_vfiprintf_r+0x176>
 8009e70:	7863      	ldrb	r3, [r4, #1]
 8009e72:	2b2a      	cmp	r3, #42	; 0x2a
 8009e74:	d135      	bne.n	8009ee2 <_vfiprintf_r+0x1ce>
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	1d1a      	adds	r2, r3, #4
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	9203      	str	r2, [sp, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bfb8      	it	lt
 8009e82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e86:	3402      	adds	r4, #2
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f70 <_vfiprintf_r+0x25c>
 8009e8e:	7821      	ldrb	r1, [r4, #0]
 8009e90:	2203      	movs	r2, #3
 8009e92:	4650      	mov	r0, sl
 8009e94:	f7f6 f9ac 	bl	80001f0 <memchr>
 8009e98:	b140      	cbz	r0, 8009eac <_vfiprintf_r+0x198>
 8009e9a:	2340      	movs	r3, #64	; 0x40
 8009e9c:	eba0 000a 	sub.w	r0, r0, sl
 8009ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	4303      	orrs	r3, r0
 8009ea8:	3401      	adds	r4, #1
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb0:	482c      	ldr	r0, [pc, #176]	; (8009f64 <_vfiprintf_r+0x250>)
 8009eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eb6:	2206      	movs	r2, #6
 8009eb8:	f7f6 f99a 	bl	80001f0 <memchr>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d03f      	beq.n	8009f40 <_vfiprintf_r+0x22c>
 8009ec0:	4b29      	ldr	r3, [pc, #164]	; (8009f68 <_vfiprintf_r+0x254>)
 8009ec2:	bb1b      	cbnz	r3, 8009f0c <_vfiprintf_r+0x1f8>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	3307      	adds	r3, #7
 8009ec8:	f023 0307 	bic.w	r3, r3, #7
 8009ecc:	3308      	adds	r3, #8
 8009ece:	9303      	str	r3, [sp, #12]
 8009ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed2:	443b      	add	r3, r7
 8009ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ed6:	e767      	b.n	8009da8 <_vfiprintf_r+0x94>
 8009ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009edc:	460c      	mov	r4, r1
 8009ede:	2001      	movs	r0, #1
 8009ee0:	e7a5      	b.n	8009e2e <_vfiprintf_r+0x11a>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	9305      	str	r3, [sp, #20]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f04f 0c0a 	mov.w	ip, #10
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ef4:	3a30      	subs	r2, #48	; 0x30
 8009ef6:	2a09      	cmp	r2, #9
 8009ef8:	d903      	bls.n	8009f02 <_vfiprintf_r+0x1ee>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0c5      	beq.n	8009e8a <_vfiprintf_r+0x176>
 8009efe:	9105      	str	r1, [sp, #20]
 8009f00:	e7c3      	b.n	8009e8a <_vfiprintf_r+0x176>
 8009f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f06:	4604      	mov	r4, r0
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e7f0      	b.n	8009eee <_vfiprintf_r+0x1da>
 8009f0c:	ab03      	add	r3, sp, #12
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	462a      	mov	r2, r5
 8009f12:	4b16      	ldr	r3, [pc, #88]	; (8009f6c <_vfiprintf_r+0x258>)
 8009f14:	a904      	add	r1, sp, #16
 8009f16:	4630      	mov	r0, r6
 8009f18:	f7fb fff8 	bl	8005f0c <_printf_float>
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	1c78      	adds	r0, r7, #1
 8009f20:	d1d6      	bne.n	8009ed0 <_vfiprintf_r+0x1bc>
 8009f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f24:	07d9      	lsls	r1, r3, #31
 8009f26:	d405      	bmi.n	8009f34 <_vfiprintf_r+0x220>
 8009f28:	89ab      	ldrh	r3, [r5, #12]
 8009f2a:	059a      	lsls	r2, r3, #22
 8009f2c:	d402      	bmi.n	8009f34 <_vfiprintf_r+0x220>
 8009f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f30:	f7fe ff96 	bl	8008e60 <__retarget_lock_release_recursive>
 8009f34:	89ab      	ldrh	r3, [r5, #12]
 8009f36:	065b      	lsls	r3, r3, #25
 8009f38:	f53f af12 	bmi.w	8009d60 <_vfiprintf_r+0x4c>
 8009f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f3e:	e711      	b.n	8009d64 <_vfiprintf_r+0x50>
 8009f40:	ab03      	add	r3, sp, #12
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	462a      	mov	r2, r5
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <_vfiprintf_r+0x258>)
 8009f48:	a904      	add	r1, sp, #16
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7fc fa82 	bl	8006454 <_printf_i>
 8009f50:	e7e4      	b.n	8009f1c <_vfiprintf_r+0x208>
 8009f52:	bf00      	nop
 8009f54:	0800a984 	.word	0x0800a984
 8009f58:	0800a9a4 	.word	0x0800a9a4
 8009f5c:	0800a964 	.word	0x0800a964
 8009f60:	0800ab9c 	.word	0x0800ab9c
 8009f64:	0800aba6 	.word	0x0800aba6
 8009f68:	08005f0d 	.word	0x08005f0d
 8009f6c:	08009cef 	.word	0x08009cef
 8009f70:	0800aba2 	.word	0x0800aba2
 8009f74:	00000000 	.word	0x00000000

08009f78 <nan>:
 8009f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f80 <nan+0x8>
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	00000000 	.word	0x00000000
 8009f84:	7ff80000 	.word	0x7ff80000

08009f88 <_sbrk_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d06      	ldr	r5, [pc, #24]	; (8009fa4 <_sbrk_r+0x1c>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	602b      	str	r3, [r5, #0]
 8009f94:	f7f7 fb70 	bl	8001678 <_sbrk>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_sbrk_r+0x1a>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_sbrk_r+0x1a>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	20004258 	.word	0x20004258

08009fa8 <__sread>:
 8009fa8:	b510      	push	{r4, lr}
 8009faa:	460c      	mov	r4, r1
 8009fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb0:	f000 fb02 	bl	800a5b8 <_read_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	bfab      	itete	ge
 8009fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fba:	89a3      	ldrhlt	r3, [r4, #12]
 8009fbc:	181b      	addge	r3, r3, r0
 8009fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fc2:	bfac      	ite	ge
 8009fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fc6:	81a3      	strhlt	r3, [r4, #12]
 8009fc8:	bd10      	pop	{r4, pc}

08009fca <__swrite>:
 8009fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fce:	461f      	mov	r7, r3
 8009fd0:	898b      	ldrh	r3, [r1, #12]
 8009fd2:	05db      	lsls	r3, r3, #23
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4616      	mov	r6, r2
 8009fda:	d505      	bpl.n	8009fe8 <__swrite+0x1e>
 8009fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f000 fa1a 	bl	800a41c <_lseek_r>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	4632      	mov	r2, r6
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffe:	f000 b88b 	b.w	800a118 <_write_r>

0800a002 <__sseek>:
 800a002:	b510      	push	{r4, lr}
 800a004:	460c      	mov	r4, r1
 800a006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a00a:	f000 fa07 	bl	800a41c <_lseek_r>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	bf15      	itete	ne
 800a014:	6560      	strne	r0, [r4, #84]	; 0x54
 800a016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a01a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a01e:	81a3      	strheq	r3, [r4, #12]
 800a020:	bf18      	it	ne
 800a022:	81a3      	strhne	r3, [r4, #12]
 800a024:	bd10      	pop	{r4, pc}

0800a026 <__sclose>:
 800a026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02a:	f000 b913 	b.w	800a254 <_close_r>

0800a02e <strncmp>:
 800a02e:	b510      	push	{r4, lr}
 800a030:	b17a      	cbz	r2, 800a052 <strncmp+0x24>
 800a032:	4603      	mov	r3, r0
 800a034:	3901      	subs	r1, #1
 800a036:	1884      	adds	r4, r0, r2
 800a038:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a03c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a040:	4290      	cmp	r0, r2
 800a042:	d101      	bne.n	800a048 <strncmp+0x1a>
 800a044:	42a3      	cmp	r3, r4
 800a046:	d101      	bne.n	800a04c <strncmp+0x1e>
 800a048:	1a80      	subs	r0, r0, r2
 800a04a:	bd10      	pop	{r4, pc}
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d1f3      	bne.n	800a038 <strncmp+0xa>
 800a050:	e7fa      	b.n	800a048 <strncmp+0x1a>
 800a052:	4610      	mov	r0, r2
 800a054:	e7f9      	b.n	800a04a <strncmp+0x1c>
	...

0800a058 <__swbuf_r>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	460e      	mov	r6, r1
 800a05c:	4614      	mov	r4, r2
 800a05e:	4605      	mov	r5, r0
 800a060:	b118      	cbz	r0, 800a06a <__swbuf_r+0x12>
 800a062:	6983      	ldr	r3, [r0, #24]
 800a064:	b90b      	cbnz	r3, 800a06a <__swbuf_r+0x12>
 800a066:	f7fe fae9 	bl	800863c <__sinit>
 800a06a:	4b21      	ldr	r3, [pc, #132]	; (800a0f0 <__swbuf_r+0x98>)
 800a06c:	429c      	cmp	r4, r3
 800a06e:	d12b      	bne.n	800a0c8 <__swbuf_r+0x70>
 800a070:	686c      	ldr	r4, [r5, #4]
 800a072:	69a3      	ldr	r3, [r4, #24]
 800a074:	60a3      	str	r3, [r4, #8]
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	071a      	lsls	r2, r3, #28
 800a07a:	d52f      	bpl.n	800a0dc <__swbuf_r+0x84>
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	b36b      	cbz	r3, 800a0dc <__swbuf_r+0x84>
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	1ac0      	subs	r0, r0, r3
 800a086:	6963      	ldr	r3, [r4, #20]
 800a088:	b2f6      	uxtb	r6, r6
 800a08a:	4283      	cmp	r3, r0
 800a08c:	4637      	mov	r7, r6
 800a08e:	dc04      	bgt.n	800a09a <__swbuf_r+0x42>
 800a090:	4621      	mov	r1, r4
 800a092:	4628      	mov	r0, r5
 800a094:	f000 f974 	bl	800a380 <_fflush_r>
 800a098:	bb30      	cbnz	r0, 800a0e8 <__swbuf_r+0x90>
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	60a3      	str	r3, [r4, #8]
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	6022      	str	r2, [r4, #0]
 800a0a6:	701e      	strb	r6, [r3, #0]
 800a0a8:	6963      	ldr	r3, [r4, #20]
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	4283      	cmp	r3, r0
 800a0ae:	d004      	beq.n	800a0ba <__swbuf_r+0x62>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	07db      	lsls	r3, r3, #31
 800a0b4:	d506      	bpl.n	800a0c4 <__swbuf_r+0x6c>
 800a0b6:	2e0a      	cmp	r6, #10
 800a0b8:	d104      	bne.n	800a0c4 <__swbuf_r+0x6c>
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	4628      	mov	r0, r5
 800a0be:	f000 f95f 	bl	800a380 <_fflush_r>
 800a0c2:	b988      	cbnz	r0, 800a0e8 <__swbuf_r+0x90>
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c8:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <__swbuf_r+0x9c>)
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	d101      	bne.n	800a0d2 <__swbuf_r+0x7a>
 800a0ce:	68ac      	ldr	r4, [r5, #8]
 800a0d0:	e7cf      	b.n	800a072 <__swbuf_r+0x1a>
 800a0d2:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <__swbuf_r+0xa0>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	bf08      	it	eq
 800a0d8:	68ec      	ldreq	r4, [r5, #12]
 800a0da:	e7ca      	b.n	800a072 <__swbuf_r+0x1a>
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f000 f82c 	bl	800a13c <__swsetup_r>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d0cb      	beq.n	800a080 <__swbuf_r+0x28>
 800a0e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a0ec:	e7ea      	b.n	800a0c4 <__swbuf_r+0x6c>
 800a0ee:	bf00      	nop
 800a0f0:	0800a984 	.word	0x0800a984
 800a0f4:	0800a9a4 	.word	0x0800a9a4
 800a0f8:	0800a964 	.word	0x0800a964

0800a0fc <__ascii_wctomb>:
 800a0fc:	b149      	cbz	r1, 800a112 <__ascii_wctomb+0x16>
 800a0fe:	2aff      	cmp	r2, #255	; 0xff
 800a100:	bf85      	ittet	hi
 800a102:	238a      	movhi	r3, #138	; 0x8a
 800a104:	6003      	strhi	r3, [r0, #0]
 800a106:	700a      	strbls	r2, [r1, #0]
 800a108:	f04f 30ff 	movhi.w	r0, #4294967295
 800a10c:	bf98      	it	ls
 800a10e:	2001      	movls	r0, #1
 800a110:	4770      	bx	lr
 800a112:	4608      	mov	r0, r1
 800a114:	4770      	bx	lr
	...

0800a118 <_write_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	; (800a138 <_write_r+0x20>)
 800a11c:	4604      	mov	r4, r0
 800a11e:	4608      	mov	r0, r1
 800a120:	4611      	mov	r1, r2
 800a122:	2200      	movs	r2, #0
 800a124:	602a      	str	r2, [r5, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	f7f7 fa55 	bl	80015d6 <_write>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_write_r+0x1e>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_write_r+0x1e>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	20004258 	.word	0x20004258

0800a13c <__swsetup_r>:
 800a13c:	4b32      	ldr	r3, [pc, #200]	; (800a208 <__swsetup_r+0xcc>)
 800a13e:	b570      	push	{r4, r5, r6, lr}
 800a140:	681d      	ldr	r5, [r3, #0]
 800a142:	4606      	mov	r6, r0
 800a144:	460c      	mov	r4, r1
 800a146:	b125      	cbz	r5, 800a152 <__swsetup_r+0x16>
 800a148:	69ab      	ldr	r3, [r5, #24]
 800a14a:	b913      	cbnz	r3, 800a152 <__swsetup_r+0x16>
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7fe fa75 	bl	800863c <__sinit>
 800a152:	4b2e      	ldr	r3, [pc, #184]	; (800a20c <__swsetup_r+0xd0>)
 800a154:	429c      	cmp	r4, r3
 800a156:	d10f      	bne.n	800a178 <__swsetup_r+0x3c>
 800a158:	686c      	ldr	r4, [r5, #4]
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a160:	0719      	lsls	r1, r3, #28
 800a162:	d42c      	bmi.n	800a1be <__swsetup_r+0x82>
 800a164:	06dd      	lsls	r5, r3, #27
 800a166:	d411      	bmi.n	800a18c <__swsetup_r+0x50>
 800a168:	2309      	movs	r3, #9
 800a16a:	6033      	str	r3, [r6, #0]
 800a16c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	e03e      	b.n	800a1f6 <__swsetup_r+0xba>
 800a178:	4b25      	ldr	r3, [pc, #148]	; (800a210 <__swsetup_r+0xd4>)
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d101      	bne.n	800a182 <__swsetup_r+0x46>
 800a17e:	68ac      	ldr	r4, [r5, #8]
 800a180:	e7eb      	b.n	800a15a <__swsetup_r+0x1e>
 800a182:	4b24      	ldr	r3, [pc, #144]	; (800a214 <__swsetup_r+0xd8>)
 800a184:	429c      	cmp	r4, r3
 800a186:	bf08      	it	eq
 800a188:	68ec      	ldreq	r4, [r5, #12]
 800a18a:	e7e6      	b.n	800a15a <__swsetup_r+0x1e>
 800a18c:	0758      	lsls	r0, r3, #29
 800a18e:	d512      	bpl.n	800a1b6 <__swsetup_r+0x7a>
 800a190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a192:	b141      	cbz	r1, 800a1a6 <__swsetup_r+0x6a>
 800a194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a198:	4299      	cmp	r1, r3
 800a19a:	d002      	beq.n	800a1a2 <__swsetup_r+0x66>
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff fb53 	bl	8009848 <_free_r>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1ac:	81a3      	strh	r3, [r4, #12]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6063      	str	r3, [r4, #4]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f043 0308 	orr.w	r3, r3, #8
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	b94b      	cbnz	r3, 800a1d6 <__swsetup_r+0x9a>
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1cc:	d003      	beq.n	800a1d6 <__swsetup_r+0x9a>
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 f95b 	bl	800a48c <__smakebuf_r>
 800a1d6:	89a0      	ldrh	r0, [r4, #12]
 800a1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1dc:	f010 0301 	ands.w	r3, r0, #1
 800a1e0:	d00a      	beq.n	800a1f8 <__swsetup_r+0xbc>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	6963      	ldr	r3, [r4, #20]
 800a1e8:	425b      	negs	r3, r3
 800a1ea:	61a3      	str	r3, [r4, #24]
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	b943      	cbnz	r3, 800a202 <__swsetup_r+0xc6>
 800a1f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1f4:	d1ba      	bne.n	800a16c <__swsetup_r+0x30>
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}
 800a1f8:	0781      	lsls	r1, r0, #30
 800a1fa:	bf58      	it	pl
 800a1fc:	6963      	ldrpl	r3, [r4, #20]
 800a1fe:	60a3      	str	r3, [r4, #8]
 800a200:	e7f4      	b.n	800a1ec <__swsetup_r+0xb0>
 800a202:	2000      	movs	r0, #0
 800a204:	e7f7      	b.n	800a1f6 <__swsetup_r+0xba>
 800a206:	bf00      	nop
 800a208:	20000010 	.word	0x20000010
 800a20c:	0800a984 	.word	0x0800a984
 800a210:	0800a9a4 	.word	0x0800a9a4
 800a214:	0800a964 	.word	0x0800a964

0800a218 <__assert_func>:
 800a218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a21a:	4614      	mov	r4, r2
 800a21c:	461a      	mov	r2, r3
 800a21e:	4b09      	ldr	r3, [pc, #36]	; (800a244 <__assert_func+0x2c>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4605      	mov	r5, r0
 800a224:	68d8      	ldr	r0, [r3, #12]
 800a226:	b14c      	cbz	r4, 800a23c <__assert_func+0x24>
 800a228:	4b07      	ldr	r3, [pc, #28]	; (800a248 <__assert_func+0x30>)
 800a22a:	9100      	str	r1, [sp, #0]
 800a22c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a230:	4906      	ldr	r1, [pc, #24]	; (800a24c <__assert_func+0x34>)
 800a232:	462b      	mov	r3, r5
 800a234:	f000 f8e0 	bl	800a3f8 <fiprintf>
 800a238:	f000 f9d0 	bl	800a5dc <abort>
 800a23c:	4b04      	ldr	r3, [pc, #16]	; (800a250 <__assert_func+0x38>)
 800a23e:	461c      	mov	r4, r3
 800a240:	e7f3      	b.n	800a22a <__assert_func+0x12>
 800a242:	bf00      	nop
 800a244:	20000010 	.word	0x20000010
 800a248:	0800abad 	.word	0x0800abad
 800a24c:	0800abba 	.word	0x0800abba
 800a250:	0800abe8 	.word	0x0800abe8

0800a254 <_close_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d06      	ldr	r5, [pc, #24]	; (800a270 <_close_r+0x1c>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4604      	mov	r4, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	602b      	str	r3, [r5, #0]
 800a260:	f7f7 f9d5 	bl	800160e <_close>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_close_r+0x1a>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_close_r+0x1a>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	20004258 	.word	0x20004258

0800a274 <__sflush_r>:
 800a274:	898a      	ldrh	r2, [r1, #12]
 800a276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27a:	4605      	mov	r5, r0
 800a27c:	0710      	lsls	r0, r2, #28
 800a27e:	460c      	mov	r4, r1
 800a280:	d458      	bmi.n	800a334 <__sflush_r+0xc0>
 800a282:	684b      	ldr	r3, [r1, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	dc05      	bgt.n	800a294 <__sflush_r+0x20>
 800a288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	dc02      	bgt.n	800a294 <__sflush_r+0x20>
 800a28e:	2000      	movs	r0, #0
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a296:	2e00      	cmp	r6, #0
 800a298:	d0f9      	beq.n	800a28e <__sflush_r+0x1a>
 800a29a:	2300      	movs	r3, #0
 800a29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2a0:	682f      	ldr	r7, [r5, #0]
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	d032      	beq.n	800a30c <__sflush_r+0x98>
 800a2a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	075a      	lsls	r2, r3, #29
 800a2ac:	d505      	bpl.n	800a2ba <__sflush_r+0x46>
 800a2ae:	6863      	ldr	r3, [r4, #4]
 800a2b0:	1ac0      	subs	r0, r0, r3
 800a2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2b4:	b10b      	cbz	r3, 800a2ba <__sflush_r+0x46>
 800a2b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2b8:	1ac0      	subs	r0, r0, r3
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c0:	6a21      	ldr	r1, [r4, #32]
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b0      	blx	r6
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	d106      	bne.n	800a2da <__sflush_r+0x66>
 800a2cc:	6829      	ldr	r1, [r5, #0]
 800a2ce:	291d      	cmp	r1, #29
 800a2d0:	d82c      	bhi.n	800a32c <__sflush_r+0xb8>
 800a2d2:	4a2a      	ldr	r2, [pc, #168]	; (800a37c <__sflush_r+0x108>)
 800a2d4:	40ca      	lsrs	r2, r1
 800a2d6:	07d6      	lsls	r6, r2, #31
 800a2d8:	d528      	bpl.n	800a32c <__sflush_r+0xb8>
 800a2da:	2200      	movs	r2, #0
 800a2dc:	6062      	str	r2, [r4, #4]
 800a2de:	04d9      	lsls	r1, r3, #19
 800a2e0:	6922      	ldr	r2, [r4, #16]
 800a2e2:	6022      	str	r2, [r4, #0]
 800a2e4:	d504      	bpl.n	800a2f0 <__sflush_r+0x7c>
 800a2e6:	1c42      	adds	r2, r0, #1
 800a2e8:	d101      	bne.n	800a2ee <__sflush_r+0x7a>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b903      	cbnz	r3, 800a2f0 <__sflush_r+0x7c>
 800a2ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2f2:	602f      	str	r7, [r5, #0]
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	d0ca      	beq.n	800a28e <__sflush_r+0x1a>
 800a2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	d002      	beq.n	800a306 <__sflush_r+0x92>
 800a300:	4628      	mov	r0, r5
 800a302:	f7ff faa1 	bl	8009848 <_free_r>
 800a306:	2000      	movs	r0, #0
 800a308:	6360      	str	r0, [r4, #52]	; 0x34
 800a30a:	e7c1      	b.n	800a290 <__sflush_r+0x1c>
 800a30c:	6a21      	ldr	r1, [r4, #32]
 800a30e:	2301      	movs	r3, #1
 800a310:	4628      	mov	r0, r5
 800a312:	47b0      	blx	r6
 800a314:	1c41      	adds	r1, r0, #1
 800a316:	d1c7      	bne.n	800a2a8 <__sflush_r+0x34>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0c4      	beq.n	800a2a8 <__sflush_r+0x34>
 800a31e:	2b1d      	cmp	r3, #29
 800a320:	d001      	beq.n	800a326 <__sflush_r+0xb2>
 800a322:	2b16      	cmp	r3, #22
 800a324:	d101      	bne.n	800a32a <__sflush_r+0xb6>
 800a326:	602f      	str	r7, [r5, #0]
 800a328:	e7b1      	b.n	800a28e <__sflush_r+0x1a>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a330:	81a3      	strh	r3, [r4, #12]
 800a332:	e7ad      	b.n	800a290 <__sflush_r+0x1c>
 800a334:	690f      	ldr	r7, [r1, #16]
 800a336:	2f00      	cmp	r7, #0
 800a338:	d0a9      	beq.n	800a28e <__sflush_r+0x1a>
 800a33a:	0793      	lsls	r3, r2, #30
 800a33c:	680e      	ldr	r6, [r1, #0]
 800a33e:	bf08      	it	eq
 800a340:	694b      	ldreq	r3, [r1, #20]
 800a342:	600f      	str	r7, [r1, #0]
 800a344:	bf18      	it	ne
 800a346:	2300      	movne	r3, #0
 800a348:	eba6 0807 	sub.w	r8, r6, r7
 800a34c:	608b      	str	r3, [r1, #8]
 800a34e:	f1b8 0f00 	cmp.w	r8, #0
 800a352:	dd9c      	ble.n	800a28e <__sflush_r+0x1a>
 800a354:	6a21      	ldr	r1, [r4, #32]
 800a356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a358:	4643      	mov	r3, r8
 800a35a:	463a      	mov	r2, r7
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b0      	blx	r6
 800a360:	2800      	cmp	r0, #0
 800a362:	dc06      	bgt.n	800a372 <__sflush_r+0xfe>
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	e78e      	b.n	800a290 <__sflush_r+0x1c>
 800a372:	4407      	add	r7, r0
 800a374:	eba8 0800 	sub.w	r8, r8, r0
 800a378:	e7e9      	b.n	800a34e <__sflush_r+0xda>
 800a37a:	bf00      	nop
 800a37c:	20400001 	.word	0x20400001

0800a380 <_fflush_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	690b      	ldr	r3, [r1, #16]
 800a384:	4605      	mov	r5, r0
 800a386:	460c      	mov	r4, r1
 800a388:	b913      	cbnz	r3, 800a390 <_fflush_r+0x10>
 800a38a:	2500      	movs	r5, #0
 800a38c:	4628      	mov	r0, r5
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	b118      	cbz	r0, 800a39a <_fflush_r+0x1a>
 800a392:	6983      	ldr	r3, [r0, #24]
 800a394:	b90b      	cbnz	r3, 800a39a <_fflush_r+0x1a>
 800a396:	f7fe f951 	bl	800863c <__sinit>
 800a39a:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <_fflush_r+0x6c>)
 800a39c:	429c      	cmp	r4, r3
 800a39e:	d11b      	bne.n	800a3d8 <_fflush_r+0x58>
 800a3a0:	686c      	ldr	r4, [r5, #4]
 800a3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0ef      	beq.n	800a38a <_fflush_r+0xa>
 800a3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3ac:	07d0      	lsls	r0, r2, #31
 800a3ae:	d404      	bmi.n	800a3ba <_fflush_r+0x3a>
 800a3b0:	0599      	lsls	r1, r3, #22
 800a3b2:	d402      	bmi.n	800a3ba <_fflush_r+0x3a>
 800a3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3b6:	f7fe fd52 	bl	8008e5e <__retarget_lock_acquire_recursive>
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	4621      	mov	r1, r4
 800a3be:	f7ff ff59 	bl	800a274 <__sflush_r>
 800a3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3c4:	07da      	lsls	r2, r3, #31
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	d4e0      	bmi.n	800a38c <_fflush_r+0xc>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	059b      	lsls	r3, r3, #22
 800a3ce:	d4dd      	bmi.n	800a38c <_fflush_r+0xc>
 800a3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3d2:	f7fe fd45 	bl	8008e60 <__retarget_lock_release_recursive>
 800a3d6:	e7d9      	b.n	800a38c <_fflush_r+0xc>
 800a3d8:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <_fflush_r+0x70>)
 800a3da:	429c      	cmp	r4, r3
 800a3dc:	d101      	bne.n	800a3e2 <_fflush_r+0x62>
 800a3de:	68ac      	ldr	r4, [r5, #8]
 800a3e0:	e7df      	b.n	800a3a2 <_fflush_r+0x22>
 800a3e2:	4b04      	ldr	r3, [pc, #16]	; (800a3f4 <_fflush_r+0x74>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	bf08      	it	eq
 800a3e8:	68ec      	ldreq	r4, [r5, #12]
 800a3ea:	e7da      	b.n	800a3a2 <_fflush_r+0x22>
 800a3ec:	0800a984 	.word	0x0800a984
 800a3f0:	0800a9a4 	.word	0x0800a9a4
 800a3f4:	0800a964 	.word	0x0800a964

0800a3f8 <fiprintf>:
 800a3f8:	b40e      	push	{r1, r2, r3}
 800a3fa:	b503      	push	{r0, r1, lr}
 800a3fc:	4601      	mov	r1, r0
 800a3fe:	ab03      	add	r3, sp, #12
 800a400:	4805      	ldr	r0, [pc, #20]	; (800a418 <fiprintf+0x20>)
 800a402:	f853 2b04 	ldr.w	r2, [r3], #4
 800a406:	6800      	ldr	r0, [r0, #0]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	f7ff fc83 	bl	8009d14 <_vfiprintf_r>
 800a40e:	b002      	add	sp, #8
 800a410:	f85d eb04 	ldr.w	lr, [sp], #4
 800a414:	b003      	add	sp, #12
 800a416:	4770      	bx	lr
 800a418:	20000010 	.word	0x20000010

0800a41c <_lseek_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4d07      	ldr	r5, [pc, #28]	; (800a43c <_lseek_r+0x20>)
 800a420:	4604      	mov	r4, r0
 800a422:	4608      	mov	r0, r1
 800a424:	4611      	mov	r1, r2
 800a426:	2200      	movs	r2, #0
 800a428:	602a      	str	r2, [r5, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	f7f7 f916 	bl	800165c <_lseek>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_lseek_r+0x1e>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_lseek_r+0x1e>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20004258 	.word	0x20004258

0800a440 <__swhatbuf_r>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	460e      	mov	r6, r1
 800a444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a448:	2900      	cmp	r1, #0
 800a44a:	b096      	sub	sp, #88	; 0x58
 800a44c:	4614      	mov	r4, r2
 800a44e:	461d      	mov	r5, r3
 800a450:	da08      	bge.n	800a464 <__swhatbuf_r+0x24>
 800a452:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	061a      	lsls	r2, r3, #24
 800a45c:	d410      	bmi.n	800a480 <__swhatbuf_r+0x40>
 800a45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a462:	e00e      	b.n	800a482 <__swhatbuf_r+0x42>
 800a464:	466a      	mov	r2, sp
 800a466:	f000 f8c1 	bl	800a5ec <_fstat_r>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	dbf1      	blt.n	800a452 <__swhatbuf_r+0x12>
 800a46e:	9a01      	ldr	r2, [sp, #4]
 800a470:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a474:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a478:	425a      	negs	r2, r3
 800a47a:	415a      	adcs	r2, r3
 800a47c:	602a      	str	r2, [r5, #0]
 800a47e:	e7ee      	b.n	800a45e <__swhatbuf_r+0x1e>
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	2000      	movs	r0, #0
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	b016      	add	sp, #88	; 0x58
 800a488:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a48c <__smakebuf_r>:
 800a48c:	898b      	ldrh	r3, [r1, #12]
 800a48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a490:	079d      	lsls	r5, r3, #30
 800a492:	4606      	mov	r6, r0
 800a494:	460c      	mov	r4, r1
 800a496:	d507      	bpl.n	800a4a8 <__smakebuf_r+0x1c>
 800a498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	6163      	str	r3, [r4, #20]
 800a4a4:	b002      	add	sp, #8
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	ab01      	add	r3, sp, #4
 800a4aa:	466a      	mov	r2, sp
 800a4ac:	f7ff ffc8 	bl	800a440 <__swhatbuf_r>
 800a4b0:	9900      	ldr	r1, [sp, #0]
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff fa33 	bl	8009920 <_malloc_r>
 800a4ba:	b948      	cbnz	r0, 800a4d0 <__smakebuf_r+0x44>
 800a4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c0:	059a      	lsls	r2, r3, #22
 800a4c2:	d4ef      	bmi.n	800a4a4 <__smakebuf_r+0x18>
 800a4c4:	f023 0303 	bic.w	r3, r3, #3
 800a4c8:	f043 0302 	orr.w	r3, r3, #2
 800a4cc:	81a3      	strh	r3, [r4, #12]
 800a4ce:	e7e3      	b.n	800a498 <__smakebuf_r+0xc>
 800a4d0:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <__smakebuf_r+0x7c>)
 800a4d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	6020      	str	r0, [r4, #0]
 800a4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	6163      	str	r3, [r4, #20]
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	6120      	str	r0, [r4, #16]
 800a4e6:	b15b      	cbz	r3, 800a500 <__smakebuf_r+0x74>
 800a4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f000 f88f 	bl	800a610 <_isatty_r>
 800a4f2:	b128      	cbz	r0, 800a500 <__smakebuf_r+0x74>
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	89a0      	ldrh	r0, [r4, #12]
 800a502:	4305      	orrs	r5, r0
 800a504:	81a5      	strh	r5, [r4, #12]
 800a506:	e7cd      	b.n	800a4a4 <__smakebuf_r+0x18>
 800a508:	080085d5 	.word	0x080085d5

0800a50c <memmove>:
 800a50c:	4288      	cmp	r0, r1
 800a50e:	b510      	push	{r4, lr}
 800a510:	eb01 0402 	add.w	r4, r1, r2
 800a514:	d902      	bls.n	800a51c <memmove+0x10>
 800a516:	4284      	cmp	r4, r0
 800a518:	4623      	mov	r3, r4
 800a51a:	d807      	bhi.n	800a52c <memmove+0x20>
 800a51c:	1e43      	subs	r3, r0, #1
 800a51e:	42a1      	cmp	r1, r4
 800a520:	d008      	beq.n	800a534 <memmove+0x28>
 800a522:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a52a:	e7f8      	b.n	800a51e <memmove+0x12>
 800a52c:	4402      	add	r2, r0
 800a52e:	4601      	mov	r1, r0
 800a530:	428a      	cmp	r2, r1
 800a532:	d100      	bne.n	800a536 <memmove+0x2a>
 800a534:	bd10      	pop	{r4, pc}
 800a536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a53a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a53e:	e7f7      	b.n	800a530 <memmove+0x24>

0800a540 <__malloc_lock>:
 800a540:	4801      	ldr	r0, [pc, #4]	; (800a548 <__malloc_lock+0x8>)
 800a542:	f7fe bc8c 	b.w	8008e5e <__retarget_lock_acquire_recursive>
 800a546:	bf00      	nop
 800a548:	2000424c 	.word	0x2000424c

0800a54c <__malloc_unlock>:
 800a54c:	4801      	ldr	r0, [pc, #4]	; (800a554 <__malloc_unlock+0x8>)
 800a54e:	f7fe bc87 	b.w	8008e60 <__retarget_lock_release_recursive>
 800a552:	bf00      	nop
 800a554:	2000424c 	.word	0x2000424c

0800a558 <_realloc_r>:
 800a558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55c:	4680      	mov	r8, r0
 800a55e:	4614      	mov	r4, r2
 800a560:	460e      	mov	r6, r1
 800a562:	b921      	cbnz	r1, 800a56e <_realloc_r+0x16>
 800a564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a568:	4611      	mov	r1, r2
 800a56a:	f7ff b9d9 	b.w	8009920 <_malloc_r>
 800a56e:	b92a      	cbnz	r2, 800a57c <_realloc_r+0x24>
 800a570:	f7ff f96a 	bl	8009848 <_free_r>
 800a574:	4625      	mov	r5, r4
 800a576:	4628      	mov	r0, r5
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	f000 f858 	bl	800a630 <_malloc_usable_size_r>
 800a580:	4284      	cmp	r4, r0
 800a582:	4607      	mov	r7, r0
 800a584:	d802      	bhi.n	800a58c <_realloc_r+0x34>
 800a586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a58a:	d812      	bhi.n	800a5b2 <_realloc_r+0x5a>
 800a58c:	4621      	mov	r1, r4
 800a58e:	4640      	mov	r0, r8
 800a590:	f7ff f9c6 	bl	8009920 <_malloc_r>
 800a594:	4605      	mov	r5, r0
 800a596:	2800      	cmp	r0, #0
 800a598:	d0ed      	beq.n	800a576 <_realloc_r+0x1e>
 800a59a:	42bc      	cmp	r4, r7
 800a59c:	4622      	mov	r2, r4
 800a59e:	4631      	mov	r1, r6
 800a5a0:	bf28      	it	cs
 800a5a2:	463a      	movcs	r2, r7
 800a5a4:	f7fb fbfc 	bl	8005da0 <memcpy>
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	f7ff f94c 	bl	8009848 <_free_r>
 800a5b0:	e7e1      	b.n	800a576 <_realloc_r+0x1e>
 800a5b2:	4635      	mov	r5, r6
 800a5b4:	e7df      	b.n	800a576 <_realloc_r+0x1e>
	...

0800a5b8 <_read_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	4d07      	ldr	r5, [pc, #28]	; (800a5d8 <_read_r+0x20>)
 800a5bc:	4604      	mov	r4, r0
 800a5be:	4608      	mov	r0, r1
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	602a      	str	r2, [r5, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f7f6 ffe8 	bl	800159c <_read>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	d102      	bne.n	800a5d6 <_read_r+0x1e>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b103      	cbz	r3, 800a5d6 <_read_r+0x1e>
 800a5d4:	6023      	str	r3, [r4, #0]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	20004258 	.word	0x20004258

0800a5dc <abort>:
 800a5dc:	b508      	push	{r3, lr}
 800a5de:	2006      	movs	r0, #6
 800a5e0:	f000 f856 	bl	800a690 <raise>
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	f7f6 ffcf 	bl	8001588 <_exit>
	...

0800a5ec <_fstat_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	; (800a60c <_fstat_r+0x20>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	602b      	str	r3, [r5, #0]
 800a5fa:	f7f7 f814 	bl	8001626 <_fstat>
 800a5fe:	1c43      	adds	r3, r0, #1
 800a600:	d102      	bne.n	800a608 <_fstat_r+0x1c>
 800a602:	682b      	ldr	r3, [r5, #0]
 800a604:	b103      	cbz	r3, 800a608 <_fstat_r+0x1c>
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	20004258 	.word	0x20004258

0800a610 <_isatty_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d06      	ldr	r5, [pc, #24]	; (800a62c <_isatty_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f7 f813 	bl	8001646 <_isatty>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_isatty_r+0x1a>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_isatty_r+0x1a>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20004258 	.word	0x20004258

0800a630 <_malloc_usable_size_r>:
 800a630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a634:	1f18      	subs	r0, r3, #4
 800a636:	2b00      	cmp	r3, #0
 800a638:	bfbc      	itt	lt
 800a63a:	580b      	ldrlt	r3, [r1, r0]
 800a63c:	18c0      	addlt	r0, r0, r3
 800a63e:	4770      	bx	lr

0800a640 <_raise_r>:
 800a640:	291f      	cmp	r1, #31
 800a642:	b538      	push	{r3, r4, r5, lr}
 800a644:	4604      	mov	r4, r0
 800a646:	460d      	mov	r5, r1
 800a648:	d904      	bls.n	800a654 <_raise_r+0x14>
 800a64a:	2316      	movs	r3, #22
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	f04f 30ff 	mov.w	r0, #4294967295
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a656:	b112      	cbz	r2, 800a65e <_raise_r+0x1e>
 800a658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a65c:	b94b      	cbnz	r3, 800a672 <_raise_r+0x32>
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 f830 	bl	800a6c4 <_getpid_r>
 800a664:	462a      	mov	r2, r5
 800a666:	4601      	mov	r1, r0
 800a668:	4620      	mov	r0, r4
 800a66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a66e:	f000 b817 	b.w	800a6a0 <_kill_r>
 800a672:	2b01      	cmp	r3, #1
 800a674:	d00a      	beq.n	800a68c <_raise_r+0x4c>
 800a676:	1c59      	adds	r1, r3, #1
 800a678:	d103      	bne.n	800a682 <_raise_r+0x42>
 800a67a:	2316      	movs	r3, #22
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	2001      	movs	r0, #1
 800a680:	e7e7      	b.n	800a652 <_raise_r+0x12>
 800a682:	2400      	movs	r4, #0
 800a684:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a688:	4628      	mov	r0, r5
 800a68a:	4798      	blx	r3
 800a68c:	2000      	movs	r0, #0
 800a68e:	e7e0      	b.n	800a652 <_raise_r+0x12>

0800a690 <raise>:
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <raise+0xc>)
 800a692:	4601      	mov	r1, r0
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	f7ff bfd3 	b.w	800a640 <_raise_r>
 800a69a:	bf00      	nop
 800a69c:	20000010 	.word	0x20000010

0800a6a0 <_kill_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4d07      	ldr	r5, [pc, #28]	; (800a6c0 <_kill_r+0x20>)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	4608      	mov	r0, r1
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	f7f6 ff5b 	bl	8001568 <_kill>
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	d102      	bne.n	800a6bc <_kill_r+0x1c>
 800a6b6:	682b      	ldr	r3, [r5, #0]
 800a6b8:	b103      	cbz	r3, 800a6bc <_kill_r+0x1c>
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
 800a6be:	bf00      	nop
 800a6c0:	20004258 	.word	0x20004258

0800a6c4 <_getpid_r>:
 800a6c4:	f7f6 bf48 	b.w	8001558 <_getpid>

0800a6c8 <_init>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	bf00      	nop
 800a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ce:	bc08      	pop	{r3}
 800a6d0:	469e      	mov	lr, r3
 800a6d2:	4770      	bx	lr

0800a6d4 <_fini>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	bf00      	nop
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr
